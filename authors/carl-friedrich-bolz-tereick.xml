<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyPy (Posts by Carl Friedrich Bolz-Tereick)</title><link>https://www.pypy.org/</link><description></description><atom:link href="https://www.pypy.org/authors/carl-friedrich-bolz-tereick.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:pypy-dev@pypy.org"&gt;The PyPy Team&lt;/a&gt; </copyright><lastBuildDate>Fri, 30 Aug 2024 08:28:16 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Fixing a Bug in PyPy's Incremental GC</title><link>https://www.pypy.org/posts/2024/03/fixing-bug-incremental-gc.html</link><dc:creator>Carl Friedrich Bolz-Tereick</dc:creator><description>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Since last summer, I've been looking on and off into a weird and hard to
reproduce &lt;a href="https://github.com/pypy/pypy/issues/3959"&gt;crash bug in PyPy&lt;/a&gt;. It was
manifesting only on CI, and it seemed to always happen in the AST rewriting
phase of &lt;a href="https://pytest.org"&gt;pytest&lt;/a&gt;, the symptoms being that PyPy would crash
with a segfault. All my attempts to reproduce it locally failed, and my
attempts to try to understand the problem by dumping the involved ASTs lead
nowhere.&lt;/p&gt;
&lt;p&gt;A few weeks ago, we got &lt;a href="https://github.com/PyO3/pyo3/issues/3766"&gt;two more&lt;/a&gt;
&lt;a href="https://github.com/orgs/pypy/discussions/4923"&gt;bug reports&lt;/a&gt;, the last one by
the authors of the &lt;a href="https://nanobind.readthedocs.io/"&gt;nanobind&lt;/a&gt; binding
generator, with the same symptoms: crash in AST rewriting, only on CI. I
decided to make a more serious push to try to find the bug this time.
Ultimately the problem turned out to be several bugs in PyPy's garbage
collector (GC) that had been there since its inception in
&lt;a href="https://www.pypy.org/posts/2013/10/incremental-garbage-collector-in-pypy-8956893523842234676.html"&gt;2013&lt;/a&gt;.
Understanding the
situation turned out to be quite involved, additionally complicated by this
being the first time that I was working on this particular aspect of PyPy's GC.
Since the bug was so much work to find, I thought I'd write a blog post about
it.&lt;/p&gt;
&lt;p&gt;The blog post consists of three parts: first a chronological description of
what I did to find the bug, a technical explanation of what goes wrong, some
reflections on the bug (and then a bonus bug I also found in the process).&lt;/p&gt;
&lt;h2 id="finding-the-bug"&gt;Finding the Bug&lt;/h2&gt;
&lt;p&gt;I started from the failing &lt;a href="https://github.com/wjakob/nanobind/actions/runs/8234561874/job/22516568891"&gt;nanobind CI
runs&lt;/a&gt;
that ended with a segfault of the PyPy interpreter. This was only an
intermittent problem, not every run was failing. When I tried to just run the
test suite locally, I couldn't get it to fail. Therefore at first I tried to
learn more about what was happening by looking on the CI runners.&lt;/p&gt;
&lt;h3 id="running-on-ci"&gt;Running on CI&lt;/h3&gt;
&lt;p&gt;I forked the nanobind repo and hacked the CI script in order to get it to use a
PyPy build with &lt;a href="https://doc.pypy.org/en/latest/build.html#making-a-debug-build-of-pypy"&gt;full debug information and more assertions turned on&lt;/a&gt;. In order
to increase the probability of seeing the crash I added an otherwise unused
&lt;a href="https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs"&gt;matrix&lt;/a&gt;
variable to the CI script that just contained 32 parameters. This means every
build is done 32 times (sorry Github for wasting your CPUs 😕). With that
amount of repetition, I got at least one job of every build that was crashing.&lt;/p&gt;
&lt;p&gt;Then I added the &lt;code&gt;-Xfaulthandler&lt;/code&gt; option to the PyPy command which will use the
&lt;a href="https://docs.python.org/3.11/library/faulthandler.html"&gt;faulthandler&lt;/a&gt; module
try to print a Python stacktrace if the VM segfaults to confirm that PyPy was
indeed crashing in the &lt;a href="https://docs.python.org/3/library/ast.html"&gt;AST&lt;/a&gt;
&lt;a href="https://github.com/pytest-dev/pytest/blob/main/src/_pytest/assertion/rewrite.py"&gt;rewriting
phase&lt;/a&gt;
of pytest, which pytest uses for &lt;a href="https://docs.pytest.org/en/7.1.x/how-to/assert.html#asserting-with-the-assert-statement"&gt;nicer
assertions&lt;/a&gt;.
I experimented with hacking our faulthandler implementation to also give me a
C-level callstack, but that didn't work as well as I hoped.&lt;/p&gt;
&lt;p&gt;Then I tried to run &lt;a href="https://sourceware.org/gdb/"&gt;gdb&lt;/a&gt; on CI to try to get it
to print a C callstack at the crash point. You can get gdb to execute commands
as if typed at the prompt with the &lt;code&gt;-ex&lt;/code&gt; commandline option, I used something
like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;gdb -ex "set confirm off" -ex "set pagination off" -ex \
    "set debuginfod enabled off" -ex run -ex where -ex quit \
    --args &amp;lt;command&amp;gt; &amp;lt;arguments&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But unfortunately the crash never occurred when running in gdb.&lt;/p&gt;
&lt;p&gt;Afterwards I tried the next best thing, which was configuring the CI runner to
&lt;a href="https://github.com/itamarst/gha-upload-cores"&gt;dump a core file and upload it as a build
artifact&lt;/a&gt;, which worked. Looking
at the cores locally only sort of worked, because I am running a different
version of Ubuntu than the CI runners. So I used
&lt;a href="https://mxschmitt.github.io/action-tmate/"&gt;tmate&lt;/a&gt; to be able to log into the
CI runner after a crash and interactively used gdb there. Unfortunately what I
learned from that was that the bug was some kind of &lt;strong&gt;memory corruption&lt;/strong&gt;,
which is always incredibly unpleasant to debug. Basically the header word of a
Python object had been corrupted somehow at the point of the crash, which means
that it's &lt;a href="https://en.wikipedia.org/wiki/Virtual_method_table"&gt;vtable&lt;/a&gt; wasn't
usable any more.&lt;/p&gt;
&lt;p&gt;(Sidenote: &lt;a href="https://www.pypy.org/posts/2009/10/gc-improvements-6174120095428192954.html#unifying-the-vtable-ptr-with-the-gc-header"&gt;PyPy doesn't really use a vtable
pointer&lt;/a&gt;,
instead it uses half a word in the header for the vtable, and the other half
for flags that the GC needs to keep track of the state of the object.
Corrupting all this is still bad.)&lt;/p&gt;
&lt;h3 id="reproducing-locally"&gt;Reproducing Locally&lt;/h3&gt;
&lt;p&gt;At that point it was clear that I had to push to reproduce the problem on my
laptop, to allow me to work on the problem more directly and not to always have
to go via the CI runner. Memory corruption bugs often have a lot of randomness
(depending on which part of memory gets modified, things might crash or more
likely just happily keep running). Therefore I decided to try to brute-force
reproducing the crash by simply running the tests many many times. Since the
crash happened in the AST rewriting phase of pytest, and that happens only if
no &lt;a href="https://stackoverflow.com/questions/2998215/if-python-is-interpreted-what-are-pyc-files"&gt;pyc
files&lt;/a&gt;
of the bytecode-compiled rewritten ASTs exist, I made sure to delete them
before every test run.&lt;/p&gt;
&lt;p&gt;To repeat the test runs I used
&lt;a href="https://tratt.net/laurie/src/multitime/"&gt;multitime&lt;/a&gt;, which is a simple program
that runs a command repeatedly. It's meant for lightweight benchmarking
purposes, but it also halts the execution of the command if that command exits
with an error (and it sleeps a small random time between runs, which might help
with randomizing the situation, maybe). Here's a demo:&lt;/p&gt;
&lt;script src="https://asciinema.org/a/648877.js" id="asciicast-648877" async="true"&gt;&lt;/script&gt;

&lt;p&gt;(&lt;a href="https://bernsteinbear.com/"&gt;Max&lt;/a&gt; pointed out
&lt;a href="https://github.com/silentbicycle/autoclave"&gt;autoclave&lt;/a&gt; to me when reviewing
this post, which is a more dedicated tool for this job.)&lt;/p&gt;
&lt;p&gt;Thankfully, running the tests repeatedly eventually lead to a crash, solving my
"only happens on CI" problem. I then tried various variants to exclude possible
sources of errors. The first source of errors to exclude in PyPy bugs is the
just-in-time compiler, so I reran the tests with &lt;code&gt;--jit off&lt;/code&gt; to see whether I
could still get it to crash, and thankfully I eventually could (JIT bugs are
often very annoying).&lt;/p&gt;
&lt;p&gt;Next source of bugs to exclude where C-extensions. Since those were the tests
of nanobind, a framework for creating C-extension modules I was a bit worried
that the bug might be in our emulation of CPython's C-API. But running PyPy
with the &lt;code&gt;-v&lt;/code&gt; option (which will print all the imports as they happen)
confirmed that at the point of crash no C-extension had been imported yet.&lt;/p&gt;
&lt;h3 id="using-rr"&gt;Using &lt;code&gt;rr&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;I still couldn't get the bug to happen in GDB, so the tool I tried next was
&lt;a href="https://rr-project.org/"&gt;rr, the "reverse debugger"&lt;/a&gt;. rr can record the execution of a program and
later replay it arbitrarily often. This gives you a time-traveling debugger
that allows you to execute the program backwards in addition to forwards.
Eventually I managed to get the crash to happen when running the tests with
&lt;code&gt;rr record --chaos&lt;/code&gt; (&lt;code&gt;--chaos&lt;/code&gt; randomizes some decisions that rr takes, to try to
increase the chance of reproducing bugs).&lt;/p&gt;
&lt;p&gt;Using rr well is quite hard, and I'm not very good at it. The main approach I
use with rr to debug memory corruption is to replay the crash, then set a
&lt;a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/Set-Watchpoints.html"&gt;watchpoint&lt;/a&gt;
for the corrupted memory location, then use the command &lt;code&gt;reverse-continue&lt;/code&gt; to
find the place in the code that mutated the memory location. &lt;code&gt;reverse-continue&lt;/code&gt;
is like &lt;code&gt;continue&lt;/code&gt;, except that it will execute the program backwards from the
current point. Here's a little demo of this:&lt;/p&gt;
&lt;script src="https://asciinema.org/a/648814.js" id="asciicast-648814" async="true"&gt;&lt;/script&gt;

&lt;p&gt;Doing this for my bug revealed that the object that was being corrupted was
erroneously collected by the garbage collector. For some reason the GC had
wrongly decided that the object was no longer reachable and therefore put the
object into a freelist by writing a pointer to the next entry in the freelist
into the first word of the object, overwriting the object's header. The next
time the object was used things crashed.&lt;/p&gt;
&lt;h3 id="side-quest-wrong-gc-assertions"&gt;Side-quest: wrong GC assertions&lt;/h3&gt;
&lt;p&gt;At this point in the process, I got massively side-tracked. PyPy's GC has a
number of debug modes that you can optionally turn on. Those slow down the
program execution a lot, but they should in theory help to understand why the
GC goes wrong. When I turned them on, I was getting a failing assertion really
early in the test execution, complaining about an invariant violation in the GC
logic. At first this made me very happy. I thought that this would help me fix
the bug more quickly.&lt;/p&gt;
&lt;p&gt;Extremely frustratingly, after two days of work I concluded that the assertion
logic itself was wrong. I have fixed that in the meantime too, the details
of that are in the bonus section at the end of the post.&lt;/p&gt;
&lt;h3 id="using-gdb-scripting-to-find-the-real-bug"&gt;Using GDB scripting to find the real bug&lt;/h3&gt;
&lt;p&gt;After that disaster I went back to the earlier rr recording without GC assertions
and tried to understand in more detail why the GC decided to free an object
that was still being referenced. To be able to do that I used the &lt;a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/Python-API.html"&gt;GDB Python
scripting
API&lt;/a&gt; to
write some helper commands to understand the state of the GC heap (rr is an
extension of GDB, so the GDB scripting API works in rr too).&lt;/p&gt;
&lt;p&gt;The first (small) helper command I wrote with the GDB scripting API was a way
to pretty-print the currently active GC flags of a random PyPy object, starting
just from the pointer. The more complex command I wrote was an object tracer,
which follows pointers to GC objects starting from a root object to explore the
object graph. The object tracer isn't complete, it doesn't deal with all the
complexities of PyPy's GC. But it was good enough to help me with my problem, I
found out that the corrupted object was stored in an array.&lt;/p&gt;
&lt;p&gt;As an example, here's a function that uses the GDB API to walk one of the
helper data structures of the GC, a stack of pointers:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;walk_addr_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;""" walk an instance of the AddressStack class (which is a linked list of&lt;/span&gt;
&lt;span class="sd"&gt;    arrays of 1019 pointers).&lt;/span&gt;

&lt;span class="sd"&gt;    the first of the arrays is only partially filled with used_in_last_chunk&lt;/span&gt;
&lt;span class="sd"&gt;    items, all the other chunks are full."""&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TYPE_CODE_PTR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dereference&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;used_in_last_chunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"used_in_last_chunk"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"inst_chunk"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dereference&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"items"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;used_in_last_chunk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"next"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dereference&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;used_in_last_chunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1019&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The full file of supporting code I wrote can be found in &lt;a href="https://gist.github.com/cfbolz/13cadcbbef321d93fc9790dff6f60a6a"&gt;this
gist&lt;/a&gt;. This is
pretty rough throw-away code, however.&lt;/p&gt;
&lt;p&gt;In the following recording I show a staged debugging session with some of the
extra commands I wrote with the Python API. The details aren't important, I
just wanted to give a bit of a flavor of what inspecting objects looks like:&lt;/p&gt;
&lt;script src="https://asciinema.org/a/648889.js" id="asciicast-648889" async="true"&gt;&lt;/script&gt;

&lt;p&gt;The next step was to understand why the array content wasn't being correctly
traced by the GC, which I eventually managed with some &lt;a href="https://www.fayewilliams.com/2011/07/13/gdb-conditional-breakpoints/"&gt;conditional
breakpoints&lt;/a&gt;,
more watchpoints, and using &lt;code&gt;reverse-continue&lt;/code&gt;. It turned out to be a bug that
occurs when the content of one array was memcopied into another array. The
technical details of why the array wasn't traced correctly are described in
detail in the next section.&lt;/p&gt;
&lt;h3 id="writing-a-unit-test"&gt;Writing a unit test&lt;/h3&gt;
&lt;p&gt;To try to make sure I really understood the bug correctly I then wrote a GC
unit test that shows the problem. Like most of PyPy, our GC is written in
RPython, a (somewhat strange) subset/dialect of Python2, which can be compiled
to C code. However, since it is also valid Python2 code, it can be &lt;a href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html"&gt;unit-tested
on top of a Python2
implementation&lt;/a&gt;
(which is one of the reasons why we keep maintaining PyPy2).&lt;/p&gt;
&lt;p&gt;In the GC unit tests you have a lot of control about what order things happen
in, e.g. how objects are allocated, when garbage collection phases happen, etc.
After some trying I managed to write a test that crashes with the same kind of
memory corruption that my original crash exhibited: an object that is still
reachable via an array is collected by the GC. To give you a flavor of what
this kind of test looks like, here's an (edited for clarity) version of the
test I eventually managed to write&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_incrementality_bug_arraycopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VAR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# first array&lt;/span&gt;
    &lt;span class="c1"&gt;# the stackroots list emulates the C stack&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stackroots&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VAR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# second array&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stackroots&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# unrelated object, will be collected&lt;/span&gt;
    &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="c1"&gt;# store reference into source array, calling the write barrier&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writearray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect_step&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stackroots&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# reload arrays, they might have moved&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stackroots&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# this GC step traces target&lt;/span&gt;
    &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect_step&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# emulate what a memcopy of arrays does&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writebarrier_before_copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# copy two elements of the arrays&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# now overwrite the reference to node in source&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writearray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lltype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;# this GC step traces source&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect_step&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# some more collection steps, crucially target isn't traced again&lt;/span&gt;
    &lt;span class="c1"&gt;# but node is deleted&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect_step&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# used to crash, node got collected&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One of the good properties of testing our GC that way is that all the memory is
emulated. The crash in the last line of the test isn't a segfault at all,
instead you get a nice exception saying that you tried to access a freed chunk
of memory and you can then debug this with a python2 debugger.&lt;/p&gt;
&lt;h3 id="fixing-the-bug"&gt;Fixing the Bug&lt;/h3&gt;
&lt;p&gt;With the unit test in hand, fixing the test was relatively straightforward (the
diff in its simplest form is anyway only a &lt;a href="https://github.com/pypy/pypy/commit/78bbeb93471b5f38438004e971f4b4f84ab17a84"&gt;single line
change&lt;/a&gt;).
After this first version of my fix, I
&lt;a href="https://github.com/pypy/pypy/issues/4925#issuecomment-2014459454"&gt;talked to Armin
Rigo&lt;/a&gt; who
helped me find different case that was still wrong, in the same area of the
code.&lt;/p&gt;
&lt;p&gt;I also got help by the developers at &lt;a href="https://portaone.com/"&gt;PortaOne&lt;/a&gt;
who are using PyPy on their servers and had seen some &lt;a href="https://github.com/pypy/pypy/issues/4900"&gt;mysterious PyPy
crashes&lt;/a&gt;
recently, that looked related to the GC. They did test deployments of my fixes
in their various stages to their servers to try to see whether stability
improved for them. Unfortunately in the end it turned out that their crashes
are an unrelated GC bug related to object pinning, which we haven't resolved
yet.&lt;/p&gt;
&lt;h3 id="writing-a-gc-fuzzerproperty-based-test"&gt;Writing a GC fuzzer/property based test&lt;/h3&gt;
&lt;p&gt;Finding bugs in the GC is always extremely disconcerting, particularly since
this one managed to hide for so long (more than ten years!). Therefore I wanted
to use these bugs as motivation to try to find more problems in PyPy's GC. Given
the ridiculous effectiveness of fuzzing, I used
&lt;a href="https://hypothesis.readthedocs.io/en/latest/"&gt;hypothesis&lt;/a&gt; to write a
property-based test. Every test performs a sequence of randomly chosen steps
from the following list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allocate an object&lt;/li&gt;
&lt;li&gt;read a random field from a random object&lt;/li&gt;
&lt;li&gt;write a random reference into a random object&lt;/li&gt;
&lt;li&gt;drop a random stack reference&lt;/li&gt;
&lt;li&gt;perform one GC step&lt;/li&gt;
&lt;li&gt;allocate an array&lt;/li&gt;
&lt;li&gt;read a random index from a random array&lt;/li&gt;
&lt;li&gt;write to an array&lt;/li&gt;
&lt;li&gt;memcopy between two arrays&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This approach of doing a sequence of steps is pretty close to the &lt;a href="https://hypothesis.readthedocs.io/en/latest/stateful.html"&gt;stateful
testing&lt;/a&gt; approach of
hypothesis, but I just implemented it manually with the &lt;a href="https://hypothesis.readthedocs.io/en/latest/data.html#drawing-interactively-in-tests"&gt;data
strategy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Every one of those steps is always performed on both the tested GC, and on some
regular Python objects. The Python objects provide the "ground truth" of what
the heap should look like, so we can compare the state of the GC objects
with the state of the Python objects to find out whether the GC made a mistake.&lt;/p&gt;
&lt;p&gt;In order to check whether the test is actually useful, I reverted my bug fixes
and made sure that the test re-finds both the spurious GC assertion error and the
problems with memcopying an array.&lt;/p&gt;
&lt;p&gt;In addition, the test also found corner cases in my fix. There was a situation
that I hadn't accounted for, which the test found after eventually.
I also plan on adding a bunch of other GC features as steps in the
test to stress them too (for example weakrefs, identity hashes, pinning, maybe
finalization).&lt;/p&gt;
&lt;p&gt;At the point of publishing this post, the fixes got merged to the 2.7/3.9/3.10
branches of PyPy, and will be part of the next release (v7.3.16).&lt;/p&gt;
&lt;h2 id="the-technical-details-of-the-bug"&gt;The technical details of the bug&lt;/h2&gt;
&lt;p&gt;In order to understand the technical details of the bug, I need to give some
background explanations about PyPy's GC.&lt;/p&gt;
&lt;h3 id="pypys-incremental-gc"&gt;PyPy's incremental GC&lt;/h3&gt;
&lt;p&gt;PyPy uses an incremental generational mark-sweep GC. It's
&lt;a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection#Generational_GC_(ephemeral_GC)"&gt;generational&lt;/a&gt;
and therefore has minor collections (where only young objects get collected)
and major collections (collecting long-lived objects eventually, using a
&lt;a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection#Na%C3%AFve_mark-and-sweep"&gt;mark-and-sweep&lt;/a&gt;
algorithm). Young objects are allocated in a nursery using a
bump-pointer allocator, which makes allocation quite efficient. They are moved
out of the nursery by minor collections. In order to find references from old
to young objects the GC uses a write barrier to detect writes into old objects.&lt;/p&gt;
&lt;p&gt;The GC is also
&lt;a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection#Stop-the-world_vs._incremental_vs._concurrent"&gt;incremental&lt;/a&gt;,
which means that its major collections aren't done all at once (which would
lead to long pauses). Instead, major collections are sliced up into small
steps, which are done directly after a minor collection (the GC isn't
&lt;em&gt;concurrent&lt;/em&gt; though, which would mean that the GC does work in a separate
thread).&lt;/p&gt;
&lt;p&gt;The incremental GC uses &lt;a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection#Tri-color_marking"&gt;tri-color
marking&lt;/a&gt;
to reason about the reachable part of the heap during the marking phase, where
every old object can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;black: already marked, reachable, definitely survives the collection&lt;/li&gt;
&lt;li&gt;grey: will survive, but still needs to be marked&lt;/li&gt;
&lt;li&gt;white: potentially dead&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The color of every object is encoded by setting flags
in the object header.&lt;/p&gt;
&lt;p&gt;The GC maintains the &lt;strong&gt;invariant&lt;/strong&gt; that black objects must never point to white
objects. At the start of a major collection cycle the stack roots are turned
gray. During the mark phase of a major collection cycle, the GC will trace gray
objects, until
none are left. To trace a gray object, all the objects it references have to be
marked grey if they are white so far. After a grey object is traced, it can be
marked black (because all the referenced objects are now either black or gray).
Eventually, there are no gray objects left. At that point (because no white
object can be reached from a black one) all the white objects are known to be
unreachable and can therefore be freed.&lt;/p&gt;
&lt;p&gt;The GC is incremental because every collection step will only trace a limited
number of gray objects, before giving control back to the program. This leads to
a problem: if an already traced (black) object is changed between two marking
steps of the GC, the program can mutate that object and write a new reference
into one of its fields. This could lead to an invariant violation, if the
referenced object is white. Therefore, the GC uses the write barrier (which it
needs anyway to find references from old to young objects) to mark all black
objects that are modified gray, and then trace them again at one of the
later collection steps.&lt;/p&gt;
&lt;h3 id="the-special-write-barrier-of-memcopy"&gt;The special write barrier of memcopy&lt;/h3&gt;
&lt;p&gt;Arrays use a different kind of write barrier than normal objects. Since they
can be arbitrarily large, tracing them can take a long time. Therefore it's
potentially wasteful to trace them fully at a minor collection. To fix this,
the array write barrier keeps more granular information about which parts of
the array have been modified since the last collection step. Then only the
modified parts of the array need to be traced, not the whole array.&lt;/p&gt;
&lt;p&gt;In addition, there is another optimization for arrays, which is that memcopy is
treated specially by the GC. If memcopy is implemented by simply writing a loop
that copies the content of one array to the other, that will invoke the write
barrier every single loop iteration for the write of every array element,
costing a lot of overhead. Here's some pseudo-code:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;arraycopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source_start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dest_start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;- write barrier inserted here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Therefore the GC has a special memcopy-specific
write barrier that will perform the GC logic once before the memcopy loop, and
then use a regular (typically SIMD-optimized) memcopy implementation from
&lt;code&gt;libc&lt;/code&gt;. Roughly like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;arraycopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;gc_writebarrier_before_array_copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;raw_memcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cast_to_voidp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;source_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;cast_to_voidp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dest_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemtype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(this is really a rough sketch. The &lt;a href="https://github.com/pypy/pypy/blob/789f964fff59c722b0872abcdc56d2b1373a9f3b/rpython/rlib/rgc.py#L365"&gt;real
code&lt;/a&gt;
is much more complicated.)&lt;/p&gt;
&lt;h3 id="the-bug"&gt;The bug&lt;/h3&gt;
&lt;p&gt;The bugs turned out to be precisely in this memcopy write barrier. When we
implemented the current GC, we adapted our previous GC, which was a
generational mark-sweep GC but &lt;em&gt;not&lt;/em&gt; incremental. We started with most of the
previous GC's code, including the write barriers. The regular write barriers
were adapted to the new incremental assumptions, in particular the need for the
write barrier to also turn black objects back to gray when they are modified
during a marking phase. This was simply not done at all for the memcopy write
barrier, at least in two of the code paths. Fixing this problem fixes the unit
tests and stops the crashes.&lt;/p&gt;
&lt;h2 id="reflections"&gt;Reflections&lt;/h2&gt;
&lt;p&gt;The way the bug was introduced is really typical. A piece of code (the memcopy
write barrier) was written under a set of assumptions. Then those assumptions
changed later. Not all the code pieces that relied on these assumptions to be
correct were updated. It's pretty hard to prevent this in all situations.&lt;/p&gt;
&lt;p&gt;I still think we could have done more to prevent the bug occurring. Writing a
property-based test for the GC would have been a good idea given the complexity
of the GC, and definitely something we did in other parts of our code at the
time (just using the &lt;code&gt;random&lt;/code&gt; module mostly, we started using hypothesis
later).&lt;/p&gt;
&lt;p&gt;It's a bit of a mystery to me why this bug managed to be undetected for so
long. Memcopy happens in a lot of pretty core operations of e.g. lists in
Python (&lt;code&gt;list.extend&lt;/code&gt;, to name just one example). To speculate, I would suspect
that all the other preconditions for the bug occurring made it pretty rare:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the content of an old list that is not yet marked needs to be copied into
  another old list that is marked already&lt;/li&gt;
&lt;li&gt;the source of the copy needs to also store an object that has no other
  references&lt;/li&gt;
&lt;li&gt;the source of the copy then needs to be overwritten with other data&lt;/li&gt;
&lt;li&gt;then the next collection steps need to be happening at the right points&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given the complexity of the GC logic I also wonder whether some lightweight
formal methods would have been a good idea. Formalizing some of the core
invariants in &lt;a href="https://en.wikipedia.org/wiki/B-Method"&gt;B&lt;/a&gt; or
&lt;a href="https://en.wikipedia.org/wiki/TLA%2B"&gt;TLA+&lt;/a&gt; and then &lt;a href="https://en.wikipedia.org/wiki/Model_checking"&gt;model
checking&lt;/a&gt; them up to some number
of
objects would have found this problem pretty quickly. There are also correctness
proofs for GC algorithms in some research papers, but I don't have a good
overview of the literature to point to any that are particularly good or bad.
Going such a more formal route might have fixed this and probably a whole bunch
of other bugs, but of course it's a pretty expensive (and tedious) approach.&lt;/p&gt;
&lt;p&gt;While it was super annoying to track this down, it was definitely good to learn
a bit more about how to use rr and the GDB scripting interface.&lt;/p&gt;
&lt;h2 id="bonus-section-the-wrong-assertion"&gt;Bonus Section: The Wrong Assertion&lt;/h2&gt;
&lt;p&gt;Some more technical information about the wrong assertion is in this section.&lt;/p&gt;
&lt;h3 id="background-pre-built-objects"&gt;Background: pre-built objects&lt;/h3&gt;
&lt;p&gt;PyPy's VM-building bootstrapping process can "freeze" a bunch of heap objects
into the final binary. This allows the VM to start up quickly, because those
frozen objects are loaded by the OS as part of the binary.&lt;/p&gt;
&lt;p&gt;Those frozen pre-built objects are parts of the 'roots' of the garbage
collector and need to be traced. However, tracing all the pre-built objects at
every collection would be very expensive, because there are a lot of them
(about 150,000 in a PyPy 3.10 binary). Tracing them all is also not necessary,
because most of them are never modified. Unmodified pre-built objects can only reference
other pre-built objects, which can never be deallocated anyway. Therefore we
have an optimization that uses the write barrier (which we need anyway to find
old-to-young pointers) to notice when a pre-built object gets modified for the
very first time. If that happens, it gets added to the set of pre-built objects
that gets counted as a root, and is traced as a root at collections
from then on.&lt;/p&gt;
&lt;h3 id="the-wrong-assertion"&gt;The wrong assertion&lt;/h3&gt;
&lt;p&gt;The assertion that triggered when I turned on the GC debug mode was saying that
the GC found a reference from a black to a white object, violating its
invariant. Unmodified pre-built objects count as black, and they aren't roots,
because they can only ever reference other pre-built objects. However, when a
pre-built object gets modified for the first time, it becomes part of the root
set and will be marked gray. This logic works fine.&lt;/p&gt;
&lt;p&gt;The wrong assertion triggers if a pre-built object is mutated for the very
first time in the middle of an incremental marking phase. While the pre-built
object gets added to the root set just fine, and will get traced before the
marking phase ends, this is encoded slightly differently for pre-built objects,
compared to "regular" old objects. Therefore, the invariant checking code
wrongly reported a black-&amp;gt;white pointer in this situation.&lt;/p&gt;
&lt;p&gt;To fix it I also wrote a unit test checking the problem, made sure that the GC
hypothesis test also found the bug, and then fixed the wrong assertion to take
the color encoding of pre-built objects into account.&lt;/p&gt;
&lt;p&gt;The bug managed to be invisible because we don't tend to turn on the GC
assertions very often. We only do that when we find a GC bug, which is of
course also when we need it the most to be correct.&lt;/p&gt;
&lt;h2 id="acknowledgements"&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;Thanks to Matti Picus, Max Bernstein, Wouter van Heyst for giving me feedback on drafts of the
post. Thanks to Armin Rigo for reviewing the code and pointing out holes in my
thinking. Thanks to the original reporters of the various forms of the bug,
including Lily Foote, David Hewitt, Wenzel Jakob.&lt;/p&gt;</description><guid>https://www.pypy.org/posts/2024/03/fixing-bug-incremental-gc.html</guid><pubDate>Tue, 26 Mar 2024 19:14:09 GMT</pubDate></item><item><title>RPython-based emulator speeds up RISC-V simulation over 15x</title><link>https://www.pypy.org/posts/2023/05/rpython-used-to-speed-up-risc-v-simulation-over-15x.html</link><dc:creator>Carl Friedrich Bolz-Tereick</dc:creator><description>&lt;p&gt;In cooperation with &lt;a class="reference external" href="https://riscv.org/"&gt;RISC-V International&lt;/a&gt;, who funded a part of this project,
we recently created a workflow to
use RPython to take a &lt;a class="reference external" href="https://github.com/riscv/sail-riscv#riscv-sail-model"&gt;Sail RISC-V&lt;/a&gt; model and automatically create a RISC-V ISA
emulator from it, which we call &lt;a class="reference external" href="https://docs.pydrofoil.org"&gt;Pydrofoil&lt;/a&gt;. The simulator sped up booting a
linux emulator from 35 minutes (using the standard Sail-generated emulator in
C) to 2 minutes, a speedup of 17.5x. More details about the process are in the
&lt;a class="reference external" href="https://riscv.org/blog/2023/05/how-to-speed-up-the-emulating-process-with-pydrofoil-carl-friedrich/"&gt;RISC-V blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A few take-aways from the project:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;While PyPy has shown it can speed up generic python code &lt;a class="reference external" href="https://speed.pypy.org"&gt;about 4x&lt;/a&gt;, the
technology behind PyPy can really shine in other areas.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RPython is malleable and can be molded to many tasks, the RPython meta-JIT is
very flexible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A JIT is well-suited for the problem of emulation, because it can
perform dynamic binary translation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyPy can solve real world performance problems, even somewhat unusual ones.
Please &lt;a class="reference external" href="https://www.pypy.org/pypy-sponsors.html"&gt;get in touch&lt;/a&gt; and let us know how we can help you solve yours!&lt;/p&gt;</description><category>casestudy</category><category>performance</category><guid>https://www.pypy.org/posts/2023/05/rpython-used-to-speed-up-risc-v-simulation-over-15x.html</guid><pubDate>Tue, 16 May 2023 11:22:35 GMT</pubDate></item><item><title>Repeated string concatenation is quadratic in PyPy (and CPython)</title><link>https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html</link><dc:creator>Carl Friedrich Bolz-Tereick</dc:creator><description>&lt;p&gt;This is a super brief blog post responding to an &lt;a class="reference external" href="https://foss.heptapod.net/pypy/pypy/-/issues/3885"&gt;issue&lt;/a&gt; that we got on the PyPy
issue tracker. I am moving my response to the blog (with permission of the
submitter) to have a post to point to, since it's a problem that comes up with
some regularity. It's also documented on our page of &lt;a class="reference external" href="https://doc.pypy.org/en/latest/cpython_differences.html?highlight=join#performance-differences"&gt;differences between PyPy
and CPython&lt;/a&gt; but I thought an additional blog post might be good.&lt;/p&gt;
&lt;p&gt;The issue pointed out that a small program that operates on strings is much
slower on PyPy compared to CPython. The program is a solution for 2016's
Advent of Code &lt;a class="reference external" href="https://adventofcode.com/2016/day/16"&gt;Day 16&lt;/a&gt; and looks like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-1" name="rest_code_c170003db8f24dbbbe95b21725032042-1" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dragon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-2" name="rest_code_c170003db8f24dbbbe95b21725032042-2" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-3" name="rest_code_c170003db8f24dbbbe95b21725032042-3" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-4" name="rest_code_c170003db8f24dbbbe95b21725032042-4" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-5" name="rest_code_c170003db8f24dbbbe95b21725032042-5" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;diffstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-6" name="rest_code_c170003db8f24dbbbe95b21725032042-6" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-7" name="rest_code_c170003db8f24dbbbe95b21725032042-7" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-8" name="rest_code_c170003db8f24dbbbe95b21725032042-8" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-8"&gt;&lt;/a&gt;        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-9" name="rest_code_c170003db8f24dbbbe95b21725032042-9" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-10" name="rest_code_c170003db8f24dbbbe95b21725032042-10" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-11" name="rest_code_c170003db8f24dbbbe95b21725032042-11" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;iterdiff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-12" name="rest_code_c170003db8f24dbbbe95b21725032042-12" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-13" name="rest_code_c170003db8f24dbbbe95b21725032042-13" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-14" name="rest_code_c170003db8f24dbbbe95b21725032042-14" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-14"&gt;&lt;/a&gt;        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;diffstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-15" name="rest_code_c170003db8f24dbbbe95b21725032042-15" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-16" name="rest_code_c170003db8f24dbbbe95b21725032042-16" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-16"&gt;&lt;/a&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-17" name="rest_code_c170003db8f24dbbbe95b21725032042-17" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-17"&gt;&lt;/a&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;35651584&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-18" name="rest_code_c170003db8f24dbbbe95b21725032042-18" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-18"&gt;&lt;/a&gt;&lt;span class="n"&gt;initstate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'10010000000110000'&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-19" name="rest_code_c170003db8f24dbbbe95b21725032042-19" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-19"&gt;&lt;/a&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initstate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-20" name="rest_code_c170003db8f24dbbbe95b21725032042-20" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;initstate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dragon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initstate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-21" name="rest_code_c170003db8f24dbbbe95b21725032042-21" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-21"&gt;&lt;/a&gt;&lt;span class="n"&gt;initstate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;initstate&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_c170003db8f24dbbbe95b21725032042-22" name="rest_code_c170003db8f24dbbbe95b21725032042-22" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_c170003db8f24dbbbe95b21725032042-22"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterdiff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initstate&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The submitter pointed out, that the program is fast on CPython (~8s on my
laptop) and slow (didn't finish) on PyPy.&lt;/p&gt;
&lt;p&gt;The reason for the performance difference is that &lt;code class="docutils literal"&gt;+=&lt;/code&gt; on strings in a loop
has quadratic complexity in PyPy, which is what &lt;code class="docutils literal"&gt;diffstr&lt;/code&gt; does. To see the
quadraticness, consider that to add a character at the end of the string, the
beginning of the string needs to be copied into a new chunk of memory. If the
loop runs &lt;code class="docutils literal"&gt;n&lt;/code&gt; times, that means there are&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;1 + 2 + 3 + ... + n = n * (n + 1) // 2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;character copies.&lt;/p&gt;
&lt;p&gt;Repeated string concatenations are in principle also quadratic in CPython, but
CPython has an &lt;a class="reference external" href="https://docs.python.org/2/whatsnew/2.4.html#optimizations"&gt;optimization&lt;/a&gt; that makes them sometimes not quadratic, which is
what makes this program not too slow in CPython.&lt;/p&gt;
&lt;p&gt;In order to fix the problem on PyPy it's best to use a list for the string
parts, which has the right amortized O(1) complexity for &lt;code class="docutils literal"&gt;.append&lt;/code&gt; calls, and
then use &lt;code class="docutils literal"&gt;str.join&lt;/code&gt; after the loop:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_df9e1a6b32cc4a0f8ad856e06423c75c-1" name="rest_code_df9e1a6b32cc4a0f8ad856e06423c75c-1" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_df9e1a6b32cc4a0f8ad856e06423c75c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;diffstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_df9e1a6b32cc4a0f8ad856e06423c75c-2" name="rest_code_df9e1a6b32cc4a0f8ad856e06423c75c-2" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_df9e1a6b32cc4a0f8ad856e06423c75c-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;a id="rest_code_df9e1a6b32cc4a0f8ad856e06423c75c-3" name="rest_code_df9e1a6b32cc4a0f8ad856e06423c75c-3" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_df9e1a6b32cc4a0f8ad856e06423c75c-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_df9e1a6b32cc4a0f8ad856e06423c75c-4" name="rest_code_df9e1a6b32cc4a0f8ad856e06423c75c-4" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_df9e1a6b32cc4a0f8ad856e06423c75c-4"&gt;&lt;/a&gt;        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;a id="rest_code_df9e1a6b32cc4a0f8ad856e06423c75c-5" name="rest_code_df9e1a6b32cc4a0f8ad856e06423c75c-5" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_df9e1a6b32cc4a0f8ad856e06423c75c-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this change the program becomes a little bit faster on CPython for me, and
on PyPy it stops being quadratic and runs in ~3.5s.&lt;/p&gt;
&lt;p&gt;In general, it's best not to rely on the presence of this optimization in
CPython either. Sometimes, a small innocent looking changes will break CPython's
optimization. E.g. this useless change makes CPython also take ages:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_7b13218b68b84ef1b8cd76ea9e86242f-1" name="rest_code_7b13218b68b84ef1b8cd76ea9e86242f-1" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_7b13218b68b84ef1b8cd76ea9e86242f-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;diffstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_7b13218b68b84ef1b8cd76ea9e86242f-2" name="rest_code_7b13218b68b84ef1b8cd76ea9e86242f-2" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_7b13218b68b84ef1b8cd76ea9e86242f-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;a id="rest_code_7b13218b68b84ef1b8cd76ea9e86242f-3" name="rest_code_7b13218b68b84ef1b8cd76ea9e86242f-3" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_7b13218b68b84ef1b8cd76ea9e86242f-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_7b13218b68b84ef1b8cd76ea9e86242f-4" name="rest_code_7b13218b68b84ef1b8cd76ea9e86242f-4" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_7b13218b68b84ef1b8cd76ea9e86242f-4"&gt;&lt;/a&gt;        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;a id="rest_code_7b13218b68b84ef1b8cd76ea9e86242f-5" name="rest_code_7b13218b68b84ef1b8cd76ea9e86242f-5" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_7b13218b68b84ef1b8cd76ea9e86242f-5"&gt;&lt;/a&gt;        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;a id="rest_code_7b13218b68b84ef1b8cd76ea9e86242f-6" name="rest_code_7b13218b68b84ef1b8cd76ea9e86242f-6" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_7b13218b68b84ef1b8cd76ea9e86242f-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason why this change breaks the optimization in CPython is that it only
triggers if the reference count of &lt;code class="docutils literal"&gt;b&lt;/code&gt; is 1, in which case it uses &lt;code class="docutils literal"&gt;realloc&lt;/code&gt;
on the string. The change is unrealistic of course, but you could imagine a
related that keeps an extra reference to &lt;code class="docutils literal"&gt;b&lt;/code&gt; for a sensible reason.&lt;/p&gt;
&lt;p&gt;Another situation in which the optimization doesn't work is discussed in this
&lt;a class="reference external" href="https://stackoverflow.com/a/44487738"&gt;StackOverflow question&lt;/a&gt; with an answer by Tim Peters.&lt;/p&gt;
&lt;p&gt;It's unlikely that PyPy will fix this. We had a prototype how to do it, but it
seems very little "production" code uses &lt;cite&gt;+=&lt;/cite&gt; on strings in a loop, and the fix
makes the strings implementation quite a bit more complex.&lt;/p&gt;
&lt;p&gt;So, in summary, don't use repeated concatenations in a loop!&lt;/p&gt;</description><category>performance</category><guid>https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html</guid><pubDate>Wed, 04 Jan 2023 09:00:00 GMT</pubDate></item><item><title>Finding JIT Optimizer Bugs using SMT Solvers and Fuzzing</title><link>https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html</link><dc:creator>Carl Friedrich Bolz-Tereick</dc:creator><description>&lt;p&gt;In this blog post I want to describe a recent bug finding technique that I've
added to the PyPy JIT testing infrastructure. This technique uses the Z3
theorem prover to find bugs in the optimizer of PyPy's JIT, in particular its
integer operation optimizations. The approach is
based on things I have learned from &lt;a class="reference external" href="https://www.cs.utah.edu/~regehr/"&gt;John Regehr's&lt;/a&gt; &lt;a class="reference external" href="https://blog.regehr.org/"&gt;blog&lt;/a&gt; (&lt;a class="reference external" href="https://blog.regehr.org/archives/1122"&gt;this post&lt;/a&gt; is a
good first one to read), &lt;a class="reference external" href="https://twitter.com/johnregehr/"&gt;Twitter&lt;/a&gt;, and on
his (et al) paper &lt;a class="reference external" href="https://www.cs.utah.edu/~regehr/alive2-pldi21.pdf"&gt;Alive2: Bounded Translation Validation for LLVM&lt;/a&gt;. The work
was triggered by a recent miscompilation bug my current bachelor student Nico
Rittinghaus found.&lt;/p&gt;
&lt;section id="background-python-integers-in-the-pypy-jit"&gt;
&lt;h2&gt;Background: Python Integers in the PyPy JIT&lt;/h2&gt;
&lt;p&gt;The optimizer of PyPy's JITs operates on traces, which are linear sequences of
instructions with guards. The instructions in the traces operate on different
machine-level data types, machine integers, doubles, pointers, bools, etc. In
this post we'll be mostly concerned with machine integers.&lt;/p&gt;
&lt;p&gt;To given some wider context I'll explain a bit how Python ints in the user code
relate to the types that are used in traces when the PyPy Python implementation
is used.
When PyPy turns a regular Python 3 function into a trace, there is a lot of work
happening in the JIT frontend to try to observe and infer the types that the
Python function concretely uses at runtime. The traces are generated under these
typing assumptions. Therefore, code that uses &lt;code class="docutils literal"&gt;ints&lt;/code&gt; in the Python code can
typically be translated into traces that operate on machine integers. In order
to make sure that the Python integer semantics are upheld, many of the
operations in the traces need to check that the integer results of some
operations still fit into a machine integer. If that is not the case (a rare
situation for most programs), the trace is left via a guard, execution falls
back to the interpreter, and there a big integer representation is chosen for
the too big value (the big integer representation is done via a pointer and
some storage on the heap).&lt;/p&gt;
&lt;p&gt;All of this machinery is not going to be too relevant for the rest of the
post. For the post it's important to know that trace instructions operate on
machine integers and other low-level types, and some of the operations can
optionally check whether the
results still fit into a machine integer. These trace operations are improved by
the optimizer, which tries to transform the trace into one that behaves the
same, but is less costly to execute.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="background-bounds-analysis-in-pypy-s-jit"&gt;
&lt;h2&gt;Background: Bounds Analysis in PyPy's JIT&lt;/h2&gt;
&lt;p&gt;The optimizer of PyPy's JIT has an analysis based on &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Abstract_interpretation"&gt;abstract interpretation&lt;/a&gt;
that tries to find out whether the integer values stored in a variable are
actually not using the full 64 bit (or 32 bit) range, but instead fit into some
smaller range. This means that for every integer variable &lt;code class="docutils literal"&gt;x&lt;/code&gt; in a trace, the
JIT compiler tracks upper and lower bounds of the runtime value of that
variable: a range &lt;code class="docutils literal"&gt;[a, b]&lt;/code&gt; such that for every concrete runtime value &lt;code class="docutils literal"&gt;v&lt;/code&gt;
that gets stored in variable &lt;code class="docutils literal"&gt;x&lt;/code&gt;, &lt;code class="docutils literal"&gt;a &amp;lt;= v &amp;lt;= b&lt;/code&gt; must be true.
&lt;code class="docutils literal"&gt;a&lt;/code&gt; and &lt;code class="docutils literal"&gt;b&lt;/code&gt; start out
as the most general &lt;code class="docutils literal"&gt;MININT&lt;/code&gt; and &lt;code class="docutils literal"&gt;MAXINT&lt;/code&gt;, but sometimes there is extra
information that makes it possible to improve these known bounds, and that is
often useful to optimize the code.&lt;/p&gt;
&lt;p&gt;A typical example is that the JIT knows that the length of a string is
non-negative, so for this kind of code: &lt;code class="docutils literal"&gt;x = len(s)&lt;/code&gt; where &lt;code class="docutils literal"&gt;s&lt;/code&gt; is a string,
&lt;code class="docutils literal"&gt;x&lt;/code&gt; gets a range &lt;code class="docutils literal"&gt;[0, MAXINT]&lt;/code&gt; assigned. With this information we could for
example remove a check &lt;code class="docutils literal"&gt;x + 10 &amp;lt; 0&lt;/code&gt; completely, because it can never be true.&lt;/p&gt;
&lt;p&gt;The bounds information is useful for optimization, but the analysis of the
bounds is also a source of bugs in the JIT, because the reasoning is often
subtle and easy to get wrong in corner cases. We already use a number of testing
techniques to try to make sure that it is correct. A simple one is
&lt;a class="reference external" href="https://hypothesis.works/articles/what-is-property-based-testing/"&gt;property-based testing&lt;/a&gt; using &lt;a class="reference external" href="https://github.com/HypothesisWorks/hypothesis"&gt;Hypothesis&lt;/a&gt; on the operations on bounds. Even
though Hypothesis is fantastic, it unfortunately does not catch
absolutely all the bugs even if we'd like it too, as we'll see in the next
section.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="motivation-a-jit-miscompilation"&gt;
&lt;h2&gt;Motivation: A JIT Miscompilation&lt;/h2&gt;
&lt;p&gt;I am currently supervising a Bachelor thesis by Nico Rittinghaus, who is
extending the integer analysis in the JIT. He'll probably write a separate blog
post about that soon. In the process of his work, the current bounds analysis
code got a lot of scrutiny, and we found out that one of the unit tests of the
bounds analysis was actually incorrect, and the example code in that unit test
was optimized incorrectly. This case of incorrect optimization is not a big deal
for regular Python code, because it involved a "wrapping integer addition
operation", i.e. one where overflowing results just wrap around to negative
values. All the additions and other arithmetic operations that the PyPy Python
frontend generates actually have
overflow checks (to be able to switch to a big integer representation if
needed).
However, it's still possible to trigger the problem with the
&lt;code class="docutils literal"&gt;__pypy__.intop.int_add&lt;/code&gt; API which is a function that exposes wraparound
arithmetic on Python ints.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://foss.heptapod.net/pypy/pypy/-/issues/3832"&gt;Here's the miscompilation&lt;/a&gt;. The JIT optimizes the following function:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_624f854e490e4367a5446bbc422fcfab-1" name="rest_code_624f854e490e4367a5446bbc422fcfab-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_624f854e490e4367a5446bbc422fcfab-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;__pypy__&lt;/span&gt;
&lt;a id="rest_code_624f854e490e4367a5446bbc422fcfab-2" name="rest_code_624f854e490e4367a5446bbc422fcfab-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_624f854e490e4367a5446bbc422fcfab-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_624f854e490e4367a5446bbc422fcfab-3" name="rest_code_624f854e490e4367a5446bbc422fcfab-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_624f854e490e4367a5446bbc422fcfab-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_624f854e490e4367a5446bbc422fcfab-4" name="rest_code_624f854e490e4367a5446bbc422fcfab-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_624f854e490e4367a5446bbc422fcfab-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__pypy__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_624f854e490e4367a5446bbc422fcfab-5" name="rest_code_624f854e490e4367a5446bbc422fcfab-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_624f854e490e4367a5446bbc422fcfab-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_624f854e490e4367a5446bbc422fcfab-6" name="rest_code_624f854e490e4367a5446bbc422fcfab-6" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_624f854e490e4367a5446bbc422fcfab-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_624f854e490e4367a5446bbc422fcfab-7" name="rest_code_624f854e490e4367a5446bbc422fcfab-7" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_624f854e490e4367a5446bbc422fcfab-7"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a id="rest_code_624f854e490e4367a5446bbc422fcfab-8" name="rest_code_624f854e490e4367a5446bbc422fcfab-8" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_624f854e490e4367a5446bbc422fcfab-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a id="rest_code_624f854e490e4367a5446bbc422fcfab-9" name="rest_code_624f854e490e4367a5446bbc422fcfab-9" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_624f854e490e4367a5446bbc422fcfab-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Into the following code:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_85ad103b2e314f549801bab35002f2d7-1" name="rest_code_85ad103b2e314f549801bab35002f2d7-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_85ad103b2e314f549801bab35002f2d7-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;__pypy__&lt;/span&gt;
&lt;a id="rest_code_85ad103b2e314f549801bab35002f2d7-2" name="rest_code_85ad103b2e314f549801bab35002f2d7-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_85ad103b2e314f549801bab35002f2d7-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_85ad103b2e314f549801bab35002f2d7-3" name="rest_code_85ad103b2e314f549801bab35002f2d7-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_85ad103b2e314f549801bab35002f2d7-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_85ad103b2e314f549801bab35002f2d7-4" name="rest_code_85ad103b2e314f549801bab35002f2d7-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_85ad103b2e314f549801bab35002f2d7-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__pypy__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_85ad103b2e314f549801bab35002f2d7-5" name="rest_code_85ad103b2e314f549801bab35002f2d7-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_85ad103b2e314f549801bab35002f2d7-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_85ad103b2e314f549801bab35002f2d7-6" name="rest_code_85ad103b2e314f549801bab35002f2d7-6" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_85ad103b2e314f549801bab35002f2d7-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a id="rest_code_85ad103b2e314f549801bab35002f2d7-7" name="rest_code_85ad103b2e314f549801bab35002f2d7-7" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_85ad103b2e314f549801bab35002f2d7-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically the faulty reasoning of the JIT looks like this: if &lt;code class="docutils literal"&gt;int_add(x, 10) &amp;lt; 15&lt;/code&gt;
then it must follow that &lt;code class="docutils literal"&gt;x &amp;lt; 5&lt;/code&gt;, which is stronger than &lt;code class="docutils literal"&gt;x &amp;lt; 6&lt;/code&gt;, so the
second &lt;code class="docutils literal"&gt;if&lt;/code&gt; is always true. This sounds good, but is actually wrong
if the addition &lt;code class="docutils literal"&gt;+ 10&lt;/code&gt; wrapped around. So if &lt;code class="docutils literal"&gt;x == MAXINT&lt;/code&gt;, then
&lt;code class="docutils literal"&gt;int_add(x, 10) == MININT + 9 &amp;lt; 15&lt;/code&gt;. But &lt;code class="docutils literal"&gt;MAXINT &amp;lt; 5&lt;/code&gt; is not
correct.&lt;/p&gt;
&lt;p&gt;Note how the same reasoning with overflow-checking addition is correct! If &lt;code class="docutils literal"&gt;x +
10 &amp;lt; 15&lt;/code&gt; and the &lt;code class="docutils literal"&gt;+&lt;/code&gt; didn't overflow, then indeed &lt;code class="docutils literal"&gt;x &amp;lt; 6&lt;/code&gt;. And if your
mind bends starting to think about all this, you understand some of the
difficulty of getting the JIT correct in this area.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how-could-we-have-avoided-this-bug"&gt;
&lt;h2&gt;How could we have avoided this bug?&lt;/h2&gt;
&lt;p&gt;One &lt;a class="reference external" href="https://twitter.com/cfbolz/status/1482649144099586051"&gt;exercise I try to do after finding bugs&lt;/a&gt; is to reflect on ways that the
bug could have been avoided. I think this is particularly important in the JIT,
where bugs are potentially really annoying to find and can cause very strange
behaviour in basically arbitrary Python code.&lt;/p&gt;
&lt;p&gt;It's easy to always answer this question with "try to think more carefully
when working", but that approach cannot be relied on in complicated situations,
because humans don't concentrate perfectly for long stretches of time.&lt;/p&gt;
&lt;p&gt;A situation-specific problem I identified was the bad design of the range analysis API.
A range is not just represented by two numbers, instead it's two numbers
and two bools that are supposed to represent that some operation did or did not
underflow/overflow. The meaning of these bools was quite hard to grasp and easy
to get wrong, so probably they should never have been introduced in the first
place (and my bugfix indeed removed them).&lt;/p&gt;
&lt;p&gt;But in the rest of this blog post I want to talk about another, systematic
approach that can be applied to the problem of mis-optimizations of integer
operations, and that is done by applying an SMT solver to the problem.&lt;/p&gt;
&lt;p&gt;An SMT solver (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Satisfiability_modulo_theories"&gt;Satisfyability Modulo Theories&lt;/a&gt;) is a tool that can be used to
find out whether mathematical formulas are "satisfiable", i.e. whether
some chosen set of inputs exists that will make the formulas evaluate to true. SMT solvers are
commonly used in a wide range of CS applications including program correctness
proofs, program synthesis, etc. The most widely known one is probably &lt;a class="reference external" href="https://github.com/Z3Prover"&gt;Z3&lt;/a&gt; by
Microsoft Research which has the nice advantage of coming with an easy-to-use
Python binding.&lt;/p&gt;
&lt;p&gt;Going into this I basically knew next to nothing about SMT solvers (despite
having been embedded in a formal methods research group for years!) so it was an
interesting new world to learn about.&lt;/p&gt;
&lt;p&gt;As briefly mentioned in the introduction, the approach I took followed a similar
(but &lt;em&gt;much&lt;/em&gt; more properly executed) one applied to LLVM operations, called
&lt;a class="reference external" href="https://github.com/AliveToolkit/alive2/"&gt;Alive2&lt;/a&gt;. Krister Waldfridsson has done &lt;a class="reference external" href="https://kristerw.github.io/2022/09/13/translation-validation/"&gt;similar work for GCC recently&lt;/a&gt;,
described on his blog.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="z3-proof-of-concept"&gt;
&lt;h2&gt;Z3 Proof of Concept&lt;/h2&gt;
&lt;p&gt;The first thing I did was to try to get Z3 find the above bug, by encoding the
input program into an SMT formula by hand and trying to get Z3 to prove the condition
that the JIT thinks is always true. The Z3 code for this looks as follows:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_9b5b113b0f734e43bd9b890fddac1400-1" name="rest_code_9b5b113b0f734e43bd9b890fddac1400-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_9b5b113b0f734e43bd9b890fddac1400-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;z3&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BitVec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Implies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prove&lt;/span&gt;
&lt;a id="rest_code_9b5b113b0f734e43bd9b890fddac1400-2" name="rest_code_9b5b113b0f734e43bd9b890fddac1400-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_9b5b113b0f734e43bd9b890fddac1400-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BitVec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_9b5b113b0f734e43bd9b890fddac1400-3" name="rest_code_9b5b113b0f734e43bd9b890fddac1400-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_9b5b113b0f734e43bd9b890fddac1400-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;a id="rest_code_9b5b113b0f734e43bd9b890fddac1400-4" name="rest_code_9b5b113b0f734e43bd9b890fddac1400-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_9b5b113b0f734e43bd9b890fddac1400-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;cond1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;a id="rest_code_9b5b113b0f734e43bd9b890fddac1400-5" name="rest_code_9b5b113b0f734e43bd9b890fddac1400-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_9b5b113b0f734e43bd9b890fddac1400-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;cond2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;a id="rest_code_9b5b113b0f734e43bd9b890fddac1400-6" name="rest_code_9b5b113b0f734e43bd9b890fddac1400-6" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_9b5b113b0f734e43bd9b890fddac1400-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;prove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Implies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cond1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cond2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code class="docutils literal"&gt;x&lt;/code&gt; is defined to be a bit vector variable of width 64, which is a
datatype that can be used to represent bounded machine integers. Addition on
bit vectors performs wraparound arithmetic, like the &lt;code class="docutils literal"&gt;__pypy__.intop.int_add&lt;/code&gt;
call in the original code. The JIT optimized the second condition away, so
essentially it was convinced that the first condition implies the second one.
The above snippet tries to get Z3 to confirm this.&lt;/p&gt;
&lt;p&gt;When run, the above program prints:&lt;/p&gt;
&lt;pre class="literal-block"&gt;counterexample
[x = 9223372036854775803]&lt;/pre&gt;
&lt;p&gt;Which shows the bug. As a small side-note, I thought it was cool that the
process of "proving" something in Z3 basically means trying to find an example
for the negation of the formula. If no counterexample can be found for the
negation, the original formula is true. If the original formula turns out to be
false (like here) we get a nice example that shows the problem to go with it.&lt;/p&gt;
&lt;p&gt;It's not realistic to hand-translate all the hundreds of
unit-tests into Z3 formulas and then ask Z3 to prove the optimizations. Instead,
we want to have a program that does this for us.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="smt-checking-of-the-jit-optimizer"&gt;
&lt;h2&gt;SMT Checking of the JIT Optimizer&lt;/h2&gt;
&lt;p&gt;What we want from this program is the following: given an unoptimized trace and
its optimized version, we want to use Z3 to check whether the optimized trace
behaves identically to the unoptimized one. One question is what "behaves
identically" means. What we care about is the outputs of the trace being the
same values, no matter how they are computed. Also, for every guard we want to
make sure that it fails in identical ways in the optimized and unoptimized
versions. A guard is only allowed to be optimized away if it can never fail.
The code that comes after a guard can assume that the guard has not failed,
because otherwise execution would have left the trace. All of this should be
true regardless for the values of the input variables of the trace.&lt;/p&gt;
&lt;p&gt;So in order to check that the two traces are behaving identically, we do the
following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;We create Z3 variables for every input variable. We use the same input
variables both for the unoptimized as well as the optimized trace.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We align the two traces at the corresponding guards. Thankfully the optimizer
keeps track of which optimized guard corresponds to which unoptimized input
guard.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All the operations before a guard are translated into Z3 formulas, for both
versions of the trace.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For two corresponding guards, we ask Z3 to prove that the guard conditions are
identical.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For a guard that was optimized away we ask Z3 to prove that the condition is
always true.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After a guard, we tell Z3 that from now on it can assume that the guard
condition is true.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We repeat this, guard for guard, until we reach the end of the trace. There,
we ask Z3 to prove that the output variables in the unoptimized trace and the
optimized trace are identical (every trace can return one or many values).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I implemented this, it's &lt;a class="reference external" href="https://foss.heptapod.net/pypy/pypy/-/blob/branch/default/rpython/jit/metainterp/optimizeopt/test/test_z3checktests.py"&gt;not a lot of code&lt;/a&gt;, basically a couple of hundred lines
of (somewhat hacky) Python code. So far I only support integer
operations. Here are some parts of the code to give you a flavor of what this
looks like.&lt;/p&gt;
&lt;p&gt;This is the code that translates operations into Z3 formulas:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-1" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_solver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-2" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-3" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-3"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;'v'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# is it an operation with a result&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-4" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-4"&gt;&lt;/a&gt;            &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newvar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-5" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-5"&gt;&lt;/a&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# or does it return void&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-6" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-6" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-6"&gt;&lt;/a&gt;            &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-7" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-7" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-8" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-8" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-8"&gt;&lt;/a&gt;       &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-9" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-9" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-10" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-10" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-10"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# convert arguments&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-11" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-11" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-11"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numargs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-12" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-12" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-12"&gt;&lt;/a&gt;            &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convertarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-13" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-13" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-13"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numargs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-14" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-14" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-14"&gt;&lt;/a&gt;            &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convertarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-15" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-15" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-15"&gt;&lt;/a&gt;            &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convertarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-16" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-16" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-16"&gt;&lt;/a&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-17" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-17" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-17"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# compute results&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-18" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-18" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-18"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_add"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-19" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-19" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-19"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-20" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-20" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-20"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_sub"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-21" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-21" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-21"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-22" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-22" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-22"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_mul"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-23" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-23" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-23"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-24" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-24" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-24"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_and"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-25" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-25" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-25"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-26" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-26" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-26"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_or"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-27" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-27" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-27"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-28" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-28" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-28"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_xor"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-29" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-29" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-29"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-30" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-30" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-30"&gt;&lt;/a&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-31" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-31" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-31"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ...  more operations, some shown below&lt;/span&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-32" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-32" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-32"&gt;&lt;/a&gt;
&lt;a id="rest_code_3b3ae8b967b943caaffe9781dfa5d298-33" name="rest_code_3b3ae8b967b943caaffe9781dfa5d298-33" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_3b3ae8b967b943caaffe9781dfa5d298-33"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;New Z3 variables are defined by the helper function &lt;code class="docutils literal"&gt;newvar&lt;/code&gt;, which adds the
operation to a dictionary &lt;code class="docutils literal"&gt;box_to_z3&lt;/code&gt; mapping boxes (=variables) to Z3
variables. Due to the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Static_single-assignment_form"&gt;SSA&lt;/a&gt; property that traces have, a variable must be defined
before its first use.&lt;/p&gt;
&lt;p&gt;Here's what &lt;code class="docutils literal"&gt;newvar&lt;/code&gt; looks like (&lt;code class="docutils literal"&gt;LONG_BIT&lt;/code&gt; is a constant that is either
&lt;code class="docutils literal"&gt;64&lt;/code&gt; or &lt;code class="docutils literal"&gt;32&lt;/code&gt;, depending on the target architecture):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_b07ef9de6d0b4628b7890e7d185e7638-1" name="rest_code_b07ef9de6d0b4628b7890e7d185e7638-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_b07ef9de6d0b4628b7890e7d185e7638-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;newvar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_b07ef9de6d0b4628b7890e7d185e7638-2" name="rest_code_b07ef9de6d0b4628b7890e7d185e7638-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_b07ef9de6d0b4628b7890e7d185e7638-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ... some logic around making the string representation&lt;/span&gt;
&lt;a id="rest_code_b07ef9de6d0b4628b7890e7d185e7638-3" name="rest_code_b07ef9de6d0b4628b7890e7d185e7638-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_b07ef9de6d0b4628b7890e7d185e7638-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# somewhat nicer omitted&lt;/span&gt;
&lt;a id="rest_code_b07ef9de6d0b4628b7890e7d185e7638-4" name="rest_code_b07ef9de6d0b4628b7890e7d185e7638-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_b07ef9de6d0b4628b7890e7d185e7638-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BitVec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LONG_BIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b07ef9de6d0b4628b7890e7d185e7638-5" name="rest_code_b07ef9de6d0b4628b7890e7d185e7638-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_b07ef9de6d0b4628b7890e7d185e7638-5"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box_to_z3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;a id="rest_code_b07ef9de6d0b4628b7890e7d185e7638-6" name="rest_code_b07ef9de6d0b4628b7890e7d185e7638-6" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_b07ef9de6d0b4628b7890e7d185e7638-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;convert&lt;/code&gt; method turns an operation argument (either a constant or a
variable) into a Z3 formula (either a constant bit vector or an already defined
Z3 variable). &lt;code class="docutils literal"&gt;convertarg&lt;/code&gt; is a helper function that takes an operation, reads
its nth argument and converts it.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_37152c2e2e3644358b0d3e061b80ae34-1" name="rest_code_37152c2e2e3644358b0d3e061b80ae34-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_37152c2e2e3644358b0d3e061b80ae34-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_37152c2e2e3644358b0d3e061b80ae34-2" name="rest_code_37152c2e2e3644358b0d3e061b80ae34-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_37152c2e2e3644358b0d3e061b80ae34-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ConstInt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_37152c2e2e3644358b0d3e061b80ae34-3" name="rest_code_37152c2e2e3644358b0d3e061b80ae34-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_37152c2e2e3644358b0d3e061b80ae34-3"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BitVecVal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getint&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;LONG_BIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_37152c2e2e3644358b0d3e061b80ae34-4" name="rest_code_37152c2e2e3644358b0d3e061b80ae34-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_37152c2e2e3644358b0d3e061b80ae34-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box_to_z3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_37152c2e2e3644358b0d3e061b80ae34-5" name="rest_code_37152c2e2e3644358b0d3e061b80ae34-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_37152c2e2e3644358b0d3e061b80ae34-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_37152c2e2e3644358b0d3e061b80ae34-6" name="rest_code_37152c2e2e3644358b0d3e061b80ae34-6" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_37152c2e2e3644358b0d3e061b80ae34-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convertarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_37152c2e2e3644358b0d3e061b80ae34-7" name="rest_code_37152c2e2e3644358b0d3e061b80ae34-7" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_37152c2e2e3644358b0d3e061b80ae34-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The lookup of variables in &lt;code class="docutils literal"&gt;box_to_z3&lt;/code&gt; that &lt;code class="docutils literal"&gt;convert&lt;/code&gt; does cannot fail,
because the variable must have been defined before use.&lt;/p&gt;
&lt;p&gt;Comparisons return the bit vector 0 or bit vector 1, we use a helper function
&lt;code class="docutils literal"&gt;cond&lt;/code&gt; to turn the Z3 truth value of the comparison into a bit vector:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-1" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z3expr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-2" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z3expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TRUEBV&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FALSEBV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-3" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-4" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-5" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_solver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-6" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-6" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-6"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ... start as above&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-7" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-7" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-8" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-8" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-8"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# more cases&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-9" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-9" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_eq"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-10" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-10" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-10"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-11" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-11" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-11"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_ne"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-12" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-12" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-12"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-13" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-13" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-13"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_lt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-14" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-14" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-14"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-15" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-15" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-15"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_le"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-16" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-16" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-16"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-17" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-17" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-17"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_gt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-18" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-18" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-18"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-19" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-19" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-19"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_ge"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-20" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-20" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-20"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-21" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-21" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-21"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_is_true"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-22" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-22" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-22"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;FALSEBV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-23" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-23" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-23"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"uint_lt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-24" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-24" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-24"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ULT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-25" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-25" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-25"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"uint_le"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-26" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-26" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-26"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-27" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-27" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-27"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"uint_gt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-28" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-28" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-28"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UGT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-29" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-29" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-29"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"uint_ge"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-30" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-30" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-30"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UGE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-31" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-31" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-31"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_is_zero"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-32" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-32" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-32"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;FALSEBV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-33" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-33" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-33"&gt;&lt;/a&gt;
&lt;a id="rest_code_89659c3864984b52a4f7cb8982a9fed4-34" name="rest_code_89659c3864984b52a4f7cb8982a9fed4-34" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_89659c3864984b52a4f7cb8982a9fed4-34"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ... rest as above&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So basically for every trace operation that operates on integers I had to give a
translation into Z3 formulas, which is mostly straightforward.&lt;/p&gt;
&lt;p&gt;Guard operations get converted into a Z3 boolean by their own helper function,
which looks like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_0ce7f1ff6b5c44839d42d661352e808e-1" name="rest_code_0ce7f1ff6b5c44839d42d661352e808e-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_0ce7f1ff6b5c44839d42d661352e808e-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;guard_to_condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_0ce7f1ff6b5c44839d42d661352e808e-2" name="rest_code_0ce7f1ff6b5c44839d42d661352e808e-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_0ce7f1ff6b5c44839d42d661352e808e-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getopname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_0ce7f1ff6b5c44839d42d661352e808e-3" name="rest_code_0ce7f1ff6b5c44839d42d661352e808e-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_0ce7f1ff6b5c44839d42d661352e808e-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"guard_true"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_0ce7f1ff6b5c44839d42d661352e808e-4" name="rest_code_0ce7f1ff6b5c44839d42d661352e808e-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_0ce7f1ff6b5c44839d42d661352e808e-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convertarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;TRUEBV&lt;/span&gt;
&lt;a id="rest_code_0ce7f1ff6b5c44839d42d661352e808e-5" name="rest_code_0ce7f1ff6b5c44839d42d661352e808e-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_0ce7f1ff6b5c44839d42d661352e808e-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"guard_false"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_0ce7f1ff6b5c44839d42d661352e808e-6" name="rest_code_0ce7f1ff6b5c44839d42d661352e808e-6" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_0ce7f1ff6b5c44839d42d661352e808e-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convertarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;FALSEBV&lt;/span&gt;
&lt;a id="rest_code_0ce7f1ff6b5c44839d42d661352e808e-7" name="rest_code_0ce7f1ff6b5c44839d42d661352e808e-7" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_0ce7f1ff6b5c44839d42d661352e808e-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"guard_value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_0ce7f1ff6b5c44839d42d661352e808e-8" name="rest_code_0ce7f1ff6b5c44839d42d661352e808e-8" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_0ce7f1ff6b5c44839d42d661352e808e-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convertarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convertarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_0ce7f1ff6b5c44839d42d661352e808e-9" name="rest_code_0ce7f1ff6b5c44839d42d661352e808e-9" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_0ce7f1ff6b5c44839d42d661352e808e-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_0ce7f1ff6b5c44839d42d661352e808e-10" name="rest_code_0ce7f1ff6b5c44839d42d661352e808e-10" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_0ce7f1ff6b5c44839d42d661352e808e-10"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ... some more exist, shown below&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some operations are a bit trickier. An important example in the context of
this blog post are integer operations that check for overflow. The overflow
operations return a result, but also a boolean whether the operation overflowed
or not.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-1" name="rest_code_61111b0c7307431ba148ef0074d18328-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_solver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-2" name="rest_code_61111b0c7307431ba148ef0074d18328-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-3" name="rest_code_61111b0c7307431ba148ef0074d18328-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-3"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ... more cases&lt;/span&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-4" name="rest_code_61111b0c7307431ba148ef0074d18328-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-5" name="rest_code_61111b0c7307431ba148ef0074d18328-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-5"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_add_ovf"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-6" name="rest_code_61111b0c7307431ba148ef0074d18328-6" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-6"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-7" name="rest_code_61111b0c7307431ba148ef0074d18328-7" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-7"&gt;&lt;/a&gt;            &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SignExt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LONG_BIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SignExt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LONG_BIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-8" name="rest_code_61111b0c7307431ba148ef0074d18328-8" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-8"&gt;&lt;/a&gt;            &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;no_ovf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SignExt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LONG_BIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-9" name="rest_code_61111b0c7307431ba148ef0074d18328-9" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_sub_ovf"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-10" name="rest_code_61111b0c7307431ba148ef0074d18328-10" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-10"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-11" name="rest_code_61111b0c7307431ba148ef0074d18328-11" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-11"&gt;&lt;/a&gt;            &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SignExt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LONG_BIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SignExt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LONG_BIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-12" name="rest_code_61111b0c7307431ba148ef0074d18328-12" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-12"&gt;&lt;/a&gt;            &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;no_ovf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SignExt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LONG_BIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-13" name="rest_code_61111b0c7307431ba148ef0074d18328-13" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-13"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"int_mul_ovf"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-14" name="rest_code_61111b0c7307431ba148ef0074d18328-14" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-14"&gt;&lt;/a&gt;            &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-15" name="rest_code_61111b0c7307431ba148ef0074d18328-15" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-15"&gt;&lt;/a&gt;            &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SignExt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LONG_BIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SignExt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LONG_BIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-16" name="rest_code_61111b0c7307431ba148ef0074d18328-16" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-16"&gt;&lt;/a&gt;            &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;no_ovf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SignExt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LONG_BIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-17" name="rest_code_61111b0c7307431ba148ef0074d18328-17" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-17"&gt;&lt;/a&gt;
&lt;a id="rest_code_61111b0c7307431ba148ef0074d18328-18" name="rest_code_61111b0c7307431ba148ef0074d18328-18" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_61111b0c7307431ba148ef0074d18328-18"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The boolean is computed by comparing the result of the bit vector operation with
the result of converting the input bit vectors into an abstract (arbitrary
precision) integer and the result back to bit vectors. Let's go through the
addition case step by step, the other cases work analogously.&lt;/p&gt;
&lt;p&gt;The addition in the first &lt;code class="docutils literal"&gt;elif&lt;/code&gt; that computes &lt;code class="docutils literal"&gt;expr&lt;/code&gt; is an addition on bit
vectors, therefore it is performing wraparound arithmetic.
&lt;code class="docutils literal"&gt;z3.SignExt(LONG_BIT, arg0)&lt;/code&gt; sign-extends &lt;code class="docutils literal"&gt;arg0&lt;/code&gt; from a bit vector of
&lt;code class="docutils literal"&gt;LONG_BIT&lt;/code&gt; bits to an abstract, arbitrary precision integer. The addition in
the second line is therefore an addition between abstract integers, so it will
never overflow and just compute the correct result as an integer.&lt;/p&gt;
&lt;p&gt;The condition to check for overflow is now: if the results of the two different
ways to do the addition are the same, then overflow did not occur. So in order
to compute &lt;code class="docutils literal"&gt;state.no_ovf&lt;/code&gt; in the addition case the
code converts the result of the bit vector wraparound addition to
an abstract integer (using &lt;code class="docutils literal"&gt;SignExt&lt;/code&gt; again), and then compares that to the integer
result.&lt;/p&gt;
&lt;p&gt;This boolean can then be checked by the guard operations &lt;code class="docutils literal"&gt;guard_no_overflow&lt;/code&gt;
and &lt;code class="docutils literal"&gt;guard_overflow&lt;/code&gt;.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_4cb8b43f209747a7a35c9b09132f5823-1" name="rest_code_4cb8b43f209747a7a35c9b09132f5823-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_4cb8b43f209747a7a35c9b09132f5823-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;guard_to_condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_4cb8b43f209747a7a35c9b09132f5823-2" name="rest_code_4cb8b43f209747a7a35c9b09132f5823-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_4cb8b43f209747a7a35c9b09132f5823-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_4cb8b43f209747a7a35c9b09132f5823-3" name="rest_code_4cb8b43f209747a7a35c9b09132f5823-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_4cb8b43f209747a7a35c9b09132f5823-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ... more cases&lt;/span&gt;
&lt;a id="rest_code_4cb8b43f209747a7a35c9b09132f5823-4" name="rest_code_4cb8b43f209747a7a35c9b09132f5823-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_4cb8b43f209747a7a35c9b09132f5823-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_4cb8b43f209747a7a35c9b09132f5823-5" name="rest_code_4cb8b43f209747a7a35c9b09132f5823-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_4cb8b43f209747a7a35c9b09132f5823-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"guard_no_overflow"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_4cb8b43f209747a7a35c9b09132f5823-6" name="rest_code_4cb8b43f209747a7a35c9b09132f5823-6" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_4cb8b43f209747a7a35c9b09132f5823-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;no_ovf&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a id="rest_code_4cb8b43f209747a7a35c9b09132f5823-7" name="rest_code_4cb8b43f209747a7a35c9b09132f5823-7" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_4cb8b43f209747a7a35c9b09132f5823-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;no_ovf&lt;/span&gt;
&lt;a id="rest_code_4cb8b43f209747a7a35c9b09132f5823-8" name="rest_code_4cb8b43f209747a7a35c9b09132f5823-8" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_4cb8b43f209747a7a35c9b09132f5823-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"guard_overflow"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_4cb8b43f209747a7a35c9b09132f5823-9" name="rest_code_4cb8b43f209747a7a35c9b09132f5823-9" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_4cb8b43f209747a7a35c9b09132f5823-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;no_ovf&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a id="rest_code_4cb8b43f209747a7a35c9b09132f5823-10" name="rest_code_4cb8b43f209747a7a35c9b09132f5823-10" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_4cb8b43f209747a7a35c9b09132f5823-10"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;no_ovf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_4cb8b43f209747a7a35c9b09132f5823-11" name="rest_code_4cb8b43f209747a7a35c9b09132f5823-11" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_4cb8b43f209747a7a35c9b09132f5823-11"&gt;&lt;/a&gt;
&lt;a id="rest_code_4cb8b43f209747a7a35c9b09132f5823-12" name="rest_code_4cb8b43f209747a7a35c9b09132f5823-12" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_4cb8b43f209747a7a35c9b09132f5823-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ... more cases&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="finding-the-bug-again"&gt;
&lt;h2&gt;Finding the Bug, Again&lt;/h2&gt;
&lt;p&gt;Let's actually make all of this more concrete by applying it to the trace of our
original bug. The input trace and the incorrectly optimized trace for that look
like this (differences highlighted):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-1" name="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# input                       # optimized&lt;/span&gt;
&lt;a id="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-2" name="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-3" name="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;i1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;int_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="n"&gt;i1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;int_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-4" name="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;i2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;int_lt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="n"&gt;i2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;int_lt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-5" name="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;guard_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="n"&gt;guard_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-6" name="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-6" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-6"&gt;&lt;/a&gt;&lt;span class="hll"&gt;&lt;span class="n"&gt;i3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;int_lt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="n"&gt;jump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-7" name="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-7" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-7"&gt;&lt;/a&gt;&lt;span class="hll"&gt;&lt;span class="n"&gt;guard_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-8" name="rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-8" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_84a312f64bdb4ad38b4a8473c1cc2efa-8"&gt;&lt;/a&gt;&lt;span class="hll"&gt;&lt;span class="n"&gt;jump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the trace represents just one of the paths through the control flow
graph of the original function, which is typical for tracing JITs (the other
paths could incrementally get added later).&lt;/p&gt;
&lt;p&gt;The first guards in both these traces correspond to each other, so the first
chunks to check are the first three operations (lines 1-4). Those operations
don't get changed by the optimizer at all.&lt;/p&gt;
&lt;p&gt;These two identical traces get translated to the following Z3 formulas:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_5576b2f9772747189ccddd6cf0633b26-1" name="rest_code_5576b2f9772747189ccddd6cf0633b26-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_5576b2f9772747189ccddd6cf0633b26-1"&gt;&lt;/a&gt;i1unoptimized == input_i0 + 10
&lt;a id="rest_code_5576b2f9772747189ccddd6cf0633b26-2" name="rest_code_5576b2f9772747189ccddd6cf0633b26-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_5576b2f9772747189ccddd6cf0633b26-2"&gt;&lt;/a&gt;i2unoptimized == If(i1unoptimized &amp;lt; 15, 1, 0)
&lt;a id="rest_code_5576b2f9772747189ccddd6cf0633b26-3" name="rest_code_5576b2f9772747189ccddd6cf0633b26-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_5576b2f9772747189ccddd6cf0633b26-3"&gt;&lt;/a&gt;i1optimized == input_i0 + 10
&lt;a id="rest_code_5576b2f9772747189ccddd6cf0633b26-4" name="rest_code_5576b2f9772747189ccddd6cf0633b26-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_5576b2f9772747189ccddd6cf0633b26-4"&gt;&lt;/a&gt;i2optimized == If(i1optimized &amp;lt; 15, 1, 0)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To check that the two corresponding guards are the same, the solver is asked to
prove that &lt;code class="docutils literal"&gt;(i2unoptimized == 1) == (i2optimized == 1)&lt;/code&gt;. This is
correct, because the formulas for &lt;code class="docutils literal"&gt;i2unoptimized&lt;/code&gt; and &lt;code class="docutils literal"&gt;i2optimized&lt;/code&gt; are
completely identical.&lt;/p&gt;
&lt;p&gt;After checking that the guards behave the same, we add the knowledge to the
solver that the guards passed. So the Z3 formulas become:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-1" name="rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-1"&gt;&lt;/a&gt;i1unoptimized == input_i0 + 10
&lt;a id="rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-2" name="rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-2"&gt;&lt;/a&gt;i2unoptimized == If(i1unoptimized &amp;lt; 15, 1, 0)
&lt;a id="rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-3" name="rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-3"&gt;&lt;/a&gt;i1optimized == input_i0 + 10
&lt;a id="rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-4" name="rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-4"&gt;&lt;/a&gt;i2optimized == If(i1optimized &amp;lt; 15, 1, 0)
&lt;a id="rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-5" name="rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-5"&gt;&lt;/a&gt;i1optimized == 1
&lt;a id="rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-6" name="rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-6" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_52b2cd8c71e843ae932ad5d2e9c661e9-6"&gt;&lt;/a&gt;i2optimized == 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we continue with the remaining operations of the two traces (lines 6-8).&lt;/p&gt;
&lt;p&gt;We start by adding the &lt;code class="docutils literal"&gt;int_lt&lt;/code&gt; operation in the unoptimized trace to the Z3
formulas:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_079d18470dd54d6dbb16ef9c666783e3-1" name="rest_code_079d18470dd54d6dbb16ef9c666783e3-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_079d18470dd54d6dbb16ef9c666783e3-1"&gt;&lt;/a&gt;...
&lt;a id="rest_code_079d18470dd54d6dbb16ef9c666783e3-2" name="rest_code_079d18470dd54d6dbb16ef9c666783e3-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_079d18470dd54d6dbb16ef9c666783e3-2"&gt;&lt;/a&gt;i3unoptimized == If(input_i0 &amp;lt; 6, 1, 0)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because the second guard was optimized away, we need to ask Z3 to prove that
&lt;code class="docutils literal"&gt;i3unoptimized == 1&lt;/code&gt; is always true, which fails and gives the following
counterexample:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_ab539927cd5d4008a09593ec7209b164-1" name="rest_code_ab539927cd5d4008a09593ec7209b164-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_ab539927cd5d4008a09593ec7209b164-1"&gt;&lt;/a&gt;input_i0 = 9223372036854775800
&lt;a id="rest_code_ab539927cd5d4008a09593ec7209b164-2" name="rest_code_ab539927cd5d4008a09593ec7209b164-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_ab539927cd5d4008a09593ec7209b164-2"&gt;&lt;/a&gt;i1unoptimized = 9223372036854775810
&lt;a id="rest_code_ab539927cd5d4008a09593ec7209b164-3" name="rest_code_ab539927cd5d4008a09593ec7209b164-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_ab539927cd5d4008a09593ec7209b164-3"&gt;&lt;/a&gt;i2unoptimized = 0
&lt;a id="rest_code_ab539927cd5d4008a09593ec7209b164-4" name="rest_code_ab539927cd5d4008a09593ec7209b164-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_ab539927cd5d4008a09593ec7209b164-4"&gt;&lt;/a&gt;i1optimized = 9223372036854775810
&lt;a id="rest_code_ab539927cd5d4008a09593ec7209b164-5" name="rest_code_ab539927cd5d4008a09593ec7209b164-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_ab539927cd5d4008a09593ec7209b164-5"&gt;&lt;/a&gt;i2optimized = 1
&lt;a id="rest_code_ab539927cd5d4008a09593ec7209b164-6" name="rest_code_ab539927cd5d4008a09593ec7209b164-6" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_ab539927cd5d4008a09593ec7209b164-6"&gt;&lt;/a&gt;i3unoptimized = 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thus demonstrating the bug. The fact that the Z3-based equivalence check also
managed to find the original motivating bug without manually translating it to
a formula is a good confirmation that the approach works.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="second-bug"&gt;
&lt;h2&gt;Second bug&lt;/h2&gt;
&lt;p&gt;So with this code I applied the Z3-based equivalence check to all our optimizer
unit tests. In addition to the bug we've been discussing the whole post, it also
found another buggy test! I had found it too by hand by staring at all the tests
in the process of writing all the Z3 infrastructure, but it was still a good
confirmation that the process worked. This bug was in the range analysis for
&lt;code class="docutils literal"&gt;int_neg&lt;/code&gt;, integer negation. It failed to account that &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-MININT&lt;/span&gt; == MININT&lt;/code&gt;
and therefore did a mis-optimization along the following lines:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_71447cedeb484e7f835cd977b177841d-1" name="rest_code_71447cedeb484e7f835cd977b177841d-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_71447cedeb484e7f835cd977b177841d-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;__pypy__&lt;/span&gt;
&lt;a id="rest_code_71447cedeb484e7f835cd977b177841d-2" name="rest_code_71447cedeb484e7f835cd977b177841d-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_71447cedeb484e7f835cd977b177841d-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_71447cedeb484e7f835cd977b177841d-3" name="rest_code_71447cedeb484e7f835cd977b177841d-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_71447cedeb484e7f835cd977b177841d-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_71447cedeb484e7f835cd977b177841d-4" name="rest_code_71447cedeb484e7f835cd977b177841d-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_71447cedeb484e7f835cd977b177841d-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__pypy__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int_sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_71447cedeb484e7f835cd977b177841d-5" name="rest_code_71447cedeb484e7f835cd977b177841d-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_71447cedeb484e7f835cd977b177841d-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_71447cedeb484e7f835cd977b177841d-6" name="rest_code_71447cedeb484e7f835cd977b177841d-6" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_71447cedeb484e7f835cd977b177841d-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_71447cedeb484e7f835cd977b177841d-7" name="rest_code_71447cedeb484e7f835cd977b177841d-7" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_71447cedeb484e7f835cd977b177841d-7"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a id="rest_code_71447cedeb484e7f835cd977b177841d-8" name="rest_code_71447cedeb484e7f835cd977b177841d-8" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_71447cedeb484e7f835cd977b177841d-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a id="rest_code_71447cedeb484e7f835cd977b177841d-9" name="rest_code_71447cedeb484e7f835cd977b177841d-9" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_71447cedeb484e7f835cd977b177841d-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which was wrongly optimized into:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_c505b408552047ba8e607850b33a671a-1" name="rest_code_c505b408552047ba8e607850b33a671a-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_c505b408552047ba8e607850b33a671a-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;__pypy__&lt;/span&gt;
&lt;a id="rest_code_c505b408552047ba8e607850b33a671a-2" name="rest_code_c505b408552047ba8e607850b33a671a-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_c505b408552047ba8e607850b33a671a-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_c505b408552047ba8e607850b33a671a-3" name="rest_code_c505b408552047ba8e607850b33a671a-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_c505b408552047ba8e607850b33a671a-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_c505b408552047ba8e607850b33a671a-4" name="rest_code_c505b408552047ba8e607850b33a671a-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_c505b408552047ba8e607850b33a671a-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__pypy__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int_sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c505b408552047ba8e607850b33a671a-5" name="rest_code_c505b408552047ba8e607850b33a671a-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_c505b408552047ba8e607850b33a671a-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_c505b408552047ba8e607850b33a671a-6" name="rest_code_c505b408552047ba8e607850b33a671a-6" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_c505b408552047ba8e607850b33a671a-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a id="rest_code_c505b408552047ba8e607850b33a671a-7" name="rest_code_c505b408552047ba8e607850b33a671a-7" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_c505b408552047ba8e607850b33a671a-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is wrong precisely for &lt;code class="docutils literal"&gt;x == MININT&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="generating-random-traces"&gt;
&lt;h2&gt;Generating Random Traces&lt;/h2&gt;
&lt;p&gt;These two bugs were the only two that the Z3 checker found for existing unit
tests. To try to find some more bugs I combined PyPy's existing random trace
generator with the Z3 optimization checker. The random trace generator has so
far been mostly used to find bugs in the machine code backends, particularly
also in the register allocator. So far we haven't used it with our optimizer,
but my experiments show that we should have!&lt;/p&gt;
&lt;p&gt;I'm going to describe a little bit how the random trace generator works. It's
actually not that complicated, but there's one neat trick to it.&lt;/p&gt;
&lt;p&gt;The basic idea is straightforward, it starts out with an empty trace with a
random number of input variables. Then it adds some number of operations to the
trace, either regular operations or guards. Every operation takes already
existing variables as input.&lt;/p&gt;
&lt;p&gt;The neat trick is that our random trace generator keeps a concrete random
example value for every one of the input variables, and an example result for
every operation. In this way, it is possible to generate guards that are
consistent with the example values to ensure that running the trace to its end
is possible with at least one set of values.&lt;/p&gt;
&lt;p&gt;Here's an example random trace that is generated, together with the random
example inputs and the results of every operation at the end of every line:&lt;/p&gt;
&lt;pre class="literal-block"&gt;[i0, i1, i2, i3, i4, i5] # example values: 9, 11, -8, -95, 46, 57
i6 = int_add_ovf(i3, i0) # -86
guard_no_overflow()
i7 = int_sub(i2, -35/ci) # 27
i8 = uint_ge(i3, i5) # 1
guard_true(i8)
i9 = int_lt(i7, i8) # 0
i10 = int_mul_ovf(34/ci, i7) # 918
guard_no_overflow()
i11 = int_and(i10, 63/ci) # 22
i12 = int_rshift(i3, i11) # -1
i13 = int_is_zero(i7) # 0
i14 = int_is_true(i13) # 0
guard_false(i13)
i15 = int_lt(i8, i4) # 1
i16 = int_and(i6, i0) # 8
i17 = uint_ge(i6, -6/ci) # 0
finish()&lt;/pre&gt;
&lt;p&gt;Note how every guard generated is true for the example values.&lt;/p&gt;
&lt;p&gt;I have been running this combination of random trace generation and Z3 checking
for many nights and it has found some bugs, which I'll describe in the next
section. It should probably be run for a lot longer, but still a useful
exercise already.&lt;/p&gt;
&lt;p&gt;In this mode, I'm giving every Z3 call a time limit to make sure that the random
tests don't just take arbitrarily long. This means that asking Z3 to prove
something can have three outcomes, either it's proved, or Z3 finds a
counterexample, or Z3 times out.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="bugs-found"&gt;
&lt;h2&gt;Bugs Found&lt;/h2&gt;
&lt;p&gt;In addition to the two bugs I've already described, I'll briefly list the
additional bugs that were found by optimizing random traces and then trying to
prove the equivalence with Z3.&lt;/p&gt;
&lt;p&gt;Most of the bugs were actually identified by optimizing random traces alone, not
by the Z3 component. They manifested as assert failures in the JIT compiler.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The JIT concluded after &lt;code class="docutils literal"&gt;12 == int_mul(x, 12)&lt;/code&gt; that &lt;code class="docutils literal"&gt;x == 1&lt;/code&gt;, which is
incorrect if overflow occurred (a counterexample is &lt;code class="docutils literal"&gt;0x8000000000000001&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An amusing bug, where from &lt;code class="docutils literal"&gt;0 == int_lshift(0x1000000000000000, x)&lt;/code&gt; with
&lt;code class="docutils literal"&gt;x &amp;lt;= 0 &amp;lt;= 15&lt;/code&gt;, the JIT concluded that &lt;code class="docutils literal"&gt;0x1000000000000000 == 0&lt;/code&gt;,
triggering an assert. This wrong conclusion was again caused by not taking the
possibility of overflow into account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A corner case in an optimization for chained integer additions with a
constant, where in complex enough expressions, the wrong IR API was used
(which works correctly in simple cases). Again, this triggered an assert.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This shows that we should have been fuzzing our JIT optimizer already (not a
surprising  observation in hindsight, fuzz all the things!).&lt;/p&gt;
&lt;p&gt;Thankfully, there was also one further bug that really failed in the Z3
verifier. It's a bug in common subexpression elimination / arithmetic
simplification, which again does not take overflow correctly into account.&lt;/p&gt;
&lt;p&gt;The buggy trace looks like this (unfortunately it's not easily possible to show
this bug in Python code).&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_abd2c358b34a4aa4bc7291509eb05f7e-1" name="rest_code_abd2c358b34a4aa4bc7291509eb05f7e-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_abd2c358b34a4aa4bc7291509eb05f7e-1"&gt;&lt;/a&gt;[a, b]
&lt;a id="rest_code_abd2c358b34a4aa4bc7291509eb05f7e-2" name="rest_code_abd2c358b34a4aa4bc7291509eb05f7e-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_abd2c358b34a4aa4bc7291509eb05f7e-2"&gt;&lt;/a&gt;c = int_add(a, b)
&lt;a id="rest_code_abd2c358b34a4aa4bc7291509eb05f7e-3" name="rest_code_abd2c358b34a4aa4bc7291509eb05f7e-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_abd2c358b34a4aa4bc7291509eb05f7e-3"&gt;&lt;/a&gt;r = int_sub_ovf(c, b)
&lt;a id="rest_code_abd2c358b34a4aa4bc7291509eb05f7e-4" name="rest_code_abd2c358b34a4aa4bc7291509eb05f7e-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_abd2c358b34a4aa4bc7291509eb05f7e-4"&gt;&lt;/a&gt;guard_no_ovf()
&lt;a id="rest_code_abd2c358b34a4aa4bc7291509eb05f7e-5" name="rest_code_abd2c358b34a4aa4bc7291509eb05f7e-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_abd2c358b34a4aa4bc7291509eb05f7e-5"&gt;&lt;/a&gt;finish(r)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was optimized to:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_37333ecf11e84f1daebbad0bc7b8713b-1" name="rest_code_37333ecf11e84f1daebbad0bc7b8713b-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_37333ecf11e84f1daebbad0bc7b8713b-1"&gt;&lt;/a&gt;[a, b]
&lt;a id="rest_code_37333ecf11e84f1daebbad0bc7b8713b-2" name="rest_code_37333ecf11e84f1daebbad0bc7b8713b-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_37333ecf11e84f1daebbad0bc7b8713b-2"&gt;&lt;/a&gt;finish(a)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which is incorrect, because the guard can fail given the right inputs.
But the optimizer concluded that the subtraction is safe, because its the
inverse of an earlier addition, not taking into account that this earlier
addition can have overflowed.&lt;/p&gt;
&lt;p&gt;Note that a related optimization is actually correct. Given this code:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_91661c7b24924b37a29e77daefea7975-1" name="rest_code_91661c7b24924b37a29e77daefea7975-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_91661c7b24924b37a29e77daefea7975-1"&gt;&lt;/a&gt;[a, b]
&lt;a id="rest_code_91661c7b24924b37a29e77daefea7975-2" name="rest_code_91661c7b24924b37a29e77daefea7975-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_91661c7b24924b37a29e77daefea7975-2"&gt;&lt;/a&gt;c = int_add_ovf(a, b)
&lt;a id="rest_code_91661c7b24924b37a29e77daefea7975-3" name="rest_code_91661c7b24924b37a29e77daefea7975-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_91661c7b24924b37a29e77daefea7975-3"&gt;&lt;/a&gt;guard_no_ovf()
&lt;a id="rest_code_91661c7b24924b37a29e77daefea7975-4" name="rest_code_91661c7b24924b37a29e77daefea7975-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_91661c7b24924b37a29e77daefea7975-4"&gt;&lt;/a&gt;r = int_sub(c, b)
&lt;a id="rest_code_91661c7b24924b37a29e77daefea7975-5" name="rest_code_91661c7b24924b37a29e77daefea7975-5" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_91661c7b24924b37a29e77daefea7975-5"&gt;&lt;/a&gt;finish(r)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It can be optimized to:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_f3fd6194cf6c4c85a53de5e0ae69c915-1" name="rest_code_f3fd6194cf6c4c85a53de5e0ae69c915-1" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_f3fd6194cf6c4c85a53de5e0ae69c915-1"&gt;&lt;/a&gt;[a, b]
&lt;a id="rest_code_f3fd6194cf6c4c85a53de5e0ae69c915-2" name="rest_code_f3fd6194cf6c4c85a53de5e0ae69c915-2" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_f3fd6194cf6c4c85a53de5e0ae69c915-2"&gt;&lt;/a&gt;c = int_add_ovf(a, b)
&lt;a id="rest_code_f3fd6194cf6c4c85a53de5e0ae69c915-3" name="rest_code_f3fd6194cf6c4c85a53de5e0ae69c915-3" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_f3fd6194cf6c4c85a53de5e0ae69c915-3"&gt;&lt;/a&gt;guard_no_ovf()
&lt;a id="rest_code_f3fd6194cf6c4c85a53de5e0ae69c915-4" name="rest_code_f3fd6194cf6c4c85a53de5e0ae69c915-4" href="https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html#rest_code_f3fd6194cf6c4c85a53de5e0ae69c915-4"&gt;&lt;/a&gt;finish(a)
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="future-work-and-conclusion"&gt;
&lt;h2&gt;Future Work and Conclusion&lt;/h2&gt;
&lt;p&gt;In the current form the Z3 checker is only a start, even though it has already
been concretely useful. There are various directions into which we could extend
it. In addition to generate random tests completely from scratch, we could also
start from the existing manually written unit-tests and randomly mutate those.&lt;/p&gt;
&lt;p&gt;I also want to extend the Z3 checker with support more operations, heap
operations in particular (but it's not quite clear to me how to model garbage
collection).&lt;/p&gt;
&lt;p&gt;I also want to try to switch the code away from the Z3 API and use the more
general &lt;a class="reference external" href="https://smtlib.cs.uiowa.edu/"&gt;smtlib&lt;/a&gt; interface directly, in order to be able to use other SMT
checkers than Z3, eg &lt;a class="reference external" href="https://cvc4.github.io/"&gt;CVC4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But all in all this was a fun and not too hard way to find a bunch of bugs in
our optimizer! And the infrastructure is now in place, which means that we run
some random test cases every time we execute our tests. This is going to be
particularly useful when we do further work on the integer reasoning of the JIT
(like Nico is doing, for example). As of time of writing of this post, all the
bugs mentioned have been fixed and the Z3 code has landed on the default branch
and runs as part of PyPy's CI infrastructure.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="acknowledgements"&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;Thanks to &lt;a class="reference external" href="http://saambarati.org/"&gt;Saam Barati&lt;/a&gt;, &lt;a class="reference external" href="https://bernsteinbear.com"&gt;Max Bernstein&lt;/a&gt;, &lt;a class="reference external" href="https://www.cs.hhu.de/lehrstuehle-und-arbeitsgruppen/softwaretechnik-und-programmiersprachen/unser-team/team/schmidt"&gt;Joshua Schmidt&lt;/a&gt; and &lt;a class="reference external" href="https://martinfriedrichberger.net/"&gt;Martin
Berger&lt;/a&gt;, for great feedback on drafts of this post!&lt;/p&gt;
&lt;/section&gt;</description><category>jit</category><category>testing</category><guid>https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html</guid><pubDate>Sun, 11 Dec 2022 18:00:00 GMT</pubDate></item><item><title>The PyPy Blog Turns 15 Years</title><link>https://www.pypy.org/posts/2022/10/blog-15-years.html</link><dc:creator>Carl Friedrich Bolz-Tereick</dc:creator><description>&lt;p&gt;Exactly 15 years ago today we wrote the &lt;a class="reference external" href="https://www.pypy.org/posts/2007/10/first-post-8150793557471983289.html"&gt;first blog post on the PyPy blog&lt;/a&gt;!
Over the years, we have written 423 posts, from the &lt;a class="reference external" href="https://www.pypy.org/posts/2007/12/faster-than-c-8057790636822502084.html"&gt;shortest&lt;/a&gt; to the
&lt;a class="reference external" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html"&gt;longest&lt;/a&gt;. In 2021 we &lt;a class="reference external" href="https://www.pypy.org/posts/2021/03/pypys-blog-has-moved.html"&gt;moved&lt;/a&gt; from &lt;a class="reference external" href="https://morepypy.blogspot.com"&gt;blogger&lt;/a&gt; to our own domain.&lt;/p&gt;
&lt;p&gt;The topics over the years varied widely, we published &lt;a class="reference external" href="https://www.pypy.org/posts/2013/05/pypy-20-einstein-sandwich-635158782365435530.html"&gt;release&lt;/a&gt; &lt;a class="reference external" href="https://www.pypy.org/posts/2017/06/pypy-v58-released-739876359584854017.html"&gt;announcements&lt;/a&gt;;
&lt;a class="reference external" href="https://www.pypy.org/posts/2009/04/roadmap-for-jit-377358891902851723.html"&gt;roadmaps&lt;/a&gt;; &lt;a class="reference external" href="https://www.pypy.org/posts/2010/06/blackhole-interpreter-2752965445510091289.html"&gt;JIT&lt;/a&gt;, &lt;a class="reference external" href="https://www.pypy.org/posts/2013/10/incremental-garbage-collector-in-pypy-8956893523842234676.html"&gt;GC&lt;/a&gt; and &lt;a class="reference external" href="https://www.pypy.org/posts/2013/10/update-on-stm-7145890443443707910.html"&gt;STM&lt;/a&gt; &lt;a class="reference external" href="https://www.pypy.org/posts/2019/07/pypy-jit-for-aarch64-7161523403247118006.html"&gt;updates&lt;/a&gt;; &lt;a class="reference external" href="https://www.pypy.org/posts/2018/06/repeating-matrix-multiplication-8641748742577945875.html"&gt;benchmarks&lt;/a&gt;; &lt;a class="reference external" href="https://www.pypy.org/posts/2008/10/dsseldorf-sprint-report-days-1-3-5256639868851086032.html"&gt;sprint&lt;/a&gt;, &lt;a class="reference external" href="https://www.pypy.org/posts/2007/11/pypy-road-show-1-new-york-and-ibm-7837076523877011699.html"&gt;trip&lt;/a&gt; and
&lt;a class="reference external" href="https://www.pypy.org/posts/2009/07/ecoop-2009-8415055006373020774.html"&gt;conference&lt;/a&gt; &lt;a class="reference external" href="https://www.pypy.org/posts/2012/04/pycon-2012-wrap-up-559575896040055505.html"&gt;reports&lt;/a&gt;; &lt;a class="reference external" href="https://www.pypy.org/posts/2016/07/reverse-debugging-for-python-8854823774141612670.html"&gt;technical&lt;/a&gt; &lt;a class="reference external" href="https://www.pypy.org/posts/2010/11/efficiently-implementing-python-objects-3838329944323946932.html"&gt;deep&lt;/a&gt; &lt;a class="reference external" href="https://www.pypy.org/posts/2015/10/pypy-memory-and-warmup-improvements-2-4598780879518640015.html"&gt;dives&lt;/a&gt;; &lt;a class="reference external" href="https://www.pypy.org/posts/2022/02/nlp-icelandic-case-study.html"&gt;case studies&lt;/a&gt;; &lt;a class="reference external" href="https://www.pypy.org/posts/2008/04/trying-to-get-pypy-to-run-on-python-30-5082015544752137606.html"&gt;april&lt;/a&gt; &lt;a class="reference external" href="https://www.pypy.org/posts/2008/04/other-aprils-fools-ideas-955926452383759016.html"&gt;fool's
jokes&lt;/a&gt;; &lt;a class="reference external" href="https://www.pypy.org/posts/2015/03/pydgin-using-rpython-to-generate-fast-1514065178985838697.html"&gt;research&lt;/a&gt; projects; &lt;a class="reference external" href="https://www.pypy.org/posts/2013/02/announcing-topaz-rpython-powered-ruby-6662407703061538341.html"&gt;other&lt;/a&gt; &lt;a class="reference external" href="https://www.pypy.org/posts/2012/07/hello-everyone-6869934374873967346.html"&gt;languages&lt;/a&gt; &lt;a class="reference external" href="https://www.pypy.org/posts/2014/08/a-field-test-of-software-transactional-5659022209916605798.html"&gt;using&lt;/a&gt; RPython; finished &lt;a class="reference external" href="https://www.pypy.org/posts/2010/10/phd-thesis-about-pypys-cli-jit-backend-969267841095296323.html"&gt;PhD&lt;/a&gt;
&lt;a class="reference external" href="https://www.pypy.org/posts/2019/04/an-rpython-jit-for-lpegs-4779548053359386284.html"&gt;Bachelor&lt;/a&gt; and &lt;a class="reference external" href="https://www.pypy.org/posts/2008/10/prolog-jit-masters-thesis-finished-5462132148241449867.html"&gt;Master&lt;/a&gt;, theses; pictures:&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://www.pypy.org/images/2022-pypy-pictures-collage.jpg"&gt;
&lt;img alt="a collage of photos taken at PyPy sprints" src="https://www.pypy.org/images/2022-pypy-pictures-collage-small.jpg"&gt;
&lt;/a&gt;
&lt;p&gt;and diagrams:&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://www.pypy.org/images/2022-pypy-diagrams-collage.png"&gt;
&lt;img alt="a collage of diagrams from previous blog posts" src="https://www.pypy.org/images/2022-pypy-diagrams-collage-small.png"&gt;
&lt;/a&gt;
&lt;p&gt;Quite a number of blog posts were very early iterations of papers that we
published later, here are a few that I can remember:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/posts/2009/03/applying-tracing-jit-to-interpreter-3287844903778799266.html"&gt;Applying a Tracing JIT to an Interpreter&lt;/a&gt; became &lt;a class="reference external" href="https://dl.acm.org/doi/10.1145/1565824.1565827"&gt;Tracing the meta-level:
PyPy's tracing JIT compiler&lt;/a&gt; at ICOOOLPS 2009, by far our most successful
paper.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/posts/2010/09/escape-analysis-in-pypys-jit-1780048403046080197.html"&gt;Escape Analysis in PyPy's JIT&lt;/a&gt; became &lt;a class="reference external" href="https://dl.acm.org/doi/10.1145/1929501.1929508"&gt;Allocation removal by partial
evaluation in a tracing JIT&lt;/a&gt; at PEPM 2010.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/posts/2011/03/controlling-tracing-of-interpreter-with_21-6524148550848694588.html"&gt;Controlling the Tracing of an Interpreter With Hints&lt;/a&gt; was a draft of the
paper &lt;a class="reference external" href="https://dl.acm.org/doi/10.1145/2069172.2069181"&gt;Runtime feedback in a meta-tracing JIT for efficient dynamic
languages&lt;/a&gt; at ICOOOLPS 2011&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/posts/2010/09/using-escape-analysis-across-loop-2887031293132023676.html"&gt;Using Escape Analysis Across Loop Boundaries for Specialization&lt;/a&gt; was the
nucleus of &lt;a class="reference external" href="https://dl.acm.org/doi/10.1145/2384577.2384586"&gt;Loop-aware optimizations in PyPy's tracing JIT&lt;/a&gt; at DLS 2012.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/posts/2011/10/more-compact-lists-with-list-strategies-8229304944653956829.html"&gt;List Strategies&lt;/a&gt; was eventually turned into the paper &lt;a class="reference external" href="https://dl.acm.org/doi/10.1145/2509136.2509531"&gt;Storage strategies
for collections in dynamically typed languages&lt;/a&gt; at OOPSLA 2013.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="greatest-hits"&gt;
&lt;h2&gt;Greatest Hits&lt;/h2&gt;
&lt;p&gt;In terms of visitors, the top five posts on the old blog were – on the new blog
we simply don't have stats (yet?):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/posts/2017/08/lets-remove-global-interpreter-lock-748023554216649595.html"&gt;Let's remove the global interpreter lock&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/posts/2011/04/tutorial-writing-interpreter-with-pypy-3785910476193156295.html"&gt;Tutorial: Writing an Interpreter with PyPy, Part 1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/posts/2019/10/pypys-new-json-parser-492911724084305501.html"&gt;PyPy's new JSON parser&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/posts/2016/08/pypy-gets-funding-from-mozilla-for-5569307998787871200.html"&gt;PyPy gets funding from Mozilla for Python 3.5 support&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/posts/2017/10/how-to-make-your-code-80-times-faster-1424098117108093942.html"&gt;How to make your code 80 times faster&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The number of posts per year developed like this:&lt;/p&gt;
&lt;img alt="/images/2022-pypy-posts-per-year.svg" src="https://www.pypy.org/images/2022-pypy-posts-per-year.svg"&gt;
&lt;p&gt;The most prolific authors are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/authors/maciej-fijalkowski.html"&gt;Maciej Fijałkowski&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/authors/carl-friedrich-bolz-tereick.html"&gt;Carl Friedrich Bolz-Tereick&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/authors/armin-rigo.html"&gt;Armin Rigo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/authors/antonio-cuni.html"&gt;Antonio Cuni&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/authors/mattip.html"&gt;Matti Picus&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Several blog posts have made it to the Hacker News front page, three of them to
number 1:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/posts/2014/07/pypy-stm-first-interesting-release-8684276541915333814.html"&gt;PyPy-STM: first “interesting” release&lt;/a&gt; (&lt;a class="reference external" href="https://news.ycombinator.com/item?id=7991404"&gt;discussion&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/posts/2017/08/lets-remove-global-interpreter-lock-748023554216649595.html"&gt;Let's Remove the Global Interpreter Lock&lt;/a&gt; (&lt;a class="reference external" href="https://news.ycombinator.com/item?id=15008636"&gt;discussion&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.pypy.org/posts/2018/09/inside-cpyext-why-emulating-cpython-c-8083064623681286567.html"&gt;Inside cpyext: Why emulating CPython C API is so Hard&lt;/a&gt; (&lt;a class="reference external" href="https://news.ycombinator.com/item?id=18040664"&gt;discussion&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="personal-favourites"&gt;
&lt;h2&gt;Personal Favourites&lt;/h2&gt;
&lt;p&gt;While looking through the posts, there were a few that stood out to me in some
way, so here's a subjective list of ones that I had fun looking at again:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;2008: &lt;a class="reference external" href="https://www.pypy.org/posts/2008/10/sprint-discussions-jit-generator-3301578822967655604.html"&gt;Sprint Discussions: JIT Generator Planning&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2009: &lt;a class="reference external" href="https://www.pypy.org/posts/2009/08/pypy-gets-new-compiler_25-6401910947439531107.html"&gt;PyPy gets a new compiler&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2010: &lt;a class="reference external" href="https://www.pypy.org/posts/2010/12/oh-and-btw-pypy-gets-funding-through-3568486750776147382.html"&gt;Oh, and btw: PyPy gets funding through "Eurostars"&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2011: &lt;a class="reference external" href="https://www.pypy.org/posts/2011/07/realtime-image-processing-in-python-6985924592886873374.html"&gt;Realtime image processing in Python&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2012: &lt;a class="reference external" href="https://www.pypy.org/posts/2012/06/architecture-of-cppyy-9077100041707701102.html"&gt;Architecture of Cppyy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2013: &lt;a class="reference external" href="https://www.pypy.org/posts/2013/02/10-years-of-pypy-634401291726575821.html"&gt;10 years of PyPy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2014: &lt;a class="reference external" href="https://www.pypy.org/posts/2014/11/pypy-io-improvements-1042070332447047674.html"&gt;PyPy IO Improvements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2015: &lt;a class="reference external" href="https://www.pypy.org/posts/2015/10/automatic-simd-vectorization-support-in-639063580401330508.html"&gt;Automatic SIMD vectorization support in PyPy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2016: &lt;a class="reference external" href="https://www.pypy.org/posts/2016/04/pypy-enterprise-edition-3688275697656890948.html"&gt;PyPy Enterprise Edition&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2017: &lt;a class="reference external" href="https://www.pypy.org/posts/2017/03/async-http-benchmarks-on-pypy3-1092124994927894138.html"&gt;Async HTTP benchmarks on PyPy3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2018: &lt;a class="reference external" href="https://www.pypy.org/posts/2018/04/improving-syntaxerror-in-pypy-5733639208090522433.html"&gt;Improving SyntaxError in PyPy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2018: &lt;a class="reference external" href="https://www.pypy.org/posts/2018/09/the-first-15-years-of-pypy-3412615975376972020.html#incentives-of-oss-compared-to-academia"&gt;The First 15 Years of PyPy — a Personal Retrospective&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2019: &lt;a class="reference external" href="https://www.pypy.org/posts/2019/01/pypy-for-low-latency-systems-613165393301401965.html"&gt;PyPy for low-latency systems&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2020: &lt;a class="reference external" href="https://www.pypy.org/posts/2020/02/pypy-and-cffi-have-moved-to-heptapod-5791595152472747032.html"&gt;PyPy and CFFI have moved to Heptapod&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2021: &lt;a class="reference external" href="https://www.pypy.org/posts/2021/04/ways-pypy-graphviz.html"&gt;Some Ways that PyPy uses Graphviz&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'd like to thank our authors, guest authors, commenters, users and readers who
have stuck with us through one and a half decades! If there's any particular
topics you would like to read something about, or any guest posts you'd like to
write, let us know!&lt;/p&gt;
&lt;/section&gt;</description><category>meta</category><guid>https://www.pypy.org/posts/2022/10/blog-15-years.html</guid><pubDate>Sun, 30 Oct 2022 12:00:00 GMT</pubDate></item><item><title>Allocation Removal in the Toy Optimizer</title><link>https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html</link><dc:creator>Carl Friedrich Bolz-Tereick</dc:creator><description>&lt;p&gt;One of the workhorse optimization of RPython's tracing JIT is &lt;a class="reference external" href="https://dl.acm.org/doi/10.1145/1929501.1929508"&gt;allocation
removal&lt;/a&gt;, which removes short-lived object allocation from traces. Many Python
programs create a lot of objects that only live for a short time, and whose
lifespan is fully predictable (common examples are integer and float boxes, but
also tuples, frames, intermediate string results, etc). Allocation removal will
try (and very often succeed) to remove these allocations from traces. In
this blog post I want to show a toy version of how allocation removal is
implemented.&lt;/p&gt;
&lt;p&gt;In the &lt;a class="reference external" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html"&gt;previous&lt;/a&gt; blog post of this series I showed the complete code for
writing a toy one-pass optimizer that does constant folding, common
subexpression elimination and strength reduction. In this
second post, I want to use allocation removal as a more advanced optimization
pass. The basic optimization framework is the same, we will use the same
datastructures for intermediate representation and also keep using the same
union find data structure to store equivalences between IR operations. Here's
the infrastructure code from the last post:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_00b059b9999c477385194305353991dd-1" name="rest_code_00b059b9999c477385194305353991dd-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-2" name="rest_code_00b059b9999c477385194305353991dd-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-3" name="rest_code_00b059b9999c477385194305353991dd-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-4" name="rest_code_00b059b9999c477385194305353991dd-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-5" name="rest_code_00b059b9999c477385194305353991dd-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-6" name="rest_code_00b059b9999c477385194305353991dd-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-7" name="rest_code_00b059b9999c477385194305353991dd-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"abstract"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-8" name="rest_code_00b059b9999c477385194305353991dd-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-9" name="rest_code_00b059b9999c477385194305353991dd-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_forwarded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-10" name="rest_code_00b059b9999c477385194305353991dd-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-10"&gt;&lt;/a&gt;        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"abstract"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-11" name="rest_code_00b059b9999c477385194305353991dd-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-11"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-12" name="rest_code_00b059b9999c477385194305353991dd-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-13" name="rest_code_00b059b9999c477385194305353991dd-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-13"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-14" name="rest_code_00b059b9999c477385194305353991dd-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-14"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-15" name="rest_code_00b059b9999c477385194305353991dd-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-15"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-16" name="rest_code_00b059b9999c477385194305353991dd-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-16"&gt;&lt;/a&gt;    &lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-17" name="rest_code_00b059b9999c477385194305353991dd-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-17"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-18" name="rest_code_00b059b9999c477385194305353991dd-18" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-18"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-19" name="rest_code_00b059b9999c477385194305353991dd-19" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-19"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forwarded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-20" name="rest_code_00b059b9999c477385194305353991dd-20" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-20"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-21" name="rest_code_00b059b9999c477385194305353991dd-21" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-21"&gt;&lt;/a&gt;&lt;span class="hll"&gt;
&lt;/span&gt;&lt;a id="rest_code_00b059b9999c477385194305353991dd-22" name="rest_code_00b059b9999c477385194305353991dd-22" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-22"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-23" name="rest_code_00b059b9999c477385194305353991dd-23" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-23"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-24" name="rest_code_00b059b9999c477385194305353991dd-24" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-24"&gt;&lt;/a&gt;            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Operation(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, "&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-25" name="rest_code_00b059b9999c477385194305353991dd-25" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-25"&gt;&lt;/a&gt;            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forwarded&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, "&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-26" name="rest_code_00b059b9999c477385194305353991dd-26" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-26"&gt;&lt;/a&gt;            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-27" name="rest_code_00b059b9999c477385194305353991dd-27" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-27"&gt;&lt;/a&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-28" name="rest_code_00b059b9999c477385194305353991dd-28" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-28"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-29" name="rest_code_00b059b9999c477385194305353991dd-29" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-29"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-30" name="rest_code_00b059b9999c477385194305353991dd-30" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-30"&gt;&lt;/a&gt;        &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-31" name="rest_code_00b059b9999c477385194305353991dd-31" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-31"&gt;&lt;/a&gt;        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-32" name="rest_code_00b059b9999c477385194305353991dd-32" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-32"&gt;&lt;/a&gt;            &lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forwarded&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-33" name="rest_code_00b059b9999c477385194305353991dd-33" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-33"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-34" name="rest_code_00b059b9999c477385194305353991dd-34" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-34"&gt;&lt;/a&gt;                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-35" name="rest_code_00b059b9999c477385194305353991dd-35" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-35"&gt;&lt;/a&gt;            &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-36" name="rest_code_00b059b9999c477385194305353991dd-36" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-36"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-37" name="rest_code_00b059b9999c477385194305353991dd-37" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-37"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-38" name="rest_code_00b059b9999c477385194305353991dd-38" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-38"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-39" name="rest_code_00b059b9999c477385194305353991dd-39" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-39"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-40" name="rest_code_00b059b9999c477385194305353991dd-40" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-40"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-41" name="rest_code_00b059b9999c477385194305353991dd-41" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-41"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-42" name="rest_code_00b059b9999c477385194305353991dd-42" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-42"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_set_forwarded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-43" name="rest_code_00b059b9999c477385194305353991dd-43" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-43"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-44" name="rest_code_00b059b9999c477385194305353991dd-44" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-44"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_forwarded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-45" name="rest_code_00b059b9999c477385194305353991dd-45" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-45"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forwarded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-46" name="rest_code_00b059b9999c477385194305353991dd-46" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-46"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-47" name="rest_code_00b059b9999c477385194305353991dd-47" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-47"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-48" name="rest_code_00b059b9999c477385194305353991dd-48" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-48"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-49" name="rest_code_00b059b9999c477385194305353991dd-49" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-49"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-50" name="rest_code_00b059b9999c477385194305353991dd-50" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-50"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-51" name="rest_code_00b059b9999c477385194305353991dd-51" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-51"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-52" name="rest_code_00b059b9999c477385194305353991dd-52" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-52"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-53" name="rest_code_00b059b9999c477385194305353991dd-53" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-53"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Constant(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-54" name="rest_code_00b059b9999c477385194305353991dd-54" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-54"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-55" name="rest_code_00b059b9999c477385194305353991dd-55" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-55"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-56" name="rest_code_00b059b9999c477385194305353991dd-56" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-56"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-57" name="rest_code_00b059b9999c477385194305353991dd-57" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-57"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-58" name="rest_code_00b059b9999c477385194305353991dd-58" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-58"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_forwarded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-59" name="rest_code_00b059b9999c477385194305353991dd-59" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-59"&gt;&lt;/a&gt;        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-60" name="rest_code_00b059b9999c477385194305353991dd-60" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-60"&gt;&lt;/a&gt;            &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-61" name="rest_code_00b059b9999c477385194305353991dd-61" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-61"&gt;&lt;/a&gt;            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-62" name="rest_code_00b059b9999c477385194305353991dd-62" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-62"&gt;&lt;/a&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-63" name="rest_code_00b059b9999c477385194305353991dd-63" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-63"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-64" name="rest_code_00b059b9999c477385194305353991dd-64" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-64"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-65" name="rest_code_00b059b9999c477385194305353991dd-65" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-65"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-66" name="rest_code_00b059b9999c477385194305353991dd-66" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-66"&gt;&lt;/a&gt;        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wraparg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-67" name="rest_code_00b059b9999c477385194305353991dd-67" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-67"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-68" name="rest_code_00b059b9999c477385194305353991dd-68" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-68"&gt;&lt;/a&gt;                &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-69" name="rest_code_00b059b9999c477385194305353991dd-69" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-69"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-70" name="rest_code_00b059b9999c477385194305353991dd-70" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-70"&gt;&lt;/a&gt;        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-71" name="rest_code_00b059b9999c477385194305353991dd-71" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-71"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# construct an Operation, wrap the&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-72" name="rest_code_00b059b9999c477385194305353991dd-72" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-72"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# arguments in Constants if necessary&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-73" name="rest_code_00b059b9999c477385194305353991dd-73" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-73"&gt;&lt;/a&gt;            &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-74" name="rest_code_00b059b9999c477385194305353991dd-74" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-74"&gt;&lt;/a&gt;                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;wraparg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-75" name="rest_code_00b059b9999c477385194305353991dd-75" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-75"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# add it to self, the basic block&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-76" name="rest_code_00b059b9999c477385194305353991dd-76" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-76"&gt;&lt;/a&gt;            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-77" name="rest_code_00b059b9999c477385194305353991dd-77" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-77"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-78" name="rest_code_00b059b9999c477385194305353991dd-78" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-78"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-79" name="rest_code_00b059b9999c477385194305353991dd-79" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-79"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-80" name="rest_code_00b059b9999c477385194305353991dd-80" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-80"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# a bunch of operations we support&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-81" name="rest_code_00b059b9999c477385194305353991dd-81" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-81"&gt;&lt;/a&gt;    &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"add"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-82" name="rest_code_00b059b9999c477385194305353991dd-82" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-82"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mul"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-83" name="rest_code_00b059b9999c477385194305353991dd-83" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-83"&gt;&lt;/a&gt;    &lt;span class="n"&gt;getarg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"getarg"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-84" name="rest_code_00b059b9999c477385194305353991dd-84" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-84"&gt;&lt;/a&gt;    &lt;span class="n"&gt;dummy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"dummy"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-85" name="rest_code_00b059b9999c477385194305353991dd-85" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-85"&gt;&lt;/a&gt;    &lt;span class="n"&gt;lshift&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"lshift"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-86" name="rest_code_00b059b9999c477385194305353991dd-86" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-86"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# some new one for this post&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-87" name="rest_code_00b059b9999c477385194305353991dd-87" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-87"&gt;&lt;/a&gt;    &lt;span class="n"&gt;alloc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"alloc"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-88" name="rest_code_00b059b9999c477385194305353991dd-88" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-88"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"load"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_00b059b9999c477385194305353991dd-89" name="rest_code_00b059b9999c477385194305353991dd-89" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-89"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"store"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_00b059b9999c477385194305353991dd-90" name="rest_code_00b059b9999c477385194305353991dd-90" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-90"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"print"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_00b059b9999c477385194305353991dd-91" name="rest_code_00b059b9999c477385194305353991dd-91" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-91"&gt;&lt;/a&gt;&lt;span class="hll"&gt;
&lt;/span&gt;&lt;a id="rest_code_00b059b9999c477385194305353991dd-92" name="rest_code_00b059b9999c477385194305353991dd-92" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-92"&gt;&lt;/a&gt;&lt;span class="hll"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;varprefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"var"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_00b059b9999c477385194305353991dd-93" name="rest_code_00b059b9999c477385194305353991dd-93" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-93"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;arg_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-94" name="rest_code_00b059b9999c477385194305353991dd-94" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-94"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-95" name="rest_code_00b059b9999c477385194305353991dd-95" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-95"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-96" name="rest_code_00b059b9999c477385194305353991dd-96" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-96"&gt;&lt;/a&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-97" name="rest_code_00b059b9999c477385194305353991dd-97" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-97"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;varnames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-98" name="rest_code_00b059b9999c477385194305353991dd-98" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-98"&gt;&lt;/a&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-99" name="rest_code_00b059b9999c477385194305353991dd-99" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-99"&gt;&lt;/a&gt;    &lt;span class="n"&gt;varnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-100" name="rest_code_00b059b9999c477385194305353991dd-100" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-100"&gt;&lt;/a&gt;    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-101" name="rest_code_00b059b9999c477385194305353991dd-101" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-101"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-102" name="rest_code_00b059b9999c477385194305353991dd-102" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-102"&gt;&lt;/a&gt;        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;varprefix&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-103" name="rest_code_00b059b9999c477385194305353991dd-103" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-103"&gt;&lt;/a&gt;        &lt;span class="n"&gt;varnames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-104" name="rest_code_00b059b9999c477385194305353991dd-104" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-104"&gt;&lt;/a&gt;        &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;", "&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-105" name="rest_code_00b059b9999c477385194305353991dd-105" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-105"&gt;&lt;/a&gt;            &lt;span class="n"&gt;arg_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-106" name="rest_code_00b059b9999c477385194305353991dd-106" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-106"&gt;&lt;/a&gt;                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-107" name="rest_code_00b059b9999c477385194305353991dd-107" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-107"&gt;&lt;/a&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-108" name="rest_code_00b059b9999c477385194305353991dd-108" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-108"&gt;&lt;/a&gt;        &lt;span class="n"&gt;strop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-109" name="rest_code_00b059b9999c477385194305353991dd-109" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-109"&gt;&lt;/a&gt;        &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00b059b9999c477385194305353991dd-110" name="rest_code_00b059b9999c477385194305353991dd-110" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_00b059b9999c477385194305353991dd-110"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are two changes to the code from the last post: &lt;code class="docutils literal"&gt;Operation&lt;/code&gt; instances
have a new &lt;code class="docutils literal"&gt;.info&lt;/code&gt; field, which is set to &lt;code class="docutils literal"&gt;None&lt;/code&gt; by default. We will learn
how the info field is used a bit further down. Also, we define some new
operations.&lt;/p&gt;
&lt;section id="interpreter"&gt;
&lt;h2&gt;Interpreter&lt;/h2&gt;
&lt;p&gt;In this post we will mainly concern ourselves with optimizing
programs that allocate memory. We assume that our language is garbage collected
and memory safe. The new operations that we will optimize are &lt;code class="docutils literal"&gt;alloc&lt;/code&gt;
(allocates some new object), &lt;code class="docutils literal"&gt;store&lt;/code&gt; (stores a value into a fixed field of an
object), &lt;code class="docutils literal"&gt;load&lt;/code&gt; (loads the value from a field in the object).&lt;/p&gt;
&lt;p&gt;We are leaving out a lot of details of a "real" system here, usually an
&lt;code class="docutils literal"&gt;alloc&lt;/code&gt; operation would get some extra information, for example the type of
the freshly allocated object or at least its size. &lt;code class="docutils literal"&gt;load&lt;/code&gt; and &lt;code class="docutils literal"&gt;store&lt;/code&gt; would
typically have some kind of field offset and maybe some information about the
field's type&lt;/p&gt;
&lt;p&gt;Here's a simple program that uses these operations:&lt;/p&gt;
&lt;pre class="literal-block"&gt;var0 = getarg(0)
obj0 = alloc()
store(obj0, 0, var0)
var1 = load(obj0, 0)
print(var1)&lt;/pre&gt;
&lt;p&gt;The code allocates a new object &lt;code class="docutils literal"&gt;obj0&lt;/code&gt;, stores &lt;code class="docutils literal"&gt;var0&lt;/code&gt; into field &lt;code class="docutils literal"&gt;0&lt;/code&gt; of
the object, the loads the same field and prints the result of the load.&lt;/p&gt;
&lt;p&gt;Before we get started in writing the optimizer for these operations, let's try
to understand the semantics of the new operations a bit better. To do this, we
can sketch a small interpreter for basic blocks, supporting only &lt;code class="docutils literal"&gt;getarg&lt;/code&gt;,
&lt;code class="docutils literal"&gt;alloc&lt;/code&gt;, &lt;code class="docutils literal"&gt;store&lt;/code&gt;, &lt;code class="docutils literal"&gt;load&lt;/code&gt;, &lt;code class="docutils literal"&gt;print&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-1" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_interpret&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-2" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-3" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-4" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-5" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-6" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-7" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-8" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-9" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-10" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-11" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-12" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-12"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-13" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-14" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-14"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-15" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-15"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-16" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-16"&gt;&lt;/a&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-17" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-18" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-18" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-18"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-19" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-19" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-19"&gt;&lt;/a&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-20" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-20" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-20"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-21" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-21" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-21"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-22" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-22" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-22"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-23" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-23" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-23"&gt;&lt;/a&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-24" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-24" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-24"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-25" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-25" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-25"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;argval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-26" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-26" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-26"&gt;&lt;/a&gt;        &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-27" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-27" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-27"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-28" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-28" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-28"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-29" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-29" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-29"&gt;&lt;/a&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-30" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-30" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-30"&gt;&lt;/a&gt;            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-31" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-31" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-31"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-32" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-32" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-32"&gt;&lt;/a&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-33" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-33" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-33"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-34" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-34" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-34"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"getarg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-35" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-35" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-35"&gt;&lt;/a&gt;            &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;get_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-36" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-36" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-36"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"alloc"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-37" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-37" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-37"&gt;&lt;/a&gt;            &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-38" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-38" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-38"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"load"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-39" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-39" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-39"&gt;&lt;/a&gt;            &lt;span class="n"&gt;fieldnum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-40" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-40" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-40"&gt;&lt;/a&gt;            &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldnum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-41" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-41" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-41"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"store"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-42" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-42" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-42"&gt;&lt;/a&gt;            &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-43" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-43" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-43"&gt;&lt;/a&gt;            &lt;span class="n"&gt;fieldnum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-44" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-44" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-44"&gt;&lt;/a&gt;            &lt;span class="n"&gt;fieldvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-45" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-45" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-45"&gt;&lt;/a&gt;            &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldnum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fieldvalue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-46" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-46" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-46"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# no result, only side effect&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-47" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-47" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-47"&gt;&lt;/a&gt;            &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-48" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-48" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-48"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"print"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-49" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-49" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-49"&gt;&lt;/a&gt;            &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-50" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-50" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-50"&gt;&lt;/a&gt;            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-51" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-51" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-51"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-52" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-52" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-52"&gt;&lt;/a&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-53" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-53" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-53"&gt;&lt;/a&gt;            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-54" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-54" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-54"&gt;&lt;/a&gt;                &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; not supported"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-55" name="rest_code_828b74cdafe74a1cb4a163f205d5e8b9-55" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_828b74cdafe74a1cb4a163f205d5e8b9-55"&gt;&lt;/a&gt;        &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The interpreter  walks the operations of a block, executing each one in turn. It
uses the &lt;code class="docutils literal"&gt;info&lt;/code&gt; field to store the result of each already executed
&lt;code class="docutils literal"&gt;Operation&lt;/code&gt;. In this interpreter sketch we stop at the first &lt;code class="docutils literal"&gt;print&lt;/code&gt; that
we execute and return its argument for the simple but bad reason that it makes
&lt;code class="docutils literal"&gt;test_interpret&lt;/code&gt; easier to write.&lt;/p&gt;
&lt;p&gt;Objects in the interpreter are represented using a class &lt;code class="docutils literal"&gt;Object&lt;/code&gt;, which
stores the object's field into a Python dictionary. As written above, this is a
simplification, in a real system the &lt;cite&gt;alloc&lt;/cite&gt; operation might for example take
some kind of type as an argument, that describes which kinds of fields an
object has and how they are laid out in memory, which would allow more
efficient storage of the content. But we don't want to care about this level of
detail in the post, so using a dict in the interpreter is good enough.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="version-1-naive-attempt"&gt;
&lt;h2&gt;Version 1: Naive Attempt&lt;/h2&gt;
&lt;p&gt;In many programs, some allocated objects don't live for very long and have a
completely predictable lifetime. They get allocated, used for a while, and then
there is no way to reference them any more, so the garbage collector will
reclaim them. The very first example block had such an allocation:&lt;/p&gt;
&lt;pre class="literal-block"&gt;var0 = getarg(0)
obj0 = alloc()
store(obj0, 0, var0)
var1 = load(obj0, 0)
print(var1)&lt;/pre&gt;
&lt;p&gt;Here &lt;code class="docutils literal"&gt;obj0&lt;/code&gt; is written to, then read from, and then it's no longer used. We
want to optimize such programs to remove this &lt;code class="docutils literal"&gt;alloc&lt;/code&gt; operation. The optimized
version of this program would look like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;var0 = getarg(0)
print(var0)&lt;/pre&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;alloc&lt;/code&gt;, &lt;code class="docutils literal"&gt;store&lt;/code&gt; and &lt;code class="docutils literal"&gt;load&lt;/code&gt; operations have been completely removed.
This is a pretty important optimizations for PyPy's JIT: Allocations, memory
reads and writes are quite costly and occur &lt;em&gt;a lot&lt;/em&gt; in Python, so getting rid
of as many of them as possible is instrumental for performance.&lt;/p&gt;
&lt;p&gt;Implementing the optimization is not a lot of code! However, understanding all
the corner cases of the
optimization and making sure that the resulting program behave correctly is not
completely trivial. Therefore we will develop the optimization step by step, in
a test driven fashion: I will start each section with a new test that shows a
bug in the version of the optimization that we have so far.&lt;/p&gt;
&lt;p&gt;Let's start in a really naive way. Here's the first test we would like to
pass, using the example program above:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-1" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_remove_unused_allocation&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-2" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-3" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-4" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-5" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-6" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-7" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-8" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-9" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-9"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# the virtual object looks like this:&lt;/span&gt;
&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-10" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-10"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#  obj&lt;/span&gt;
&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-11" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-11"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ┌──────────┐&lt;/span&gt;
&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-12" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# │ 0: var0  │&lt;/span&gt;
&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-13" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# └──────────┘&lt;/span&gt;
&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-14" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-14"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-15" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-15"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_7bea91734f8a464897ce4dbcfad6479c-16" name="rest_code_7bea91734f8a464897ce4dbcfad6479c-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_7bea91734f8a464897ce4dbcfad6479c-16"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = print(optvar0)"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will define a class &lt;code class="docutils literal"&gt;VirtualObject&lt;/code&gt; that is basically identical to
&lt;code class="docutils literal"&gt;Object&lt;/code&gt; above. But it will not be used by the interpreter, instead we will
use it during optimization.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-1" name="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;VirtualObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-2" name="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-3" name="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-3"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a id="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-4" name="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-5" name="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-6" name="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-6"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;a id="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-7" name="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-8" name="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-9" name="rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_23c9a9c51dab46a5a1714cb90a9a5c08-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The structure of the optimizer is going to be like those in the first blog post.
The optimizer makes a single pass over all operations. It removes some and
emits others.&lt;/p&gt;
&lt;p&gt;This first version of the allocation removal optimizer is going to be extremely
optimistic. It simply assumes that &lt;em&gt;all&lt;/em&gt; the allocations in the program can be
optimized away. That is not realistic in practice. We will have to
refine this approach later, but it's a good way to start. That means whenever
the optimizer sees an &lt;code class="docutils literal"&gt;alloc&lt;/code&gt; operation, it removes it and creates a
&lt;code class="docutils literal"&gt;VirtualObject&lt;/code&gt; object which stores the information that is known during
optimization about the result of the &lt;code class="docutils literal"&gt;alloc&lt;/code&gt;. Like in the interpreter, the
&lt;code class="docutils literal"&gt;VirtualObject&lt;/code&gt; is stored in the &lt;code class="docutils literal"&gt;.info&lt;/code&gt; field of the &lt;code class="docutils literal"&gt;Operation&lt;/code&gt; instance
that represents the &lt;code class="docutils literal"&gt;alloc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When the optimizer sees a &lt;code class="docutils literal"&gt;store&lt;/code&gt; operation, it will also remove it and
instead execute the store by calling the &lt;code class="docutils literal"&gt;VirtualObject.store&lt;/code&gt; method.
Here is one important difference between the interpreter and the optimizer: In
the interpreter, the values that were stored into an &lt;code class="docutils literal"&gt;Object&lt;/code&gt; (and thus
put into the object's &lt;code class="docutils literal"&gt;.contents&lt;/code&gt; dictionary) were runtime values, for
example integers or other objects. In the optimizer however, the
fields of the &lt;code class="docutils literal"&gt;VirtualObject&lt;/code&gt; store &lt;code class="docutils literal"&gt;Value&lt;/code&gt; instances, either &lt;code class="docutils literal"&gt;Constant&lt;/code&gt;
instances or &lt;code class="docutils literal"&gt;Operation&lt;/code&gt; instances.&lt;/p&gt;
&lt;p&gt;When the optimizer sees a &lt;code class="docutils literal"&gt;load&lt;/code&gt; operation, it &lt;em&gt;also&lt;/em&gt; removes it, and replaces
the &lt;code class="docutils literal"&gt;load&lt;/code&gt; with the &lt;code class="docutils literal"&gt;Operation&lt;/code&gt; (or &lt;code class="docutils literal"&gt;Constant&lt;/code&gt;) that is stored in the
&lt;code class="docutils literal"&gt;VirtualObject&lt;/code&gt; at that point:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_3272498ce285485698127a1bcb985796-1" name="rest_code_3272498ce285485698127a1bcb985796-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-2" name="rest_code_3272498ce285485698127a1bcb985796-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-3" name="rest_code_3272498ce285485698127a1bcb985796-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-4" name="rest_code_3272498ce285485698127a1bcb985796-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"alloc"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-5" name="rest_code_3272498ce285485698127a1bcb985796-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-5"&gt;&lt;/a&gt;            &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VirtualObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-6" name="rest_code_3272498ce285485698127a1bcb985796-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-6"&gt;&lt;/a&gt;            &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-7" name="rest_code_3272498ce285485698127a1bcb985796-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"load"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-8" name="rest_code_3272498ce285485698127a1bcb985796-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-8"&gt;&lt;/a&gt;            &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-9" name="rest_code_3272498ce285485698127a1bcb985796-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-9"&gt;&lt;/a&gt;            &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-10" name="rest_code_3272498ce285485698127a1bcb985796-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-10"&gt;&lt;/a&gt;            &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-11" name="rest_code_3272498ce285485698127a1bcb985796-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-11"&gt;&lt;/a&gt;            &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-12" name="rest_code_3272498ce285485698127a1bcb985796-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-12"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"store"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-13" name="rest_code_3272498ce285485698127a1bcb985796-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-13"&gt;&lt;/a&gt;            &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-14" name="rest_code_3272498ce285485698127a1bcb985796-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-14"&gt;&lt;/a&gt;            &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-15" name="rest_code_3272498ce285485698127a1bcb985796-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-15"&gt;&lt;/a&gt;            &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-16" name="rest_code_3272498ce285485698127a1bcb985796-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-16"&gt;&lt;/a&gt;            &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-17" name="rest_code_3272498ce285485698127a1bcb985796-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3272498ce285485698127a1bcb985796-18" name="rest_code_3272498ce285485698127a1bcb985796-18" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3272498ce285485698127a1bcb985796-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;opt_bb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the first version of the optimization. It doesn't handle all kinds of
difficult cases, and we'll have to do something about its optimism.
But, already in this minimalistic form, we can write a slightly more complicated
test with two allocations, one object pointing to the other. It works correctly
too, both allocations are removed:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-1" name="rest_code_741d7a376c38438398deb1b590d35c07-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_remove_two_allocations&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-2" name="rest_code_741d7a376c38438398deb1b590d35c07-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-3" name="rest_code_741d7a376c38438398deb1b590d35c07-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-4" name="rest_code_741d7a376c38438398deb1b590d35c07-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;obj0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-5" name="rest_code_741d7a376c38438398deb1b590d35c07-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sto1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-6" name="rest_code_741d7a376c38438398deb1b590d35c07-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-7" name="rest_code_741d7a376c38438398deb1b590d35c07-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sto2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-8" name="rest_code_741d7a376c38438398deb1b590d35c07-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-9" name="rest_code_741d7a376c38438398deb1b590d35c07-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-10" name="rest_code_741d7a376c38438398deb1b590d35c07-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-11" name="rest_code_741d7a376c38438398deb1b590d35c07-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-11"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# the virtual objects look like this:&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-12" name="rest_code_741d7a376c38438398deb1b590d35c07-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#  obj0&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-13" name="rest_code_741d7a376c38438398deb1b590d35c07-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ┌──────┐&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-14" name="rest_code_741d7a376c38438398deb1b590d35c07-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-14"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# │ 0: ╷ │&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-15" name="rest_code_741d7a376c38438398deb1b590d35c07-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-15"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# └────┼─┘&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-16" name="rest_code_741d7a376c38438398deb1b590d35c07-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-16"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#      │&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-17" name="rest_code_741d7a376c38438398deb1b590d35c07-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-17"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#      ▼&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-18" name="rest_code_741d7a376c38438398deb1b590d35c07-18" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-18"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#     obj1&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-19" name="rest_code_741d7a376c38438398deb1b590d35c07-19" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-19"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#   ┌─────────┐&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-20" name="rest_code_741d7a376c38438398deb1b590d35c07-20" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-20"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#   │ 0: var0 │&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-21" name="rest_code_741d7a376c38438398deb1b590d35c07-21" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-21"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#   └─────────┘&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-22" name="rest_code_741d7a376c38438398deb1b590d35c07-22" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-22"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# therefore&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-23" name="rest_code_741d7a376c38438398deb1b590d35c07-23" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-23"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# var1 is the same as obj0&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-24" name="rest_code_741d7a376c38438398deb1b590d35c07-24" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-24"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# var2 is the same as var0&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-25" name="rest_code_741d7a376c38438398deb1b590d35c07-25" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-25"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-26" name="rest_code_741d7a376c38438398deb1b590d35c07-26" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-26"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-27" name="rest_code_741d7a376c38438398deb1b590d35c07-27" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-27"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_741d7a376c38438398deb1b590d35c07-28" name="rest_code_741d7a376c38438398deb1b590d35c07-28" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_741d7a376c38438398deb1b590d35c07-28"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = print(optvar0)"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="version-2-re-materializing-allocations"&gt;
&lt;h2&gt;Version 2: Re-Materializing Allocations&lt;/h2&gt;
&lt;p&gt;To make it easier to talk about how the optimizer operates, let's introduce
some terminology. As already seen by the choice
of the class name &lt;code class="docutils literal"&gt;VirtualObject&lt;/code&gt;, we will call an object &lt;strong&gt;virtual&lt;/strong&gt; if the
optimizer has optimized away the &lt;code class="docutils literal"&gt;alloc&lt;/code&gt; operation that creates the object.
Other objects are equivalently &lt;strong&gt;not virtual&lt;/strong&gt;, for example those that have
existed before we enter the current code block.&lt;/p&gt;
&lt;p&gt;The first problem that we need to fix is the assumption that every
allocation can be removed. So far we only looked at small programs where every
allocation could be removed, or equivalently, where every object is virtual.
A program that creates virtual objects, stores into and loads from them, and
then forgets the objects. In this simple case removing the allocations is fine.
As we saw in the previous section, it's also fine to have a virtual object
reference another virtual, both allocations can be removed.&lt;/p&gt;
&lt;p&gt;What are the cases were we &lt;em&gt;can't&lt;/em&gt; remove an allocation?
The first version of the optimizer simply assumed that every allocation can be
removed. This can't work. We will replace this assumption with the following
simple heuristic:&lt;/p&gt;
&lt;p&gt;If a reference to a virtual object &lt;code class="docutils literal"&gt;a&lt;/code&gt; is stored into an object &lt;code class="docutils literal"&gt;b&lt;/code&gt;
that is not virtual, then &lt;code class="docutils literal"&gt;a&lt;/code&gt; will also stop being virtual. If an object &lt;code class="docutils literal"&gt;a&lt;/code&gt;
that was virtual stops being virtual, we say that it &lt;strong&gt;escapes&lt;/strong&gt;. &lt;a class="reference internal" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#target-4"&gt;¹&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The simplest test case for this happening looks like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-1" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_materialize&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-2" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-3" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-4" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-5" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-6" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-7" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-7"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#  obj is virtual, without any fields&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-8" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-8"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ┌───────┐&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-9" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-9"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# │ empty │&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-10" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-10"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# └───────┘&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-11" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-11"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# then we store a reference to obj into&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-12" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# field 0 of var0. Since var0 is not virtual,&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-13" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# obj escapes, so we have to put it back&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-14" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-14"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# into the optimized basic block&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-15" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-16" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-16"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-17" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-17"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = alloc()&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-18" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-18" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-18"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar2 = store(optvar0, 0, optvar1)"""&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-19" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-19" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-19"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# so far, fails like this:&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-20" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-20" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-20"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# the line:&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-21" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-21" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-21"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# info.store(field, op.arg(2))&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-22" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-22" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-22"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# produces an AttributeError because info&lt;/span&gt;
&lt;a id="rest_code_865c3da0dd28405498c4c20b2e3bfe67-23" name="rest_code_865c3da0dd28405498c4c20b2e3bfe67-23" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_865c3da0dd28405498c4c20b2e3bfe67-23"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# is None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the optimizer reaches a point where a virtual object escapes (like the
&lt;code class="docutils literal"&gt;store&lt;/code&gt; operation in the test), the optimizer has already removed the &lt;code class="docutils literal"&gt;alloc&lt;/code&gt;
operation that created the virtual object. If the object escapes, we don't want
to go back in the operations list and re-insert the &lt;code class="docutils literal"&gt;alloc&lt;/code&gt; operation, that
sounds potentially very complicated. Instead, we re-insert the &lt;code class="docutils literal"&gt;alloc&lt;/code&gt;
operation that will recreate the virtual object at the point of escape using a
helper function &lt;code class="docutils literal"&gt;materialize&lt;/code&gt;.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_ef6d6206b45b4eafab48ca9322aae493-1" name="rest_code_ef6d6206b45b4eafab48ca9322aae493-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ef6d6206b45b4eafab48ca9322aae493-1"&gt;&lt;/a&gt;&lt;span class="hll"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;materialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_ef6d6206b45b4eafab48ca9322aae493-2" name="rest_code_ef6d6206b45b4eafab48ca9322aae493-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ef6d6206b45b4eafab48ca9322aae493-2"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_ef6d6206b45b4eafab48ca9322aae493-3" name="rest_code_ef6d6206b45b4eafab48ca9322aae493-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ef6d6206b45b4eafab48ca9322aae493-3"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_ef6d6206b45b4eafab48ca9322aae493-4" name="rest_code_ef6d6206b45b4eafab48ca9322aae493-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ef6d6206b45b4eafab48ca9322aae493-4"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_ef6d6206b45b4eafab48ca9322aae493-5" name="rest_code_ef6d6206b45b4eafab48ca9322aae493-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ef6d6206b45b4eafab48ca9322aae493-5"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;VirtualObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_ef6d6206b45b4eafab48ca9322aae493-6" name="rest_code_ef6d6206b45b4eafab48ca9322aae493-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ef6d6206b45b4eafab48ca9322aae493-6"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"alloc"&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_ef6d6206b45b4eafab48ca9322aae493-7" name="rest_code_ef6d6206b45b4eafab48ca9322aae493-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ef6d6206b45b4eafab48ca9322aae493-7"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="c1"&gt;# put the alloc operation back into the trace&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_ef6d6206b45b4eafab48ca9322aae493-8" name="rest_code_ef6d6206b45b4eafab48ca9322aae493-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ef6d6206b45b4eafab48ca9322aae493-8"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I've added a number of fairly strong assertions to &lt;code class="docutils literal"&gt;materialize&lt;/code&gt; to encode our
current assumptions about the situations in which it expects to be called. We
will remove some of them later as we generalize the code.&lt;/p&gt;
&lt;p&gt;Now that we have &lt;code class="docutils literal"&gt;materialize&lt;/code&gt; we need to change &lt;code class="docutils literal"&gt;optimize_alloc_removal&lt;/code&gt; to
recognize the case of storing a virtual object into a non-virtual one. We can
recognize &lt;code class="docutils literal"&gt;Operation&lt;/code&gt; instances that produced a virtual object by looking at
their &lt;code class="docutils literal"&gt;.info&lt;/code&gt; field. If it is &lt;code class="docutils literal"&gt;None&lt;/code&gt;, the object is not virtual, otherwise
it is. If we store something into a virtual object, we leave the code as above.
If we store a virtual object into an object that is not virtual, we will first
materialize the virtual object, and then emit the store.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-1" name="rest_code_b615420c2cef4c14913ec23f92b9899a-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-2" name="rest_code_b615420c2cef4c14913ec23f92b9899a-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-3" name="rest_code_b615420c2cef4c14913ec23f92b9899a-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-4" name="rest_code_b615420c2cef4c14913ec23f92b9899a-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"alloc"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-5" name="rest_code_b615420c2cef4c14913ec23f92b9899a-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-5"&gt;&lt;/a&gt;            &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VirtualObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-6" name="rest_code_b615420c2cef4c14913ec23f92b9899a-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-6"&gt;&lt;/a&gt;            &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-7" name="rest_code_b615420c2cef4c14913ec23f92b9899a-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"load"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-8" name="rest_code_b615420c2cef4c14913ec23f92b9899a-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-8"&gt;&lt;/a&gt;            &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-9" name="rest_code_b615420c2cef4c14913ec23f92b9899a-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-9"&gt;&lt;/a&gt;            &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-10" name="rest_code_b615420c2cef4c14913ec23f92b9899a-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-10"&gt;&lt;/a&gt;            &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-11" name="rest_code_b615420c2cef4c14913ec23f92b9899a-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-11"&gt;&lt;/a&gt;            &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-12" name="rest_code_b615420c2cef4c14913ec23f92b9899a-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-12"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"store"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-13" name="rest_code_b615420c2cef4c14913ec23f92b9899a-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-13"&gt;&lt;/a&gt;            &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-14" name="rest_code_b615420c2cef4c14913ec23f92b9899a-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-14"&gt;&lt;/a&gt;&lt;span class="hll"&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# virtual&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-15" name="rest_code_b615420c2cef4c14913ec23f92b9899a-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-15"&gt;&lt;/a&gt;&lt;span class="hll"&gt;                &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-16" name="rest_code_b615420c2cef4c14913ec23f92b9899a-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-16"&gt;&lt;/a&gt;&lt;span class="hll"&gt;                &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-17" name="rest_code_b615420c2cef4c14913ec23f92b9899a-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-17"&gt;&lt;/a&gt;&lt;span class="hll"&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-18" name="rest_code_b615420c2cef4c14913ec23f92b9899a-18" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-18"&gt;&lt;/a&gt;&lt;span class="hll"&gt;            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# not virtual&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-19" name="rest_code_b615420c2cef4c14913ec23f92b9899a-19" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-19"&gt;&lt;/a&gt;&lt;span class="hll"&gt;                &lt;span class="c1"&gt;# first materialize the&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-20" name="rest_code_b615420c2cef4c14913ec23f92b9899a-20" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-20"&gt;&lt;/a&gt;&lt;span class="hll"&gt;                &lt;span class="c1"&gt;# right hand side&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-21" name="rest_code_b615420c2cef4c14913ec23f92b9899a-21" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-21"&gt;&lt;/a&gt;&lt;span class="hll"&gt;                &lt;span class="n"&gt;materialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-22" name="rest_code_b615420c2cef4c14913ec23f92b9899a-22" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-22"&gt;&lt;/a&gt;&lt;span class="hll"&gt;                &lt;span class="c1"&gt;# then emit the store via&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-23" name="rest_code_b615420c2cef4c14913ec23f92b9899a-23" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-23"&gt;&lt;/a&gt;&lt;span class="hll"&gt;                &lt;span class="c1"&gt;# the general path below&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-24" name="rest_code_b615420c2cef4c14913ec23f92b9899a-24" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-24"&gt;&lt;/a&gt;        &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b615420c2cef4c14913ec23f92b9899a-25" name="rest_code_b615420c2cef4c14913ec23f92b9899a-25" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b615420c2cef4c14913ec23f92b9899a-25"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;opt_bb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the general idea, and it is enough to pass &lt;code class="docutils literal"&gt;test_materialize&lt;/code&gt;. But of
course there are still a number of further problems that we now need to solve.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="version-3-don-t-materialize-twice"&gt;
&lt;h2&gt;Version 3: Don't Materialize Twice&lt;/h2&gt;
&lt;p&gt;The first problem is the fact that after we materialize a virtual object, it is
no longer virtual. So if it escapes a second time, it should &lt;em&gt;not&lt;/em&gt; be
materialized a second time. A test for that case could simply repeat the
&lt;code class="docutils literal"&gt;store&lt;/code&gt; operation:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-1" name="rest_code_ec0c737e38534b24a97f90a407cac041-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_dont_materialize_twice&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-2" name="rest_code_ec0c737e38534b24a97f90a407cac041-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# obj is again an empty virtual object,&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-3" name="rest_code_ec0c737e38534b24a97f90a407cac041-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# and we store it into var0 *twice*.&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-4" name="rest_code_ec0c737e38534b24a97f90a407cac041-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# this should only materialize it once&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-5" name="rest_code_ec0c737e38534b24a97f90a407cac041-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-6" name="rest_code_ec0c737e38534b24a97f90a407cac041-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-7" name="rest_code_ec0c737e38534b24a97f90a407cac041-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-8" name="rest_code_ec0c737e38534b24a97f90a407cac041-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sto0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-9" name="rest_code_ec0c737e38534b24a97f90a407cac041-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sto1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-10" name="rest_code_ec0c737e38534b24a97f90a407cac041-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-11" name="rest_code_ec0c737e38534b24a97f90a407cac041-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-12" name="rest_code_ec0c737e38534b24a97f90a407cac041-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-13" name="rest_code_ec0c737e38534b24a97f90a407cac041-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = alloc()&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-14" name="rest_code_ec0c737e38534b24a97f90a407cac041-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar2 = store(optvar0, 0, optvar1)&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-15" name="rest_code_ec0c737e38534b24a97f90a407cac041-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-15"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar3 = store(optvar0, 0, optvar1)"""&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-16" name="rest_code_ec0c737e38534b24a97f90a407cac041-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-16"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# fails so far: the operations that we get&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-17" name="rest_code_ec0c737e38534b24a97f90a407cac041-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-17"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# at the moment are:&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-18" name="rest_code_ec0c737e38534b24a97f90a407cac041-18" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-18"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-19" name="rest_code_ec0c737e38534b24a97f90a407cac041-19" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-19"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# optvar1 = alloc()&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-20" name="rest_code_ec0c737e38534b24a97f90a407cac041-20" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-20"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# optvar2 = store(optvar0, 0, optvar1)&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-21" name="rest_code_ec0c737e38534b24a97f90a407cac041-21" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-21"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# optvar3 = alloc()&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-22" name="rest_code_ec0c737e38534b24a97f90a407cac041-22" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-22"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# optvar4 = store(optvar0, 0, optvar3)&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-23" name="rest_code_ec0c737e38534b24a97f90a407cac041-23" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-23"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ie the object is materialized twice,&lt;/span&gt;
&lt;a id="rest_code_ec0c737e38534b24a97f90a407cac041-24" name="rest_code_ec0c737e38534b24a97f90a407cac041-24" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ec0c737e38534b24a97f90a407cac041-24"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# which is incorrect&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We solve the problem by setting the &lt;code class="docutils literal"&gt;.info&lt;/code&gt; field of an object that we
materialize to &lt;code class="docutils literal"&gt;None&lt;/code&gt; to mark it as no longer being virtual.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_51c8bd5e64a742ca93c90a970d16a92f-1" name="rest_code_51c8bd5e64a742ca93c90a970d16a92f-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_51c8bd5e64a742ca93c90a970d16a92f-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;materialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_51c8bd5e64a742ca93c90a970d16a92f-2" name="rest_code_51c8bd5e64a742ca93c90a970d16a92f-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_51c8bd5e64a742ca93c90a970d16a92f-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_51c8bd5e64a742ca93c90a970d16a92f-3" name="rest_code_51c8bd5e64a742ca93c90a970d16a92f-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_51c8bd5e64a742ca93c90a970d16a92f-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_51c8bd5e64a742ca93c90a970d16a92f-4" name="rest_code_51c8bd5e64a742ca93c90a970d16a92f-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_51c8bd5e64a742ca93c90a970d16a92f-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;a id="rest_code_51c8bd5e64a742ca93c90a970d16a92f-5" name="rest_code_51c8bd5e64a742ca93c90a970d16a92f-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_51c8bd5e64a742ca93c90a970d16a92f-5"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_51c8bd5e64a742ca93c90a970d16a92f-6" name="rest_code_51c8bd5e64a742ca93c90a970d16a92f-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_51c8bd5e64a742ca93c90a970d16a92f-6"&gt;&lt;/a&gt;&lt;span class="hll"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="c1"&gt;# already materialized&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_51c8bd5e64a742ca93c90a970d16a92f-7" name="rest_code_51c8bd5e64a742ca93c90a970d16a92f-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_51c8bd5e64a742ca93c90a970d16a92f-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"alloc"&lt;/span&gt;
&lt;a id="rest_code_51c8bd5e64a742ca93c90a970d16a92f-8" name="rest_code_51c8bd5e64a742ca93c90a970d16a92f-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_51c8bd5e64a742ca93c90a970d16a92f-8"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="c1"&gt;# put the alloc operation back into the trace&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_51c8bd5e64a742ca93c90a970d16a92f-9" name="rest_code_51c8bd5e64a742ca93c90a970d16a92f-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_51c8bd5e64a742ca93c90a970d16a92f-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_51c8bd5e64a742ca93c90a970d16a92f-10" name="rest_code_51c8bd5e64a742ca93c90a970d16a92f-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_51c8bd5e64a742ca93c90a970d16a92f-10"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="c1"&gt;# but only once&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_51c8bd5e64a742ca93c90a970d16a92f-11" name="rest_code_51c8bd5e64a742ca93c90a970d16a92f-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_51c8bd5e64a742ca93c90a970d16a92f-11"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_51c8bd5e64a742ca93c90a970d16a92f-12" name="rest_code_51c8bd5e64a742ca93c90a970d16a92f-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_51c8bd5e64a742ca93c90a970d16a92f-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_51c8bd5e64a742ca93c90a970d16a92f-13" name="rest_code_51c8bd5e64a742ca93c90a970d16a92f-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_51c8bd5e64a742ca93c90a970d16a92f-13"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# optimize_alloc_removal unchanged&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This fixes the problem, only one &lt;code class="docutils literal"&gt;alloc&lt;/code&gt; is created. This fix also allows
another test case to pass, one where we store a non-virtual into another
non-virtual, code which we cannot optimize at all:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-1" name="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_07b40a2b8e224f7db52e79a5f3287eeb-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_materialize_non_virtuals&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-2" name="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_07b40a2b8e224f7db52e79a5f3287eeb-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# in this example we store a non-virtual var1&lt;/span&gt;
&lt;a id="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-3" name="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_07b40a2b8e224f7db52e79a5f3287eeb-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# into another non-virtual var0&lt;/span&gt;
&lt;a id="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-4" name="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_07b40a2b8e224f7db52e79a5f3287eeb-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# this should just lead to no optimization at&lt;/span&gt;
&lt;a id="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-5" name="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_07b40a2b8e224f7db52e79a5f3287eeb-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# all&lt;/span&gt;
&lt;a id="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-6" name="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_07b40a2b8e224f7db52e79a5f3287eeb-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-7" name="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_07b40a2b8e224f7db52e79a5f3287eeb-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-8" name="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_07b40a2b8e224f7db52e79a5f3287eeb-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-9" name="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_07b40a2b8e224f7db52e79a5f3287eeb-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-10" name="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_07b40a2b8e224f7db52e79a5f3287eeb-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-11" name="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_07b40a2b8e224f7db52e79a5f3287eeb-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-12" name="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_07b40a2b8e224f7db52e79a5f3287eeb-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-13" name="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_07b40a2b8e224f7db52e79a5f3287eeb-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = getarg(1)&lt;/span&gt;
&lt;a id="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-14" name="rest_code_07b40a2b8e224f7db52e79a5f3287eeb-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_07b40a2b8e224f7db52e79a5f3287eeb-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar2 = store(optvar0, 0, optvar1)"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="version-4-materialization-of-constants"&gt;
&lt;h2&gt;Version 4: Materialization of Constants&lt;/h2&gt;
&lt;p&gt;Another straightforward extension is to support materializing constants. A
constant is never virtual, so materializing it should do nothing.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_27099929a51a4e33ab16e089d44a86d4-1" name="rest_code_27099929a51a4e33ab16e089d44a86d4-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27099929a51a4e33ab16e089d44a86d4-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_materialization_constants&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_27099929a51a4e33ab16e089d44a86d4-2" name="rest_code_27099929a51a4e33ab16e089d44a86d4-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27099929a51a4e33ab16e089d44a86d4-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# in this example we store the constant 17&lt;/span&gt;
&lt;a id="rest_code_27099929a51a4e33ab16e089d44a86d4-3" name="rest_code_27099929a51a4e33ab16e089d44a86d4-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27099929a51a4e33ab16e089d44a86d4-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# into the non-virtual var0&lt;/span&gt;
&lt;a id="rest_code_27099929a51a4e33ab16e089d44a86d4-4" name="rest_code_27099929a51a4e33ab16e089d44a86d4-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27099929a51a4e33ab16e089d44a86d4-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# again, this will not be optimized&lt;/span&gt;
&lt;a id="rest_code_27099929a51a4e33ab16e089d44a86d4-5" name="rest_code_27099929a51a4e33ab16e089d44a86d4-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27099929a51a4e33ab16e089d44a86d4-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_27099929a51a4e33ab16e089d44a86d4-6" name="rest_code_27099929a51a4e33ab16e089d44a86d4-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27099929a51a4e33ab16e089d44a86d4-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_27099929a51a4e33ab16e089d44a86d4-7" name="rest_code_27099929a51a4e33ab16e089d44a86d4-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27099929a51a4e33ab16e089d44a86d4-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_27099929a51a4e33ab16e089d44a86d4-8" name="rest_code_27099929a51a4e33ab16e089d44a86d4-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27099929a51a4e33ab16e089d44a86d4-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_27099929a51a4e33ab16e089d44a86d4-9" name="rest_code_27099929a51a4e33ab16e089d44a86d4-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27099929a51a4e33ab16e089d44a86d4-9"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# the previous line fails so far, triggering&lt;/span&gt;
&lt;a id="rest_code_27099929a51a4e33ab16e089d44a86d4-10" name="rest_code_27099929a51a4e33ab16e089d44a86d4-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27099929a51a4e33ab16e089d44a86d4-10"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# the assert:&lt;/span&gt;
&lt;a id="rest_code_27099929a51a4e33ab16e089d44a86d4-11" name="rest_code_27099929a51a4e33ab16e089d44a86d4-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27099929a51a4e33ab16e089d44a86d4-11"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# assert not isinstance(value, Constant)&lt;/span&gt;
&lt;a id="rest_code_27099929a51a4e33ab16e089d44a86d4-12" name="rest_code_27099929a51a4e33ab16e089d44a86d4-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27099929a51a4e33ab16e089d44a86d4-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# in materialize&lt;/span&gt;
&lt;a id="rest_code_27099929a51a4e33ab16e089d44a86d4-13" name="rest_code_27099929a51a4e33ab16e089d44a86d4-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27099929a51a4e33ab16e089d44a86d4-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_27099929a51a4e33ab16e089d44a86d4-14" name="rest_code_27099929a51a4e33ab16e089d44a86d4-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27099929a51a4e33ab16e089d44a86d4-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_27099929a51a4e33ab16e089d44a86d4-15" name="rest_code_27099929a51a4e33ab16e089d44a86d4-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27099929a51a4e33ab16e089d44a86d4-15"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = store(optvar0, 0, 17)"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To implement that case, we check for &lt;code class="docutils literal"&gt;value&lt;/code&gt; being a constant and return
early:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_387b06762c224ef5805901bb1d205045-1" name="rest_code_387b06762c224ef5805901bb1d205045-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_387b06762c224ef5805901bb1d205045-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;materialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_387b06762c224ef5805901bb1d205045-2" name="rest_code_387b06762c224ef5805901bb1d205045-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_387b06762c224ef5805901bb1d205045-2"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_387b06762c224ef5805901bb1d205045-3" name="rest_code_387b06762c224ef5805901bb1d205045-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_387b06762c224ef5805901bb1d205045-3"&gt;&lt;/a&gt;&lt;span class="hll"&gt;        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_387b06762c224ef5805901bb1d205045-4" name="rest_code_387b06762c224ef5805901bb1d205045-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_387b06762c224ef5805901bb1d205045-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_387b06762c224ef5805901bb1d205045-5" name="rest_code_387b06762c224ef5805901bb1d205045-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_387b06762c224ef5805901bb1d205045-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;a id="rest_code_387b06762c224ef5805901bb1d205045-6" name="rest_code_387b06762c224ef5805901bb1d205045-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_387b06762c224ef5805901bb1d205045-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_387b06762c224ef5805901bb1d205045-7" name="rest_code_387b06762c224ef5805901bb1d205045-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_387b06762c224ef5805901bb1d205045-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="c1"&gt;# already materialized&lt;/span&gt;
&lt;a id="rest_code_387b06762c224ef5805901bb1d205045-8" name="rest_code_387b06762c224ef5805901bb1d205045-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_387b06762c224ef5805901bb1d205045-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"alloc"&lt;/span&gt;
&lt;a id="rest_code_387b06762c224ef5805901bb1d205045-9" name="rest_code_387b06762c224ef5805901bb1d205045-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_387b06762c224ef5805901bb1d205045-9"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# put the alloc operation back into the trace&lt;/span&gt;
&lt;a id="rest_code_387b06762c224ef5805901bb1d205045-10" name="rest_code_387b06762c224ef5805901bb1d205045-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_387b06762c224ef5805901bb1d205045-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_387b06762c224ef5805901bb1d205045-11" name="rest_code_387b06762c224ef5805901bb1d205045-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_387b06762c224ef5805901bb1d205045-11"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# but only once&lt;/span&gt;
&lt;a id="rest_code_387b06762c224ef5805901bb1d205045-12" name="rest_code_387b06762c224ef5805901bb1d205045-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_387b06762c224ef5805901bb1d205045-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a id="rest_code_387b06762c224ef5805901bb1d205045-13" name="rest_code_387b06762c224ef5805901bb1d205045-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_387b06762c224ef5805901bb1d205045-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_387b06762c224ef5805901bb1d205045-14" name="rest_code_387b06762c224ef5805901bb1d205045-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_387b06762c224ef5805901bb1d205045-14"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# optimize_alloc_removal unchanged&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="version-5-materializing-fields"&gt;
&lt;h2&gt;Version 5: Materializing Fields&lt;/h2&gt;
&lt;p&gt;Now we need to solve a more difficult problem. So far, the virtual objects that
we have materialized have all been empty, meaning they didn't have any fields
written to at the point of materialization. Let's write a test for this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-1" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_materialize_fields&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-2" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-3" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-4" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-5" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-6" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;contents0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-7" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;contents1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-8" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-9" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-10" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-10"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# the virtual obj looks like this&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-11" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-11"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#  obj&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-12" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ┌──────┬──────────┐&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-13" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# │ 0: 8 │ 1: var1  │&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-14" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-14"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# └──────┴──────────┘&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-15" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-15"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# then it needs to be materialized&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-16" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-16"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# this is the first example where a virtual&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-17" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-17"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# object that we want to materialize has any&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-18" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-18" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-18"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# content and is not just an empty object&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-19" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-19" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-20" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-20" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-21" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-21" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-21"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-22" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-22" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-22"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = getarg(1)&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-23" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-23" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-23"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar2 = alloc()&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-24" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-24" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-24"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar3 = store(optvar2, 0, 8)&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-25" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-25" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-25"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar4 = store(optvar2, 1, optvar1)&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-26" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-26" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-26"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar5 = store(optvar0, 0, optvar2)"""&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-27" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-27" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-27"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# fails so far! the operations we get&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-28" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-28" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-28"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# at the moment are:&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-29" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-29" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-29"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-30" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-30" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-30"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# optvar1 = getarg(1)&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-31" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-31" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-31"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# optvar2 = alloc()&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-32" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-32" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-32"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# optvar3 = store(optvar0, 0, optvar2)&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-33" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-33" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-33"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# which is wrong, because the store operations&lt;/span&gt;
&lt;a id="rest_code_3ed8e753c9154fabbf5e9214142afbe9-34" name="rest_code_3ed8e753c9154fabbf5e9214142afbe9-34" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_3ed8e753c9154fabbf5e9214142afbe9-34"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# into optvar1 got lost&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To fix this problem, we need to re-create a &lt;code class="docutils literal"&gt;store&lt;/code&gt; operation for every
element of the &lt;code class="docutils literal"&gt;.contents&lt;/code&gt; dictionary of the virtual object we are
materializing. &lt;a class="reference internal" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#target-5"&gt;²&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-1" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;materialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-2" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-3" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-3"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-4" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-5" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-6" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-7" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="c1"&gt;# already materialized&lt;/span&gt;
&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-8" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"alloc"&lt;/span&gt;
&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-9" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-9"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# put the alloc operation back into the trace&lt;/span&gt;
&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-10" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-11" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-11"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="c1"&gt;# put the content back&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-12" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-12"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-13" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-13"&gt;&lt;/a&gt;&lt;span class="hll"&gt;        &lt;span class="c1"&gt;# re-create store operation&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-14" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-14"&gt;&lt;/a&gt;&lt;span class="hll"&gt;        &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-15" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-15"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# only materialize once&lt;/span&gt;
&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-16" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-17" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-17"&gt;&lt;/a&gt;
&lt;a id="rest_code_cd7b3822ecac4fae8e718375c3bb2758-18" name="rest_code_cd7b3822ecac4fae8e718375c3bb2758-18" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_cd7b3822ecac4fae8e718375c3bb2758-18"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# optimize_alloc_removal unchanged&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is enough to pass the test.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="version-6-recursive-materialization"&gt;
&lt;h2&gt;Version 6: Recursive Materialization&lt;/h2&gt;
&lt;p&gt;In the above example, the fields of the virtual objects contained
only constants or non-virtual objects. However, we could have a situation where
a whole tree of virtual objects is built, and then the root of the tree escapes.
This makes it necessary to escape the whole tree. Let's write a test for a small
tree of two virtual objects:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-1" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_materialize_chained_objects&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-2" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-3" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-4" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;obj0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-5" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-6" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-7" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-8" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-9" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-9"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#  obj0&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-10" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-10"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ┌──────┐&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-11" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-11"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# │ 0: ╷ │&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-12" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# └────┼─┘&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-13" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#      │&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-14" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-14"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#      ▼&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-15" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-15"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#     obj1&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-16" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-16"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#   ┌─────────┐&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-17" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-17"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#   │ 0: 1337 │&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-18" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-18" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-18"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#   └─────────┘&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-19" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-19" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-19"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# now obj0 escapes&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-20" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-20" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-21" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-21" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-21"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-22" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-22" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-22"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-23" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-23" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-23"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = alloc()&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-24" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-24" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-24"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar2 = alloc()&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-25" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-25" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-25"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar3 = store(optvar2, 0, 1337)&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-26" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-26" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-26"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar4 = store(optvar1, 0, optvar2)&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-27" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-27" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-27"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar5 = store(optvar0, 0, optvar1)"""&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-28" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-28" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-28"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# fails in an annoying way! the resulting&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-29" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-29" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-29"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# basic block is not in proper SSA form&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-30" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-30" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-30"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# so printing it fails. The optimized&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-31" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-31" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-31"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# block would look like this:&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-32" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-32" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-32"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-33" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-33" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-33"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# optvar1 = alloc()&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-34" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-34" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-34"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# optvar3 = store(optvar1, 0, optvar2)&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-35" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-35" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-35"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# optvar4 = store(optvar0, 0, optvar1)&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-36" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-36" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-36"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# where optvar2 is an ``alloc`` Operation&lt;/span&gt;
&lt;a id="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-37" name="rest_code_ff02ac407b134f2d8494d699ed6f1ca7-37" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ff02ac407b134f2d8494d699ed6f1ca7-37"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# that is not itself in the output block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To fix it, &lt;code class="docutils literal"&gt;materialize&lt;/code&gt; needs to call itself recursively for all the field
values of the virtual object:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-1" name="rest_code_27177a34a73544cc9837c917f98bbb95-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;materialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-2" name="rest_code_27177a34a73544cc9837c917f98bbb95-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-3" name="rest_code_27177a34a73544cc9837c917f98bbb95-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-3"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-4" name="rest_code_27177a34a73544cc9837c917f98bbb95-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-5" name="rest_code_27177a34a73544cc9837c917f98bbb95-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-6" name="rest_code_27177a34a73544cc9837c917f98bbb95-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-7" name="rest_code_27177a34a73544cc9837c917f98bbb95-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="c1"&gt;# already materialized&lt;/span&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-8" name="rest_code_27177a34a73544cc9837c917f98bbb95-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"alloc"&lt;/span&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-9" name="rest_code_27177a34a73544cc9837c917f98bbb95-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-9"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# put the alloc operation back into the trace&lt;/span&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-10" name="rest_code_27177a34a73544cc9837c917f98bbb95-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-11" name="rest_code_27177a34a73544cc9837c917f98bbb95-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-11"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# put the content back&lt;/span&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-12" name="rest_code_27177a34a73544cc9837c917f98bbb95-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-12"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-13" name="rest_code_27177a34a73544cc9837c917f98bbb95-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-13"&gt;&lt;/a&gt;&lt;span class="hll"&gt;        &lt;span class="c1"&gt;# materialize recursively&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-14" name="rest_code_27177a34a73544cc9837c917f98bbb95-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-14"&gt;&lt;/a&gt;&lt;span class="hll"&gt;        &lt;span class="n"&gt;materialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-15" name="rest_code_27177a34a73544cc9837c917f98bbb95-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-16" name="rest_code_27177a34a73544cc9837c917f98bbb95-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-16"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# only materialize once&lt;/span&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-17" name="rest_code_27177a34a73544cc9837c917f98bbb95-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-18" name="rest_code_27177a34a73544cc9837c917f98bbb95-18" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-18"&gt;&lt;/a&gt;
&lt;a id="rest_code_27177a34a73544cc9837c917f98bbb95-19" name="rest_code_27177a34a73544cc9837c917f98bbb95-19" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_27177a34a73544cc9837c917f98bbb95-19"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# optimize_alloc_removal unchanged&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Getting there, the materialization logic is almost done. We need to fix a
subtle remaining problem though.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="version-7-dealing-with-object-cycles"&gt;
&lt;h2&gt;Version 7: Dealing with Object Cycles&lt;/h2&gt;
&lt;p&gt;The bug we need to fix in this section is a bit tricky, and does not immediately
occur in a lot of programs. In
fact, in PyPy a variant of it was hiding out in our optimizer
until we found it much later (despite us being aware of the general problem and
correctly dealing with it in other cases).&lt;/p&gt;
&lt;p&gt;The problem is this: a virtual object can (directly or indirectly) point to
itself, and we must carefully deal with that case to avoid infinite recursion in
&lt;code class="docutils literal"&gt;materialize&lt;/code&gt;. Here's the simplest test:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-1" name="rest_code_4a6b175045e848a28837f4e538cec11b-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_object_graph_cycles&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-2" name="rest_code_4a6b175045e848a28837f4e538cec11b-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-3" name="rest_code_4a6b175045e848a28837f4e538cec11b-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-4" name="rest_code_4a6b175045e848a28837f4e538cec11b-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-5" name="rest_code_4a6b175045e848a28837f4e538cec11b-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-6" name="rest_code_4a6b175045e848a28837f4e538cec11b-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-7" name="rest_code_4a6b175045e848a28837f4e538cec11b-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-7"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#   ┌────────┐&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-8" name="rest_code_4a6b175045e848a28837f4e538cec11b-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-8"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#   ▼        │&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-9" name="rest_code_4a6b175045e848a28837f4e538cec11b-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-9"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#  obj0      │&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-10" name="rest_code_4a6b175045e848a28837f4e538cec11b-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-10"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ┌──────┐   │&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-11" name="rest_code_4a6b175045e848a28837f4e538cec11b-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-11"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# │ 0: ╷ │   │&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-12" name="rest_code_4a6b175045e848a28837f4e538cec11b-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# └────┼─┘   │&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-13" name="rest_code_4a6b175045e848a28837f4e538cec11b-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#      │     │&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-14" name="rest_code_4a6b175045e848a28837f4e538cec11b-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-14"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#      └─────┘&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-15" name="rest_code_4a6b175045e848a28837f4e538cec11b-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-15"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# obj0 points to itself, and then it is&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-16" name="rest_code_4a6b175045e848a28837f4e538cec11b-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-16"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# escaped&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-17" name="rest_code_4a6b175045e848a28837f4e538cec11b-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-18" name="rest_code_4a6b175045e848a28837f4e538cec11b-18" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-18"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# the previous line fails with an&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-19" name="rest_code_4a6b175045e848a28837f4e538cec11b-19" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-19"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# InfiniteRecursionError&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-20" name="rest_code_4a6b175045e848a28837f4e538cec11b-20" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-20"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# materialize calls itself, infinitely&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-21" name="rest_code_4a6b175045e848a28837f4e538cec11b-21" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-21"&gt;&lt;/a&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-22" name="rest_code_4a6b175045e848a28837f4e538cec11b-22" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-22"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# what we want is instead this output:&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-23" name="rest_code_4a6b175045e848a28837f4e538cec11b-23" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-23"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-24" name="rest_code_4a6b175045e848a28837f4e538cec11b-24" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-24"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-25" name="rest_code_4a6b175045e848a28837f4e538cec11b-25" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-25"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = alloc()&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-26" name="rest_code_4a6b175045e848a28837f4e538cec11b-26" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-26"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar2 = store(optvar1, 0, optvar1)&lt;/span&gt;
&lt;a id="rest_code_4a6b175045e848a28837f4e538cec11b-27" name="rest_code_4a6b175045e848a28837f4e538cec11b-27" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_4a6b175045e848a28837f4e538cec11b-27"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar3 = store(optvar0, 1, optvar1)"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The fix is not a big change, but a little bit subtle nevertheless.
We have to change the
order in which things are done in &lt;code class="docutils literal"&gt;materialize&lt;/code&gt;. Right after emitting the
&lt;code class="docutils literal"&gt;alloc&lt;/code&gt;, we set the &lt;code class="docutils literal"&gt;.info&lt;/code&gt; to &lt;code class="docutils literal"&gt;None&lt;/code&gt;, to mark the object as not virtual.
Only &lt;em&gt;afterwards&lt;/em&gt; do we re-create the stores and call &lt;code class="docutils literal"&gt;materialize&lt;/code&gt; recursively.
If a recursive call reaches the same object, it's already marked as non-virtual,
so &lt;code class="docutils literal"&gt;materialize&lt;/code&gt; won't recurse further:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-1" name="rest_code_dddc53240ddd40529a69442d80c5471d-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;materialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-2" name="rest_code_dddc53240ddd40529a69442d80c5471d-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-3" name="rest_code_dddc53240ddd40529a69442d80c5471d-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-3"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-4" name="rest_code_dddc53240ddd40529a69442d80c5471d-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-5" name="rest_code_dddc53240ddd40529a69442d80c5471d-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-6" name="rest_code_dddc53240ddd40529a69442d80c5471d-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-7" name="rest_code_dddc53240ddd40529a69442d80c5471d-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="c1"&gt;# already materialized&lt;/span&gt;
&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-8" name="rest_code_dddc53240ddd40529a69442d80c5471d-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"alloc"&lt;/span&gt;
&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-9" name="rest_code_dddc53240ddd40529a69442d80c5471d-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-9"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# put the alloc operation back into the trace&lt;/span&gt;
&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-10" name="rest_code_dddc53240ddd40529a69442d80c5471d-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-11" name="rest_code_dddc53240ddd40529a69442d80c5471d-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-11"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="c1"&gt;# only materialize once&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-12" name="rest_code_dddc53240ddd40529a69442d80c5471d-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-12"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-13" name="rest_code_dddc53240ddd40529a69442d80c5471d-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-13"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="c1"&gt;# put the content back&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-14" name="rest_code_dddc53240ddd40529a69442d80c5471d-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-14"&gt;&lt;/a&gt;&lt;span class="hll"&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-15" name="rest_code_dddc53240ddd40529a69442d80c5471d-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-15"&gt;&lt;/a&gt;&lt;span class="hll"&gt;        &lt;span class="c1"&gt;# materialize recursively&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-16" name="rest_code_dddc53240ddd40529a69442d80c5471d-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-16"&gt;&lt;/a&gt;&lt;span class="hll"&gt;        &lt;span class="n"&gt;materialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_dddc53240ddd40529a69442d80c5471d-17" name="rest_code_dddc53240ddd40529a69442d80c5471d-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_dddc53240ddd40529a69442d80c5471d-17"&gt;&lt;/a&gt;&lt;span class="hll"&gt;        &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="version-8-loading-from-non-virtual-objects"&gt;
&lt;h2&gt;Version 8: Loading from non-virtual objects&lt;/h2&gt;
&lt;p&gt;Now materialize is done. We need to go back to &lt;code class="docutils literal"&gt;optimize_alloc_removal&lt;/code&gt; and
improve it further. The last time we changed it, we added a case analysis to the
code dealing with &lt;code class="docutils literal"&gt;store&lt;/code&gt;, distinguishing between storing to a virtual and to
a non-virtual object. We need to add an equivalent distinction to the &lt;code class="docutils literal"&gt;load&lt;/code&gt;
case, because right now loading from a non-virtual crashes.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-1" name="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ba7d0bc47a0d462da6591b08370ec9c4-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_load_non_virtual&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-2" name="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ba7d0bc47a0d462da6591b08370ec9c4-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-3" name="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ba7d0bc47a0d462da6591b08370ec9c4-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-4" name="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ba7d0bc47a0d462da6591b08370ec9c4-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-5" name="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ba7d0bc47a0d462da6591b08370ec9c4-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-6" name="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ba7d0bc47a0d462da6591b08370ec9c4-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# the next line fails in the line&lt;/span&gt;
&lt;a id="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-7" name="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ba7d0bc47a0d462da6591b08370ec9c4-7"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# op.make_equal_to(info.load(field))&lt;/span&gt;
&lt;a id="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-8" name="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ba7d0bc47a0d462da6591b08370ec9c4-8"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# because info is None&lt;/span&gt;
&lt;a id="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-9" name="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ba7d0bc47a0d462da6591b08370ec9c4-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-10" name="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ba7d0bc47a0d462da6591b08370ec9c4-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-11" name="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ba7d0bc47a0d462da6591b08370ec9c4-11"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-12" name="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ba7d0bc47a0d462da6591b08370ec9c4-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = load(optvar0, 0)&lt;/span&gt;
&lt;a id="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-13" name="rest_code_ba7d0bc47a0d462da6591b08370ec9c4-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_ba7d0bc47a0d462da6591b08370ec9c4-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar2 = print(optvar1)"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To fix it, we split the &lt;code class="docutils literal"&gt;load&lt;/code&gt; code into two cases, leaving the virtual path
as before, and letting the &lt;code class="docutils literal"&gt;load&lt;/code&gt; from a non-virtual fall through to the
general code at the end of the function.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-1" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-2" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-3" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-4" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"alloc"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-5" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-5"&gt;&lt;/a&gt;            &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VirtualObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-6" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-6"&gt;&lt;/a&gt;            &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-7" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"load"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-8" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-8"&gt;&lt;/a&gt;            &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-9" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-9"&gt;&lt;/a&gt;&lt;span class="hll"&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# virtual&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-10" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-10"&gt;&lt;/a&gt;&lt;span class="hll"&gt;                &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-11" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-11"&gt;&lt;/a&gt;&lt;span class="hll"&gt;                &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-12" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-12"&gt;&lt;/a&gt;&lt;span class="hll"&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-13" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-13"&gt;&lt;/a&gt;&lt;span class="hll"&gt;            &lt;span class="c1"&gt;# otherwise not virtual, use the&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-14" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-14"&gt;&lt;/a&gt;&lt;span class="hll"&gt;            &lt;span class="c1"&gt;# general path below&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-15" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-15"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"store"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-16" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-16"&gt;&lt;/a&gt;            &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-17" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-17"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# virtual&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-18" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-18" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-18"&gt;&lt;/a&gt;                &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-19" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-19" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-19"&gt;&lt;/a&gt;                &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-20" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-20" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-20"&gt;&lt;/a&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-21" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-21" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-21"&gt;&lt;/a&gt;            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# not virtual&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-22" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-22" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-22"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# first materialize the&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-23" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-23" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-23"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# right hand side&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-24" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-24" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-24"&gt;&lt;/a&gt;                &lt;span class="n"&gt;materialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-25" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-25" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-25"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# then emit the store via&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-26" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-26" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-26"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# the general path below&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-27" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-27" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-27"&gt;&lt;/a&gt;        &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-28" name="rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-28" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b2ec32770e0a424ea4ec8bb37c1567c1-28"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;opt_bb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="version-9-final-materialize-on-other-operations"&gt;
&lt;h2&gt;Version 9 (Final): Materialize on Other Operations&lt;/h2&gt;
&lt;p&gt;We're almost at the end now. There's one final generalization left to do. We
started with the heuristic that storing a virtual into a non-virtual would
escape it. This should be generalized. Every time we pass a virtual into any
operation where it is not the first argument of a &lt;code class="docutils literal"&gt;load&lt;/code&gt; and a &lt;code class="docutils literal"&gt;store&lt;/code&gt;
should also escape it (imagine passing the virtual to some function call).
Let's test this as usual with our &lt;code class="docutils literal"&gt;print&lt;/code&gt; operation:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_9e2666b30d6345dc9df789b2327ad059-1" name="rest_code_9e2666b30d6345dc9df789b2327ad059-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_9e2666b30d6345dc9df789b2327ad059-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_materialize_on_other_ops&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_9e2666b30d6345dc9df789b2327ad059-2" name="rest_code_9e2666b30d6345dc9df789b2327ad059-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_9e2666b30d6345dc9df789b2327ad059-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# materialize not just on store&lt;/span&gt;
&lt;a id="rest_code_9e2666b30d6345dc9df789b2327ad059-3" name="rest_code_9e2666b30d6345dc9df789b2327ad059-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_9e2666b30d6345dc9df789b2327ad059-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_9e2666b30d6345dc9df789b2327ad059-4" name="rest_code_9e2666b30d6345dc9df789b2327ad059-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_9e2666b30d6345dc9df789b2327ad059-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_9e2666b30d6345dc9df789b2327ad059-5" name="rest_code_9e2666b30d6345dc9df789b2327ad059-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_9e2666b30d6345dc9df789b2327ad059-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_9e2666b30d6345dc9df789b2327ad059-6" name="rest_code_9e2666b30d6345dc9df789b2327ad059-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_9e2666b30d6345dc9df789b2327ad059-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_9e2666b30d6345dc9df789b2327ad059-7" name="rest_code_9e2666b30d6345dc9df789b2327ad059-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_9e2666b30d6345dc9df789b2327ad059-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_9e2666b30d6345dc9df789b2327ad059-8" name="rest_code_9e2666b30d6345dc9df789b2327ad059-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_9e2666b30d6345dc9df789b2327ad059-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_9e2666b30d6345dc9df789b2327ad059-9" name="rest_code_9e2666b30d6345dc9df789b2327ad059-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_9e2666b30d6345dc9df789b2327ad059-9"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_9e2666b30d6345dc9df789b2327ad059-10" name="rest_code_9e2666b30d6345dc9df789b2327ad059-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_9e2666b30d6345dc9df789b2327ad059-10"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = alloc()&lt;/span&gt;
&lt;a id="rest_code_9e2666b30d6345dc9df789b2327ad059-11" name="rest_code_9e2666b30d6345dc9df789b2327ad059-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_9e2666b30d6345dc9df789b2327ad059-11"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar2 = print(optvar1)"""&lt;/span&gt;
&lt;a id="rest_code_9e2666b30d6345dc9df789b2327ad059-12" name="rest_code_9e2666b30d6345dc9df789b2327ad059-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_9e2666b30d6345dc9df789b2327ad059-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# again, the resulting basic block is not in&lt;/span&gt;
&lt;a id="rest_code_9e2666b30d6345dc9df789b2327ad059-13" name="rest_code_9e2666b30d6345dc9df789b2327ad059-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_9e2666b30d6345dc9df789b2327ad059-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# valid SSA form&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To fix this, we will take the call to &lt;code class="docutils literal"&gt;materialize&lt;/code&gt; out of the &lt;code class="docutils literal"&gt;store&lt;/code&gt; code
path and instead put it into the generic code path the end of the &lt;code class="docutils literal"&gt;while&lt;/code&gt;
loop:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-1" name="rest_code_b308a95053064308bea999d5bcf1d83e-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# materialize is unchanged&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-2" name="rest_code_b308a95053064308bea999d5bcf1d83e-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;materialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-3" name="rest_code_b308a95053064308bea999d5bcf1d83e-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-4" name="rest_code_b308a95053064308bea999d5bcf1d83e-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-5" name="rest_code_b308a95053064308bea999d5bcf1d83e-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-6" name="rest_code_b308a95053064308bea999d5bcf1d83e-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-7" name="rest_code_b308a95053064308bea999d5bcf1d83e-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-8" name="rest_code_b308a95053064308bea999d5bcf1d83e-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-8"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# Already materialized&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-9" name="rest_code_b308a95053064308bea999d5bcf1d83e-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-10" name="rest_code_b308a95053064308bea999d5bcf1d83e-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"alloc"&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-11" name="rest_code_b308a95053064308bea999d5bcf1d83e-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-12" name="rest_code_b308a95053064308bea999d5bcf1d83e-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-13" name="rest_code_b308a95053064308bea999d5bcf1d83e-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-14" name="rest_code_b308a95053064308bea999d5bcf1d83e-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-14"&gt;&lt;/a&gt;        &lt;span class="n"&gt;materialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-15" name="rest_code_b308a95053064308bea999d5bcf1d83e-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-16" name="rest_code_b308a95053064308bea999d5bcf1d83e-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-16"&gt;&lt;/a&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-17" name="rest_code_b308a95053064308bea999d5bcf1d83e-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-18" name="rest_code_b308a95053064308bea999d5bcf1d83e-18" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-18"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-19" name="rest_code_b308a95053064308bea999d5bcf1d83e-19" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-19"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-20" name="rest_code_b308a95053064308bea999d5bcf1d83e-20" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-20"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"alloc"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-21" name="rest_code_b308a95053064308bea999d5bcf1d83e-21" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-21"&gt;&lt;/a&gt;            &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VirtualObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-22" name="rest_code_b308a95053064308bea999d5bcf1d83e-22" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-22"&gt;&lt;/a&gt;            &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-23" name="rest_code_b308a95053064308bea999d5bcf1d83e-23" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-23"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"load"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-24" name="rest_code_b308a95053064308bea999d5bcf1d83e-24" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-24"&gt;&lt;/a&gt;            &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-25" name="rest_code_b308a95053064308bea999d5bcf1d83e-25" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-25"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# virtual&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-26" name="rest_code_b308a95053064308bea999d5bcf1d83e-26" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-26"&gt;&lt;/a&gt;                &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-27" name="rest_code_b308a95053064308bea999d5bcf1d83e-27" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-27"&gt;&lt;/a&gt;                &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-28" name="rest_code_b308a95053064308bea999d5bcf1d83e-28" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-28"&gt;&lt;/a&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-29" name="rest_code_b308a95053064308bea999d5bcf1d83e-29" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-29"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"store"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-30" name="rest_code_b308a95053064308bea999d5bcf1d83e-30" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-30"&gt;&lt;/a&gt;            &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-31" name="rest_code_b308a95053064308bea999d5bcf1d83e-31" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-31"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# virtual&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-32" name="rest_code_b308a95053064308bea999d5bcf1d83e-32" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-32"&gt;&lt;/a&gt;                &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-33" name="rest_code_b308a95053064308bea999d5bcf1d83e-33" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-33"&gt;&lt;/a&gt;                &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-34" name="rest_code_b308a95053064308bea999d5bcf1d83e-34" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-34"&gt;&lt;/a&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-35" name="rest_code_b308a95053064308bea999d5bcf1d83e-35" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-35"&gt;&lt;/a&gt;&lt;span class="hll"&gt;        &lt;span class="c1"&gt;# materialize all the arguments of&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-36" name="rest_code_b308a95053064308bea999d5bcf1d83e-36" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-36"&gt;&lt;/a&gt;&lt;span class="hll"&gt;        &lt;span class="c1"&gt;# operations that are put into the&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-37" name="rest_code_b308a95053064308bea999d5bcf1d83e-37" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-37"&gt;&lt;/a&gt;&lt;span class="hll"&gt;        &lt;span class="c1"&gt;# output basic block&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-38" name="rest_code_b308a95053064308bea999d5bcf1d83e-38" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-38"&gt;&lt;/a&gt;&lt;span class="hll"&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-39" name="rest_code_b308a95053064308bea999d5bcf1d83e-39" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-39"&gt;&lt;/a&gt;&lt;span class="hll"&gt;            &lt;span class="n"&gt;materialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-40" name="rest_code_b308a95053064308bea999d5bcf1d83e-40" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-40"&gt;&lt;/a&gt;        &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b308a95053064308bea999d5bcf1d83e-41" name="rest_code_b308a95053064308bea999d5bcf1d83e-41" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b308a95053064308bea999d5bcf1d83e-41"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;opt_bb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it, we're done. It's not a lot of code, but actually quite a powerful
optimization. In addition to removing allocations for objects that are only used
briefly and in predictable ways, it also has another effect. If an object is
allocated, used in a number of operations and then escapes further down in the
block, the operations in between can often be optimized away. This is
demonstrated by the next test (which already passes):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-1" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-1" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sink_allocations&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-2" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-2" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-3" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-3" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-4" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-4" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-5" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-5" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-6" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-6" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-7" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-7" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-8" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-8" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-9" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-9" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var6&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-10" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-10" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var7&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-11" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-11" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-12" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-12" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimize_alloc_removal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-13" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-13" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-14" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-14" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-15" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-15" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-15"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = add(123, 456)&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-16" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-16" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-16"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar2 = alloc()&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-17" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-17" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-17"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar3 = store(optvar2, 0, optvar1)&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-18" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-18" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-18"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar4 = store(optvar2, 1, 456)&lt;/span&gt;
&lt;a id="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-19" name="rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-19" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html#rest_code_b0c311d17d9a48e99333d69e8b5a3fe1-19"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar5 = store(optvar0, 1, optvar2)"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the addition is not optimized away, because the code from this blog
post does not contain constant folding and the other optimizations from
the last one. Combining them would not be too hard though.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That's it! The core idea of PyPy's allocation removal optimization in one or
two screens of code. The real implementation has a number of refinements,
but the core ideas are all here.&lt;/p&gt;
&lt;p&gt;I'm not going to show any benchmark numbers or anything like that here, if you
are interested in numbers you could look at the evaluation Section 6.
"Implementation and Evaluation" of the &lt;a class="reference external" href="https://www3.hhu.de/stups/downloads/pdf/BoCuFiLePeRi2011.pdf"&gt;paper&lt;/a&gt; that describes the work.&lt;/p&gt;
&lt;p&gt;There's a complementary optimization that improves &lt;code class="docutils literal"&gt;load&lt;/code&gt; and &lt;code class="docutils literal"&gt;store&lt;/code&gt;
operations for objects that are &lt;em&gt;not&lt;/em&gt; virtual. I'll probably not write that
down as another post, but &lt;a class="reference external" href="https://bernsteinbear.com/"&gt;Max Bernstein&lt;/a&gt; and I developed that together on a
&lt;a class="reference external" href="https://www.pypy.org/posts/2022/10/twitch.tv/pypyproject"&gt;PyPy Twitch channel&lt;/a&gt; channel a few weeks ago, here's the recording:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/w-UHg0yOPSE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;/section&gt;
&lt;section id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p id="target-4"&gt;¹ This is how PyPy uses the terminology, not really used consistently by other
projects. The term "escape" is fairly standard throughout the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Escape_analysis"&gt;escape
analysis&lt;/a&gt; literature. The term "virtual" was used originally in &lt;a class="reference external" href="https://dl.acm.org/doi/abs/10.1145/1014007.1014010"&gt;Armin Rigo's
Psyco&lt;/a&gt; but is e.g. also used by the paper &lt;a class="reference external" href="https://www.ssw.uni-linz.ac.at/Research/Papers/Stadler14/Stadler2014-CGO-PEA.pdf"&gt;Partial Escape Analysis and Scalar
Replacement for Java&lt;/a&gt;.&lt;/p&gt;
&lt;p id="target-5"&gt;² The order in which we put the &lt;cite&gt;store&lt;/cite&gt; operations back is relying on
dictionary iteration order, which is insertion order. That's not a bad
ordering, we could also be explicit and sort the fields in some order (ideally
the order in which the object lays them out in memory).&lt;/p&gt;
&lt;/section&gt;</description><category>toy-optimizer</category><guid>https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html</guid><pubDate>Tue, 25 Oct 2022 07:55:00 GMT</pubDate></item><item><title>Düsseldorf HPy/PyPy/GraalPy sprint September 19-23rd 2022</title><link>https://www.pypy.org/posts/2022/07/ddorf-sprint-sep-2022.html</link><dc:creator>Carl Friedrich Bolz-Tereick</dc:creator><description>&lt;p&gt;The programming language group of the Computer Science department of
Heinrich-Heine Universität Düsseldorf is happy to invite everybody to another
sprint in Düsseldorf, from the 19th to the 23rd of September 2022. This is a
fully public sprint, everyone and particularly newcomers are welcome to join
us! The goal is to bring together people from the &lt;a class="reference external" href="https://hpyproject.org/"&gt;HPy&lt;/a&gt;, PyPy, &lt;a class="reference external" href="https://www.graalvm.org/python/"&gt;GraalPy&lt;/a&gt; and
CPython communities.&lt;/p&gt;
&lt;section id="topics-and-goals"&gt;
&lt;h2&gt;Topics and goals&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;work on HPy APIs, discussions around next steps for the project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;continuing new and ongoing ports to HPy, including Cython, NumPy, Pillow, Matplotlib&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3.10 support on PyPy and GraalPy&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;preparing the next PyPy release&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;discussions around ways to improve collaboration between the different Python
implementations&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="what-is-a-sprint"&gt;
&lt;h2&gt;What is a sprint?&lt;/h2&gt;
&lt;p&gt;The experience of the PyPy project has shown the benefits of regular
sprints. They are focussed one week physical meetings where people pair-program
on new features and discuss future plans. Coming to one is a great way to get
started with a project!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;p&gt;The sprint will take place in a seminar room of the computer science
department.  It is in the building 25.12, room 02.50 (second floor) of the
university campus. For travel instructions see&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.cs.hhu.de/lehrstuehle-und-arbeitsgruppen/softwaretechnik-und-programmiersprachen/kontakt/service/lage-und-anreise"&gt;https://www.cs.hhu.de/lehrstuehle-und-arbeitsgruppen/softwaretechnik-und-programmiersprachen/kontakt/service/lage-und-anreise&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We ask participants to wear masks during the indoor working hours.&lt;/p&gt;
&lt;figure&gt;
&lt;a class="reference external image-reference" href="https://commons.wikimedia.org/wiki/File:Universitaets-_und_Landesbibliothek_Duesseldorf_in_Duesseldorf-Bilk,_von_Nordwesten.jpg"&gt;
&lt;img alt="Photograph of the statue of Heinrich Heine in front of the University library on the campus in Düsseldorf" src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Universitaets-_und_Landesbibliothek_Duesseldorf_in_Duesseldorf-Bilk%2C_von_Nordwesten.jpg/640px-Universitaets-_und_Landesbibliothek_Duesseldorf_in_Duesseldorf-Bilk%2C_von_Nordwesten.jpg"&gt;
&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;Wiegels, CC BY 3.0, via Wikimedia Commons&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="exact-times"&gt;
&lt;h2&gt;Exact times&lt;/h2&gt;
&lt;p&gt;Work days: starting September 19th (~morning), ending September 23rd (~afternoon).
We will do a to-be-planned social activity on Wednesday afternoon.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="registration"&gt;
&lt;h2&gt;Registration&lt;/h2&gt;
&lt;p&gt;Please register by editing this file or by opening a &lt;a class="reference external" href="https://doc.pypy.org/en/latest/coding-guide.html"&gt;pull request&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://foss.heptapod.net/pypy/extradoc/-/blob/branch/extradoc/sprintinfo/ddorf2022/people.txt"&gt;https://foss.heptapod.net/pypy/extradoc/-/blob/branch/extradoc/sprintinfo/ddorf2022/people.txt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;or by sending a quick mail to the pypy-dev mailing list:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://mail.python.org/mailman/listinfo/pypy-dev"&gt;http://mail.python.org/mailman/listinfo/pypy-dev&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;</description><category>sprints</category><guid>https://www.pypy.org/posts/2022/07/ddorf-sprint-sep-2022.html</guid><pubDate>Fri, 29 Jul 2022 12:00:00 GMT</pubDate></item><item><title>Implementing a Toy Optimizer</title><link>https://www.pypy.org/posts/2022/07/toy-optimizer.html</link><dc:creator>Carl Friedrich Bolz-Tereick</dc:creator><description>&lt;p&gt;In this blog post I want to show the complete code (in Python3) of how a very
simple optimizer for sequences of operations can work. These algorithms could
be part of a (really simple) compiler, or a JIT. The architecture of the code in
this blog post is very similar to that of the trace optimizer of the PyPy JIT:
After a trace is produced, is is optimized before being sent to the machine code
backend that produces binary instructions for the CPU architecture that PyPy is
running on.&lt;/p&gt;
&lt;p&gt;To get started, the first thing we need to do is define how our operations are
stored. The
format that a compiler uses to store the program while it is being optimized
is usually called its &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Intermediate_representation"&gt;intermediate representation&lt;/a&gt; (IR). Many production
compilers use IRs that are in the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Static_single-assignment_form"&gt;Static Single-Assignment Form&lt;/a&gt; (SSA), and
we will also use that. SSA form has the property that every variable is
assigned to exactly once, and every variable is defined before it is used. This
simplifies many things.&lt;/p&gt;
&lt;p&gt;Let's make this concrete. If our input program is a complex expressions, such
as &lt;code class="docutils literal"&gt;a * (b + 17) + (b + 17)&lt;/code&gt; the intermediate representation of that (or at
least its text representation) would maybe be something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;var1 = add(b, 17)
var2 = mul(a, var1)
var3 = add(b, 17)
var4 = add(var2, var3)&lt;/pre&gt;
&lt;p&gt;This sequence of instructions is inefficient. The operation &lt;code class="docutils literal"&gt;add(b, 17)&lt;/code&gt; is
computed twice and we can save time by removing the second one and only
computing it once. In this post I want to show an optimizer that can do this
(and some related) optimizations.&lt;/p&gt;
&lt;p&gt;Looking at the IR we notice that the input expression has been linearized
into a sequence of operations, and all the intermedia results have been given
unique variable names. The value that every variable is assigned is computed
by the right hand side, which is some operation consisting of an operand and an
arbitrary number of arguments. The arguments of an operation are either
themselves variables or constants.&lt;/p&gt;
&lt;p&gt;I will not at all talk about the process of translating the input program
into the IR. Instead, I will assume we have some component that does this
translation already. The tests in this blog post will construct small
snippets of IR by hand. I also won't talk about what happens after the
optimization (usually the optimized IR is translated into machine code).&lt;/p&gt;
&lt;section id="implementing-the-intermediate-representation"&gt;
&lt;h2&gt;Implementing the Intermediate Representation&lt;/h2&gt;
&lt;p&gt;Let's start modelling the intermediate representation with Python classes.
First we define a base class of all values that can be used as arguments in
operations, and let's also add a class that represents constants:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_43fa72b7696748e29a198375c3bb2215-1" name="rest_code_43fa72b7696748e29a198375c3bb2215-1" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_43fa72b7696748e29a198375c3bb2215-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;a id="rest_code_43fa72b7696748e29a198375c3bb2215-2" name="rest_code_43fa72b7696748e29a198375c3bb2215-2" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_43fa72b7696748e29a198375c3bb2215-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;
&lt;a id="rest_code_43fa72b7696748e29a198375c3bb2215-3" name="rest_code_43fa72b7696748e29a198375c3bb2215-3" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_43fa72b7696748e29a198375c3bb2215-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_43fa72b7696748e29a198375c3bb2215-4" name="rest_code_43fa72b7696748e29a198375c3bb2215-4" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_43fa72b7696748e29a198375c3bb2215-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_43fa72b7696748e29a198375c3bb2215-5" name="rest_code_43fa72b7696748e29a198375c3bb2215-5" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_43fa72b7696748e29a198375c3bb2215-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a id="rest_code_43fa72b7696748e29a198375c3bb2215-6" name="rest_code_43fa72b7696748e29a198375c3bb2215-6" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_43fa72b7696748e29a198375c3bb2215-6"&gt;&lt;/a&gt;
&lt;a id="rest_code_43fa72b7696748e29a198375c3bb2215-7" name="rest_code_43fa72b7696748e29a198375c3bb2215-7" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_43fa72b7696748e29a198375c3bb2215-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_43fa72b7696748e29a198375c3bb2215-8" name="rest_code_43fa72b7696748e29a198375c3bb2215-8" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_43fa72b7696748e29a198375c3bb2215-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_43fa72b7696748e29a198375c3bb2215-9" name="rest_code_43fa72b7696748e29a198375c3bb2215-9" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_43fa72b7696748e29a198375c3bb2215-9"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;a id="rest_code_43fa72b7696748e29a198375c3bb2215-10" name="rest_code_43fa72b7696748e29a198375c3bb2215-10" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_43fa72b7696748e29a198375c3bb2215-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_43fa72b7696748e29a198375c3bb2215-11" name="rest_code_43fa72b7696748e29a198375c3bb2215-11" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_43fa72b7696748e29a198375c3bb2215-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_43fa72b7696748e29a198375c3bb2215-12" name="rest_code_43fa72b7696748e29a198375c3bb2215-12" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_43fa72b7696748e29a198375c3bb2215-12"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Constant(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One consequence of the fact that every variable is assigned to only once is
that variables are in a one-to-one correspondence with the right-hand-side of
their unique assignments. That means that we don't need a class that represents
variables at all. Instead, it's sufficient to have a class that represents an
operation (the right-hand side), and that by definition is the same as the variable (left-hand side) that it defines:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-1" name="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-1" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-2" name="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-2" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
&lt;a id="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-3" name="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-3" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-3"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;a id="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-4" name="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-4" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-4"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
&lt;a id="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-5" name="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-5" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-6" name="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-6" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-7" name="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-7" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Operation(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
&lt;a id="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-8" name="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-8" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-9" name="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-9" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-10" name="rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-10" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_eb13cf09b2754be09629d1d0ac4e6f1d-10"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can instantiate these two classes to represent the example sequence of
operations above:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-1" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-1" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_construct_example&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-2" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-2" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# first we need something to represent&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-3" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-3" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# "a" and "b". In our limited view, we don't&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-4" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-4" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# know where they come from, so we will define&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-5" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-5" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# them with a pseudo-operation called "getarg"&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-6" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-6" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# which takes a number n as an argument and&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-7" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-7" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-7"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# returns the n-th input argument. The proper&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-8" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-8" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-8"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# SSA way to do this would be phi-nodes.&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-9" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-9" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-10" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-10" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"getarg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-11" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-11" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"getarg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-12" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-12" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# var1 = add(b, 17)&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-13" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-13" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"add"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-14" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-14" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-14"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# var2 = mul(a, var1)&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-15" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-15" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mul"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-16" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-16" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-16"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# var3 = add(b, 17)&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-17" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-17" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"add"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-18" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-18" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-18"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# var4 = add(var2, var3)&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-19" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-19" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"add"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-20" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-20" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-20"&gt;&lt;/a&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-21" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-21" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-22" name="rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-22" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_36f7fc0fe2fb433bb1fc9d368644ad4f-22"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# nothing to test really, it shouldn't crash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Usually, complicated programs are represented as a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Control-flow_graph"&gt;control flow graph&lt;/a&gt; in a
compiler, which represents all the possible paths that control can take while
executing the program. Every node in the control flow graph is a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Basic_block"&gt;basic
block&lt;/a&gt;. A basic block is a linear sequence of operations with no control flow
inside of it.&lt;/p&gt;
&lt;p&gt;When optimizing a program, a compiler usually looks at the whole control flow
graph of a function. However, that is still too complicated! So let's
simplify further and look at only at optimizations we can do when looking at
a single basic block and its sequence of instructions (they are called local
optimizations).&lt;/p&gt;
&lt;p&gt;Let's define a class representing basic blocks and let's also add some
convenience functions for constructing sequences of operations, because the
code in &lt;code class="docutils literal"&gt;test_construct_example&lt;/code&gt; is a bit annoying.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-1" name="rest_code_cbfaeb4179f140bf919dce1d33148822-1" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-2" name="rest_code_cbfaeb4179f140bf919dce1d33148822-2" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-3" name="rest_code_cbfaeb4179f140bf919dce1d33148822-3" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-3"&gt;&lt;/a&gt;        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wraparg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-4" name="rest_code_cbfaeb4179f140bf919dce1d33148822-4" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-4"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-5" name="rest_code_cbfaeb4179f140bf919dce1d33148822-5" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-5"&gt;&lt;/a&gt;                &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-6" name="rest_code_cbfaeb4179f140bf919dce1d33148822-6" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-6"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-7" name="rest_code_cbfaeb4179f140bf919dce1d33148822-7" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-8" name="rest_code_cbfaeb4179f140bf919dce1d33148822-8" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-8"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# construct an Operation, wrap the&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-9" name="rest_code_cbfaeb4179f140bf919dce1d33148822-9" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-9"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# arguments in Constants if necessary&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-10" name="rest_code_cbfaeb4179f140bf919dce1d33148822-10" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-10"&gt;&lt;/a&gt;            &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-11" name="rest_code_cbfaeb4179f140bf919dce1d33148822-11" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-11"&gt;&lt;/a&gt;                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;wraparg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-12" name="rest_code_cbfaeb4179f140bf919dce1d33148822-12" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-12"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# add it to self, the basic block&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-13" name="rest_code_cbfaeb4179f140bf919dce1d33148822-13" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-13"&gt;&lt;/a&gt;            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-14" name="rest_code_cbfaeb4179f140bf919dce1d33148822-14" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-14"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-15" name="rest_code_cbfaeb4179f140bf919dce1d33148822-15" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-15"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-16" name="rest_code_cbfaeb4179f140bf919dce1d33148822-16" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-16"&gt;&lt;/a&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-17" name="rest_code_cbfaeb4179f140bf919dce1d33148822-17" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-17"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# a bunch of operations we support&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-18" name="rest_code_cbfaeb4179f140bf919dce1d33148822-18" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-18"&gt;&lt;/a&gt;    &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"add"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-19" name="rest_code_cbfaeb4179f140bf919dce1d33148822-19" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mul"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-20" name="rest_code_cbfaeb4179f140bf919dce1d33148822-20" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;getarg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"getarg"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-21" name="rest_code_cbfaeb4179f140bf919dce1d33148822-21" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;dummy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"dummy"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-22" name="rest_code_cbfaeb4179f140bf919dce1d33148822-22" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;lshift&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opbuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"lshift"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-23" name="rest_code_cbfaeb4179f140bf919dce1d33148822-23" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-23"&gt;&lt;/a&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-24" name="rest_code_cbfaeb4179f140bf919dce1d33148822-24" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-24"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_convencience_block_construction&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-25" name="rest_code_cbfaeb4179f140bf919dce1d33148822-25" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-25"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-26" name="rest_code_cbfaeb4179f140bf919dce1d33148822-26" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-26"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# a again with getarg, the following line&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-27" name="rest_code_cbfaeb4179f140bf919dce1d33148822-27" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-27"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# defines the Operation instance and&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-28" name="rest_code_cbfaeb4179f140bf919dce1d33148822-28" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-28"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# immediately adds it to the basic block bb&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-29" name="rest_code_cbfaeb4179f140bf919dce1d33148822-29" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-29"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-30" name="rest_code_cbfaeb4179f140bf919dce1d33148822-30" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-30"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-31" name="rest_code_cbfaeb4179f140bf919dce1d33148822-31" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-31"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"getarg"&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-32" name="rest_code_cbfaeb4179f140bf919dce1d33148822-32" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-32"&gt;&lt;/a&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-33" name="rest_code_cbfaeb4179f140bf919dce1d33148822-33" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-33"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# it's a Constant&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-34" name="rest_code_cbfaeb4179f140bf919dce1d33148822-34" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-34"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-35" name="rest_code_cbfaeb4179f140bf919dce1d33148822-35" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-35"&gt;&lt;/a&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-36" name="rest_code_cbfaeb4179f140bf919dce1d33148822-36" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-36"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# b with getarg&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-37" name="rest_code_cbfaeb4179f140bf919dce1d33148822-37" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-37"&gt;&lt;/a&gt;    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-38" name="rest_code_cbfaeb4179f140bf919dce1d33148822-38" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-38"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# var1 = add(b, 17)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-39" name="rest_code_cbfaeb4179f140bf919dce1d33148822-39" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-39"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-40" name="rest_code_cbfaeb4179f140bf919dce1d33148822-40" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-40"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# var2 = mul(a, var1)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-41" name="rest_code_cbfaeb4179f140bf919dce1d33148822-41" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-41"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-42" name="rest_code_cbfaeb4179f140bf919dce1d33148822-42" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-42"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# var3 = add(b, 17)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-43" name="rest_code_cbfaeb4179f140bf919dce1d33148822-43" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-43"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-44" name="rest_code_cbfaeb4179f140bf919dce1d33148822-44" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-44"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# var4 = add(var2, var3)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-45" name="rest_code_cbfaeb4179f140bf919dce1d33148822-45" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-45"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cbfaeb4179f140bf919dce1d33148822-46" name="rest_code_cbfaeb4179f140bf919dce1d33148822-46" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_cbfaeb4179f140bf919dce1d33148822-46"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's a good bit of infrastructure to make the tests easy to write. One
thing we are lacking though is a way to print the basic blocks into a nicely
readable textual representation. Because in the current form, the &lt;code class="docutils literal"&gt;repr&lt;/code&gt; of a
Block is very annoying, the output of pretty-printing &lt;code class="docutils literal"&gt;bb&lt;/code&gt; in the test above
looks like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-1" name="rest_code_51778a3ebc444b6985c332963813ea50-1" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'getarg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-2" name="rest_code_51778a3ebc444b6985c332963813ea50-2" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-2"&gt;&lt;/a&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'getarg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-3" name="rest_code_51778a3ebc444b6985c332963813ea50-3" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-3"&gt;&lt;/a&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-4" name="rest_code_51778a3ebc444b6985c332963813ea50-4" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-4"&gt;&lt;/a&gt;           &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'getarg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-5" name="rest_code_51778a3ebc444b6985c332963813ea50-5" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-5"&gt;&lt;/a&gt;                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-6" name="rest_code_51778a3ebc444b6985c332963813ea50-6" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-6"&gt;&lt;/a&gt;                 &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-7" name="rest_code_51778a3ebc444b6985c332963813ea50-7" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-7"&gt;&lt;/a&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mul'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-8" name="rest_code_51778a3ebc444b6985c332963813ea50-8" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-8"&gt;&lt;/a&gt;           &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'getarg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-9" name="rest_code_51778a3ebc444b6985c332963813ea50-9" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-9"&gt;&lt;/a&gt;                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-10" name="rest_code_51778a3ebc444b6985c332963813ea50-10" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-10"&gt;&lt;/a&gt;                 &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-11" name="rest_code_51778a3ebc444b6985c332963813ea50-11" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-11"&gt;&lt;/a&gt;                           &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'getarg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-12" name="rest_code_51778a3ebc444b6985c332963813ea50-12" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-12"&gt;&lt;/a&gt;                                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-13" name="rest_code_51778a3ebc444b6985c332963813ea50-13" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-13"&gt;&lt;/a&gt;                            &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)])]),&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-14" name="rest_code_51778a3ebc444b6985c332963813ea50-14" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-14"&gt;&lt;/a&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-15" name="rest_code_51778a3ebc444b6985c332963813ea50-15" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-15"&gt;&lt;/a&gt;           &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'getarg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-16" name="rest_code_51778a3ebc444b6985c332963813ea50-16" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-16"&gt;&lt;/a&gt;                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-17" name="rest_code_51778a3ebc444b6985c332963813ea50-17" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-17"&gt;&lt;/a&gt;            &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-18" name="rest_code_51778a3ebc444b6985c332963813ea50-18" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-18"&gt;&lt;/a&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-19" name="rest_code_51778a3ebc444b6985c332963813ea50-19" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-19"&gt;&lt;/a&gt;           &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mul'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-20" name="rest_code_51778a3ebc444b6985c332963813ea50-20" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-20"&gt;&lt;/a&gt;                       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'getarg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-21" name="rest_code_51778a3ebc444b6985c332963813ea50-21" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-21"&gt;&lt;/a&gt;                                  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-22" name="rest_code_51778a3ebc444b6985c332963813ea50-22" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-22"&gt;&lt;/a&gt;                             &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-23" name="rest_code_51778a3ebc444b6985c332963813ea50-23" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-23"&gt;&lt;/a&gt;                                       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'getarg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-24" name="rest_code_51778a3ebc444b6985c332963813ea50-24" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-24"&gt;&lt;/a&gt;                                                  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-25" name="rest_code_51778a3ebc444b6985c332963813ea50-25" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-25"&gt;&lt;/a&gt;                                        &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)])]),&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-26" name="rest_code_51778a3ebc444b6985c332963813ea50-26" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-26"&gt;&lt;/a&gt;                 &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-27" name="rest_code_51778a3ebc444b6985c332963813ea50-27" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-27"&gt;&lt;/a&gt;                           &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'getarg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-28" name="rest_code_51778a3ebc444b6985c332963813ea50-28" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-28"&gt;&lt;/a&gt;                                           &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
&lt;a id="rest_code_51778a3ebc444b6985c332963813ea50-29" name="rest_code_51778a3ebc444b6985c332963813ea50-29" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_51778a3ebc444b6985c332963813ea50-29"&gt;&lt;/a&gt;                                 &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)])])]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's impossible to see what is going on here, because the &lt;code class="docutils literal"&gt;Operations&lt;/code&gt; in the
basic block appear several times, once as elements of the list but then also as
arguments to operations further down in the list. So we need some code that
turns things back into a readable textual representation, so we have a chance
to debug.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-1" name="rest_code_fc33e910c81344d982b2e748d21e2e92-1" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;varprefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"var"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-2" name="rest_code_fc33e910c81344d982b2e748d21e2e92-2" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# the implementation is not too important,&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-3" name="rest_code_fc33e910c81344d982b2e748d21e2e92-3" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# look at the test below to see what the&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-4" name="rest_code_fc33e910c81344d982b2e748d21e2e92-4" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# result looks like&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-5" name="rest_code_fc33e910c81344d982b2e748d21e2e92-5" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-6" name="rest_code_fc33e910c81344d982b2e748d21e2e92-6" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;arg_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-7" name="rest_code_fc33e910c81344d982b2e748d21e2e92-7" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-8" name="rest_code_fc33e910c81344d982b2e748d21e2e92-8" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-8"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-9" name="rest_code_fc33e910c81344d982b2e748d21e2e92-9" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-10" name="rest_code_fc33e910c81344d982b2e748d21e2e92-10" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-10"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# the key must exist, otherwise it's&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-11" name="rest_code_fc33e910c81344d982b2e748d21e2e92-11" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-11"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# not a valid SSA basic block:&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-12" name="rest_code_fc33e910c81344d982b2e748d21e2e92-12" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-12"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# the variable must be defined before&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-13" name="rest_code_fc33e910c81344d982b2e748d21e2e92-13" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-13"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# its first use&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-14" name="rest_code_fc33e910c81344d982b2e748d21e2e92-14" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-14"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;varnames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-15" name="rest_code_fc33e910c81344d982b2e748d21e2e92-15" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-15"&gt;&lt;/a&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-16" name="rest_code_fc33e910c81344d982b2e748d21e2e92-16" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;varnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-17" name="rest_code_fc33e910c81344d982b2e748d21e2e92-17" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-18" name="rest_code_fc33e910c81344d982b2e748d21e2e92-18" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-19" name="rest_code_fc33e910c81344d982b2e748d21e2e92-19" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-19"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# give the operation a name used while&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-20" name="rest_code_fc33e910c81344d982b2e748d21e2e92-20" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-20"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# printing:&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-21" name="rest_code_fc33e910c81344d982b2e748d21e2e92-21" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-21"&gt;&lt;/a&gt;        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;varprefix&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-22" name="rest_code_fc33e910c81344d982b2e748d21e2e92-22" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-22"&gt;&lt;/a&gt;        &lt;span class="n"&gt;varnames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-23" name="rest_code_fc33e910c81344d982b2e748d21e2e92-23" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-23"&gt;&lt;/a&gt;        &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;", "&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-24" name="rest_code_fc33e910c81344d982b2e748d21e2e92-24" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-24"&gt;&lt;/a&gt;            &lt;span class="n"&gt;arg_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-25" name="rest_code_fc33e910c81344d982b2e748d21e2e92-25" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-25"&gt;&lt;/a&gt;                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-26" name="rest_code_fc33e910c81344d982b2e748d21e2e92-26" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-26"&gt;&lt;/a&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-27" name="rest_code_fc33e910c81344d982b2e748d21e2e92-27" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-27"&gt;&lt;/a&gt;        &lt;span class="n"&gt;strop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-28" name="rest_code_fc33e910c81344d982b2e748d21e2e92-28" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-28"&gt;&lt;/a&gt;        &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-29" name="rest_code_fc33e910c81344d982b2e748d21e2e92-29" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-29"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-30" name="rest_code_fc33e910c81344d982b2e748d21e2e92-30" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-30"&gt;&lt;/a&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-31" name="rest_code_fc33e910c81344d982b2e748d21e2e92-31" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-31"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_basicblock_to_str&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-32" name="rest_code_fc33e910c81344d982b2e748d21e2e92-32" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-32"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-33" name="rest_code_fc33e910c81344d982b2e748d21e2e92-33" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-33"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-34" name="rest_code_fc33e910c81344d982b2e748d21e2e92-34" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-34"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-35" name="rest_code_fc33e910c81344d982b2e748d21e2e92-35" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-35"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-36" name="rest_code_fc33e910c81344d982b2e748d21e2e92-36" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-36"&gt;&lt;/a&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-37" name="rest_code_fc33e910c81344d982b2e748d21e2e92-37" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-37"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-38" name="rest_code_fc33e910c81344d982b2e748d21e2e92-38" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-38"&gt;&lt;/a&gt;&lt;span class="s2"&gt;var0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-39" name="rest_code_fc33e910c81344d982b2e748d21e2e92-39" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-39"&gt;&lt;/a&gt;&lt;span class="s2"&gt;var1 = add(5, 4)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-40" name="rest_code_fc33e910c81344d982b2e748d21e2e92-40" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-40"&gt;&lt;/a&gt;&lt;span class="s2"&gt;var2 = add(var1, var0)"""&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-41" name="rest_code_fc33e910c81344d982b2e748d21e2e92-41" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-41"&gt;&lt;/a&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-42" name="rest_code_fc33e910c81344d982b2e748d21e2e92-42" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-42"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# with a different prefix for the invented&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-43" name="rest_code_fc33e910c81344d982b2e748d21e2e92-43" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-43"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# variable names:&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-44" name="rest_code_fc33e910c81344d982b2e748d21e2e92-44" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-44"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-45" name="rest_code_fc33e910c81344d982b2e748d21e2e92-45" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-45"&gt;&lt;/a&gt;&lt;span class="s2"&gt;x0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-46" name="rest_code_fc33e910c81344d982b2e748d21e2e92-46" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-46"&gt;&lt;/a&gt;&lt;span class="s2"&gt;x1 = add(5, 4)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-47" name="rest_code_fc33e910c81344d982b2e748d21e2e92-47" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-47"&gt;&lt;/a&gt;&lt;span class="s2"&gt;x2 = add(x1, x0)"""&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-48" name="rest_code_fc33e910c81344d982b2e748d21e2e92-48" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-48"&gt;&lt;/a&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-49" name="rest_code_fc33e910c81344d982b2e748d21e2e92-49" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-49"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# and our running example:&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-50" name="rest_code_fc33e910c81344d982b2e748d21e2e92-50" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-50"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-51" name="rest_code_fc33e910c81344d982b2e748d21e2e92-51" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-51"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-52" name="rest_code_fc33e910c81344d982b2e748d21e2e92-52" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-52"&gt;&lt;/a&gt;    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-53" name="rest_code_fc33e910c81344d982b2e748d21e2e92-53" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-53"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-54" name="rest_code_fc33e910c81344d982b2e748d21e2e92-54" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-54"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-55" name="rest_code_fc33e910c81344d982b2e748d21e2e92-55" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-55"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-56" name="rest_code_fc33e910c81344d982b2e748d21e2e92-56" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-56"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-57" name="rest_code_fc33e910c81344d982b2e748d21e2e92-57" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-57"&gt;&lt;/a&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-58" name="rest_code_fc33e910c81344d982b2e748d21e2e92-58" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-58"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"v"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-59" name="rest_code_fc33e910c81344d982b2e748d21e2e92-59" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-59"&gt;&lt;/a&gt;&lt;span class="s2"&gt;v0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-60" name="rest_code_fc33e910c81344d982b2e748d21e2e92-60" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-60"&gt;&lt;/a&gt;&lt;span class="s2"&gt;v1 = getarg(1)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-61" name="rest_code_fc33e910c81344d982b2e748d21e2e92-61" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-61"&gt;&lt;/a&gt;&lt;span class="s2"&gt;v2 = add(v1, 17)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-62" name="rest_code_fc33e910c81344d982b2e748d21e2e92-62" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-62"&gt;&lt;/a&gt;&lt;span class="s2"&gt;v3 = mul(v0, v2)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-63" name="rest_code_fc33e910c81344d982b2e748d21e2e92-63" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-63"&gt;&lt;/a&gt;&lt;span class="s2"&gt;v4 = add(v1, 17)&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-64" name="rest_code_fc33e910c81344d982b2e748d21e2e92-64" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-64"&gt;&lt;/a&gt;&lt;span class="s2"&gt;v5 = add(v3, v4)"""&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-65" name="rest_code_fc33e910c81344d982b2e748d21e2e92-65" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-65"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Note the re-numbering of the variables! We&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-66" name="rest_code_fc33e910c81344d982b2e748d21e2e92-66" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-66"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# don't attach names to Operations at all, so&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-67" name="rest_code_fc33e910c81344d982b2e748d21e2e92-67" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-67"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# the printing will just number them in&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-68" name="rest_code_fc33e910c81344d982b2e748d21e2e92-68" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-68"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# sequence, can sometimes be a source of&lt;/span&gt;
&lt;a id="rest_code_fc33e910c81344d982b2e748d21e2e92-69" name="rest_code_fc33e910c81344d982b2e748d21e2e92-69" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_fc33e910c81344d982b2e748d21e2e92-69"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# confusion.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is much better. Now we're done with the basic infrastructure, we can
define sequences of operations and print them in a readable way. Next we need a
central data structure that is used when actually optimizing basic blocks.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="storing-equivalences-between-operations-using-a-union-find-data-structure"&gt;
&lt;h2&gt;Storing Equivalences between Operations Using a Union-Find Data Structure&lt;/h2&gt;
&lt;p&gt;When optimizing a sequence of operations, we want to make it less costly to
execute. For that we typically want to remove operations (and sometimes
replace operations with less expensive ones). We can remove operations if
they do redundant computation, like case of the duplicate &lt;code class="docutils literal"&gt;add(v1, 17)&lt;/code&gt; in
the example. So what we want to do is to turn the running input sequence:&lt;/p&gt;
&lt;pre class="literal-block"&gt;v0 = getarg(0)
v1 = getarg(1)
v2 = add(v1, 17)
v3 = mul(v0, v2)
v4 = add(v1, 17)
v5 = add(v3, v4)&lt;/pre&gt;
&lt;p&gt;Into the following optimized output sequence:&lt;/p&gt;
&lt;pre class="literal-block"&gt;optvar0 = getarg(0)
optvar1 = getarg(1)
optvar2 = add(optvar1, 17)
optvar3 = mul(optvar0, optvar2)
optvar4 = add(optvar3, optvar2)&lt;/pre&gt;
&lt;p&gt;We left out the second &lt;code class="docutils literal"&gt;add&lt;/code&gt; (which defines &lt;code class="docutils literal"&gt;v4&lt;/code&gt;), and then replaced the
usage of &lt;code class="docutils literal"&gt;v4&lt;/code&gt; with &lt;code class="docutils literal"&gt;v2&lt;/code&gt; in the final operation that defines &lt;code class="docutils literal"&gt;v5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What we effectively did was discover that &lt;code class="docutils literal"&gt;v2&lt;/code&gt; and &lt;code class="docutils literal"&gt;v4&lt;/code&gt; are equivalent and then
replaced &lt;code class="docutils literal"&gt;v4&lt;/code&gt; with &lt;code class="docutils literal"&gt;v2&lt;/code&gt;. In general, we might discover more such equivalences,
and we need a data structure to store them. A good data structure to store
these equivalences is &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Disjoint-set_data_structure"&gt;Union Find&lt;/a&gt; (also called Disjoint-set data structure),
which stores a collection of disjoint sets. Disjoint means, that no operation
can appear in more than one set. The sets in our concrete case are the sets of
operations that compute the same result.&lt;/p&gt;
&lt;p&gt;When we start out, every operation is in its own singleton set, with no other
member. As we discover more equivalences, we will unify sets into larger sets
of operations that all compute the same result. So one operation the data
structure supports is &lt;code class="docutils literal"&gt;union&lt;/code&gt;, to unify two sets, we'll call that
&lt;code class="docutils literal"&gt;make_equal_to&lt;/code&gt; in the code below.&lt;/p&gt;
&lt;p&gt;The other operation the data structure supports is &lt;code class="docutils literal"&gt;find&lt;/code&gt;, which takes an
operation and returns a "representative" of the set of all equivalent
operations. Two operations are in the same set, if the representative that
find returns for them is the same.&lt;/p&gt;
&lt;p&gt;The exact details of how the data structure works are only sort of important
(even though it's very cool, I promise!). It's OK to skip over the
implementation. We will add the data structure right into our &lt;code class="docutils literal"&gt;Value&lt;/code&gt;,
&lt;code class="docutils literal"&gt;Constant&lt;/code&gt; and &lt;code class="docutils literal"&gt;Operation&lt;/code&gt; classes:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_088f232f978d40339957375401ddf78b-1" name="rest_code_088f232f978d40339957375401ddf78b-1" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-2" name="rest_code_088f232f978d40339957375401ddf78b-2" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-3" name="rest_code_088f232f978d40339957375401ddf78b-3" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-3"&gt;&lt;/a&gt;        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"abstract"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-4" name="rest_code_088f232f978d40339957375401ddf78b-4" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_forwarded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-5" name="rest_code_088f232f978d40339957375401ddf78b-5" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-5"&gt;&lt;/a&gt;        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"abstract"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-6" name="rest_code_088f232f978d40339957375401ddf78b-6" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-6"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-7" name="rest_code_088f232f978d40339957375401ddf78b-7" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-8" name="rest_code_088f232f978d40339957375401ddf78b-8" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-9" name="rest_code_088f232f978d40339957375401ddf78b-9" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-10" name="rest_code_088f232f978d40339957375401ddf78b-10" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-10"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-11" name="rest_code_088f232f978d40339957375401ddf78b-11" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-11"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-12" name="rest_code_088f232f978d40339957375401ddf78b-12" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-12"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forwarded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-13" name="rest_code_088f232f978d40339957375401ddf78b-13" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-14" name="rest_code_088f232f978d40339957375401ddf78b-14" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-14"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-15" name="rest_code_088f232f978d40339957375401ddf78b-15" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-15"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-16" name="rest_code_088f232f978d40339957375401ddf78b-16" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-16"&gt;&lt;/a&gt;            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Operation(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,"&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-17" name="rest_code_088f232f978d40339957375401ddf78b-17" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-17"&gt;&lt;/a&gt;            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forwarded&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-18" name="rest_code_088f232f978d40339957375401ddf78b-18" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-18"&gt;&lt;/a&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-19" name="rest_code_088f232f978d40339957375401ddf78b-19" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-19"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-20" name="rest_code_088f232f978d40339957375401ddf78b-20" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-21" name="rest_code_088f232f978d40339957375401ddf78b-21" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-21"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# returns the "representative" value of&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-22" name="rest_code_088f232f978d40339957375401ddf78b-22" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-22"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# self, in the union-find sense&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-23" name="rest_code_088f232f978d40339957375401ddf78b-23" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-23"&gt;&lt;/a&gt;        &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-24" name="rest_code_088f232f978d40339957375401ddf78b-24" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-24"&gt;&lt;/a&gt;        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-25" name="rest_code_088f232f978d40339957375401ddf78b-25" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-25"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# could do path compression here too&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-26" name="rest_code_088f232f978d40339957375401ddf78b-26" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-26"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# but not essential&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-27" name="rest_code_088f232f978d40339957375401ddf78b-27" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-27"&gt;&lt;/a&gt;            &lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forwarded&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-28" name="rest_code_088f232f978d40339957375401ddf78b-28" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-28"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-29" name="rest_code_088f232f978d40339957375401ddf78b-29" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-29"&gt;&lt;/a&gt;                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-30" name="rest_code_088f232f978d40339957375401ddf78b-30" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-30"&gt;&lt;/a&gt;            &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-31" name="rest_code_088f232f978d40339957375401ddf78b-31" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-31"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-32" name="rest_code_088f232f978d40339957375401ddf78b-32" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-32"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-33" name="rest_code_088f232f978d40339957375401ddf78b-33" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-33"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-34" name="rest_code_088f232f978d40339957375401ddf78b-34" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-34"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# change to above: return the&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-35" name="rest_code_088f232f978d40339957375401ddf78b-35" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-35"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# representative of argument 'index'&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-36" name="rest_code_088f232f978d40339957375401ddf78b-36" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-36"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-37" name="rest_code_088f232f978d40339957375401ddf78b-37" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-37"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-38" name="rest_code_088f232f978d40339957375401ddf78b-38" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-38"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-39" name="rest_code_088f232f978d40339957375401ddf78b-39" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-39"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# this is "union" in the union-find sense,&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-40" name="rest_code_088f232f978d40339957375401ddf78b-40" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-40"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# but the direction is important! The&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-41" name="rest_code_088f232f978d40339957375401ddf78b-41" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-41"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# representative of the union of Operations&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-42" name="rest_code_088f232f978d40339957375401ddf78b-42" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-42"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# must be either a Constant or an operation&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-43" name="rest_code_088f232f978d40339957375401ddf78b-43" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-43"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# that we know for sure is not optimized&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-44" name="rest_code_088f232f978d40339957375401ddf78b-44" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-44"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# away.&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-45" name="rest_code_088f232f978d40339957375401ddf78b-45" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-45"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-46" name="rest_code_088f232f978d40339957375401ddf78b-46" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-46"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_set_forwarded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-47" name="rest_code_088f232f978d40339957375401ddf78b-47" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-47"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-48" name="rest_code_088f232f978d40339957375401ddf78b-48" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-48"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_forwarded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-49" name="rest_code_088f232f978d40339957375401ddf78b-49" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-49"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forwarded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-50" name="rest_code_088f232f978d40339957375401ddf78b-50" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-50"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-51" name="rest_code_088f232f978d40339957375401ddf78b-51" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-51"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-52" name="rest_code_088f232f978d40339957375401ddf78b-52" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-52"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-53" name="rest_code_088f232f978d40339957375401ddf78b-53" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-53"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-54" name="rest_code_088f232f978d40339957375401ddf78b-54" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-54"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-55" name="rest_code_088f232f978d40339957375401ddf78b-55" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-55"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-56" name="rest_code_088f232f978d40339957375401ddf78b-56" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-56"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-57" name="rest_code_088f232f978d40339957375401ddf78b-57" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-57"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Constant(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-58" name="rest_code_088f232f978d40339957375401ddf78b-58" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-58"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-59" name="rest_code_088f232f978d40339957375401ddf78b-59" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-59"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-60" name="rest_code_088f232f978d40339957375401ddf78b-60" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-60"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-61" name="rest_code_088f232f978d40339957375401ddf78b-61" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-61"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-62" name="rest_code_088f232f978d40339957375401ddf78b-62" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-62"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_forwarded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-63" name="rest_code_088f232f978d40339957375401ddf78b-63" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-63"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# if we found out that an Operation is&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-64" name="rest_code_088f232f978d40339957375401ddf78b-64" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-64"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# equal to a constant, it's a compiler bug&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-65" name="rest_code_088f232f978d40339957375401ddf78b-65" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-65"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# to find out that it's equal to another&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-66" name="rest_code_088f232f978d40339957375401ddf78b-66" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-66"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# constant&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-67" name="rest_code_088f232f978d40339957375401ddf78b-67" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-67"&gt;&lt;/a&gt;        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-68" name="rest_code_088f232f978d40339957375401ddf78b-68" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-68"&gt;&lt;/a&gt;            &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-69" name="rest_code_088f232f978d40339957375401ddf78b-69" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-69"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-70" name="rest_code_088f232f978d40339957375401ddf78b-70" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-70"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_union_find&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-71" name="rest_code_088f232f978d40339957375401ddf78b-71" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-71"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# construct three operation, and unify them&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-72" name="rest_code_088f232f978d40339957375401ddf78b-72" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-72"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# step by step&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-73" name="rest_code_088f232f978d40339957375401ddf78b-73" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-73"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-74" name="rest_code_088f232f978d40339957375401ddf78b-74" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-74"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-75" name="rest_code_088f232f978d40339957375401ddf78b-75" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-75"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-76" name="rest_code_088f232f978d40339957375401ddf78b-76" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-76"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-77" name="rest_code_088f232f978d40339957375401ddf78b-77" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-77"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-78" name="rest_code_088f232f978d40339957375401ddf78b-78" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-78"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# at the beginning, every op is its own&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-79" name="rest_code_088f232f978d40339957375401ddf78b-79" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-79"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# representative, that means every&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-80" name="rest_code_088f232f978d40339957375401ddf78b-80" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-80"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# operation is in a singleton set&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-81" name="rest_code_088f232f978d40339957375401ddf78b-81" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-81"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# {a1} {a2} {a3}&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-82" name="rest_code_088f232f978d40339957375401ddf78b-82" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-82"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-83" name="rest_code_088f232f978d40339957375401ddf78b-83" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-83"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-84" name="rest_code_088f232f978d40339957375401ddf78b-84" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-84"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-85" name="rest_code_088f232f978d40339957375401ddf78b-85" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-85"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-86" name="rest_code_088f232f978d40339957375401ddf78b-86" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-86"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# now we unify a2 and a1, then the sets are&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-87" name="rest_code_088f232f978d40339957375401ddf78b-87" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-87"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# {a1, a2} {a3}&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-88" name="rest_code_088f232f978d40339957375401ddf78b-88" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-88"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-89" name="rest_code_088f232f978d40339957375401ddf78b-89" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-89"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# they both return a1 as the representative&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-90" name="rest_code_088f232f978d40339957375401ddf78b-90" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-90"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-91" name="rest_code_088f232f978d40339957375401ddf78b-91" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-91"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-92" name="rest_code_088f232f978d40339957375401ddf78b-92" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-92"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# a3 is still different&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-93" name="rest_code_088f232f978d40339957375401ddf78b-93" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-93"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-94" name="rest_code_088f232f978d40339957375401ddf78b-94" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-94"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-95" name="rest_code_088f232f978d40339957375401ddf78b-95" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-95"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# now they are all in the same set {a1, a2, a3}&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-96" name="rest_code_088f232f978d40339957375401ddf78b-96" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-96"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-97" name="rest_code_088f232f978d40339957375401ddf78b-97" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-97"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-98" name="rest_code_088f232f978d40339957375401ddf78b-98" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-98"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-99" name="rest_code_088f232f978d40339957375401ddf78b-99" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-99"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-100" name="rest_code_088f232f978d40339957375401ddf78b-100" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-100"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-101" name="rest_code_088f232f978d40339957375401ddf78b-101" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-101"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# now they are still all the same, and we&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-102" name="rest_code_088f232f978d40339957375401ddf78b-102" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-102"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# also learned that they are the same as the&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-103" name="rest_code_088f232f978d40339957375401ddf78b-103" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-103"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# constant 6&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-104" name="rest_code_088f232f978d40339957375401ddf78b-104" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-104"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# the single remaining set then is&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-105" name="rest_code_088f232f978d40339957375401ddf78b-105" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-105"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# {6, a1, a2, a3}&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-106" name="rest_code_088f232f978d40339957375401ddf78b-106" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-106"&gt;&lt;/a&gt;    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-107" name="rest_code_088f232f978d40339957375401ddf78b-107" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-107"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-108" name="rest_code_088f232f978d40339957375401ddf78b-108" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-108"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-109" name="rest_code_088f232f978d40339957375401ddf78b-109" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-109"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-110" name="rest_code_088f232f978d40339957375401ddf78b-110" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-110"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-111" name="rest_code_088f232f978d40339957375401ddf78b-111" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-111"&gt;&lt;/a&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-112" name="rest_code_088f232f978d40339957375401ddf78b-112" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-112"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# union with the same constant again is fine&lt;/span&gt;
&lt;a id="rest_code_088f232f978d40339957375401ddf78b-113" name="rest_code_088f232f978d40339957375401ddf78b-113" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_088f232f978d40339957375401ddf78b-113"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="constant-folding"&gt;
&lt;h2&gt;Constant Folding&lt;/h2&gt;
&lt;p&gt;Now comes the first actual optimization, a simple &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Constant_folding"&gt;constant folding&lt;/a&gt; pass. It
will remove operations where all the arguments are constants and replace them
with the constant result.&lt;/p&gt;
&lt;p&gt;Every pass has the same structure: we go over all operations in the basic
block in order and decide for each operation whether it can be removed. For the
constant folding pass, we can remove all the operations with constant
arguments (but we'll implement only the &lt;code class="docutils literal"&gt;add&lt;/code&gt; case here).&lt;/p&gt;
&lt;p&gt;I will show a buggy version of the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Constant_folding"&gt;constant folding&lt;/a&gt; pass first. It has a
problem that is related to why we need the union-find data structure. We will
fix it a bit further down.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-1" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-1" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;constfold_buggy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-2" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-2" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-3" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-3" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-4" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-4" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-5" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-5" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-5"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# basic idea: go over the list and do&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-6" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-6" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-6"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# constant folding of add where possible&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-7" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-7" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"add"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-8" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-8" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-8"&gt;&lt;/a&gt;            &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-9" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-9" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-9"&gt;&lt;/a&gt;            &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-10" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-10" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-10"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-11" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-11" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-11"&gt;&lt;/a&gt;                    &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-12" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-12" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-12"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# can constant-fold! that means we&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-13" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-13" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-13"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# learned a new equality, namely&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-14" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-14" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-14"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# that op is equal to a specific&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-15" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-15" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-15"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# constant&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-16" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-16" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-16"&gt;&lt;/a&gt;                &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-17" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-17" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-17"&gt;&lt;/a&gt;                &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-18" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-18" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-18"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# don't need to have the operation&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-19" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-19" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-19"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# in the optimized basic block&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-20" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-20" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-20"&gt;&lt;/a&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-21" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-21" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-21"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# otherwise the operation is not&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-22" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-22" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-22"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# constant-foldable and we put into the&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-23" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-23" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-23"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# output list&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-24" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-24" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-24"&gt;&lt;/a&gt;        &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-25" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-25" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-25"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;opt_bb&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-26" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-26" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-26"&gt;&lt;/a&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-27" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-27" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-27"&gt;&lt;/a&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-28" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-28" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-28"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_constfold_simple&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-29" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-29" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-29"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-30" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-30" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-30"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-31" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-31" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-31"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-32" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-32" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-32"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-33" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-33" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-33"&gt;&lt;/a&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-34" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-34" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-34"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;constfold_buggy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-35" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-35" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-35"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-36" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-36" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-36"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-37" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-37" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-37"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = add(9, optvar0)"""&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-38" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-38" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-38"&gt;&lt;/a&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-39" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-39" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-39"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xfail&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-40" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-40" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-40"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_constfold_buggy_limitation&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-41" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-41" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-41"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# this test fails! it shows the problem with&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-42" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-42" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-42"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# the above simple constfold_buggy pass&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-43" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-43" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-43"&gt;&lt;/a&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-44" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-44" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-44"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-45" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-45" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-45"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-46" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-46" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-46"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# this is folded&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-47" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-47" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-47"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-48" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-48" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-48"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# we want this folded too, but it doesn't work&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-49" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-49" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-49"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-50" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-50" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-50"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-51" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-51" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-51"&gt;&lt;/a&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-52" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-52" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-52"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;constfold_buggy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-53" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-53" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-53"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-54" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-54" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-54"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_2fbc230c80ac47f9a66385fab72870cb-55" name="rest_code_2fbc230c80ac47f9a66385fab72870cb-55" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_2fbc230c80ac47f9a66385fab72870cb-55"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = add(19, optvar0)"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why does the test fail? The &lt;code class="docutils literal"&gt;opt_bb&lt;/code&gt; printed output looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;optvar0 = getarg(0)
optvar1 = add(9, 10)
optvar2 = add(optvar1, optvar0)&lt;/pre&gt;
&lt;p&gt;The problem is that when we optimize the second addition in &lt;cite&gt;constfold_buggy&lt;/cite&gt;,
the argument of that operation is an &lt;em&gt;Operation&lt;/em&gt; not a &lt;code class="docutils literal"&gt;Constant&lt;/code&gt;, so
constant-folding is not applied to the second add. However, we have already
learned that the argument &lt;code class="docutils literal"&gt;var1&lt;/code&gt; to the operation &lt;code class="docutils literal"&gt;var2&lt;/code&gt; is equal to
&lt;code class="docutils literal"&gt;Constant(9)&lt;/code&gt;. This information is stored in the union-find data structure.
So what we are missing are suitable find calls in the constant folding pass, to
make use of the previously learned equalities.&lt;/p&gt;
&lt;p&gt;Here's the fixed version:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-1" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-1" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;constfold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-2" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-2" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-3" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-3" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-4" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-4" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-5" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-5" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-5"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# basic idea: go over the list and do&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-6" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-6" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-6"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# constant folding of add where possible&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-7" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-7" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"add"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-8" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-8" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-8"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# &amp;gt;&amp;gt;&amp;gt; changed&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-9" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-9" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-9"&gt;&lt;/a&gt;&lt;span class="hll"&gt;            &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# uses .find()&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-10" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-10" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-10"&gt;&lt;/a&gt;&lt;span class="hll"&gt;            &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# uses .find()&lt;/span&gt;
&lt;/span&gt;&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-11" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-11" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-11"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# &amp;lt;&amp;lt;&amp;lt; end changes&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-12" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-12" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-12"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-13" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-13" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-13"&gt;&lt;/a&gt;                    &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-14" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-14" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-14"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# can constant-fold! that means we&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-15" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-15" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-15"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# learned a new equality, namely&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-16" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-16" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-16"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# that op is equal to a specific&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-17" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-17" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-17"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# constant&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-18" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-18" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-18"&gt;&lt;/a&gt;                &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-19" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-19" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-19"&gt;&lt;/a&gt;                &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-20" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-20" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-20"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# don't need to have the operation&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-21" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-21" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-21"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# in the optimized basic block&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-22" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-22" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-22"&gt;&lt;/a&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-23" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-23" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-23"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# otherwise the operation is not&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-24" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-24" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-24"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# constant-foldable and we put into the&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-25" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-25" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-25"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# output list&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-26" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-26" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-26"&gt;&lt;/a&gt;        &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-27" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-27" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-27"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;opt_bb&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-28" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-28" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-28"&gt;&lt;/a&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-29" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-29" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-29"&gt;&lt;/a&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-30" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-30" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-30"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_constfold_two_ops&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-31" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-31" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-31"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# now it works!&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-32" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-32" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-32"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-33" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-33" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-33"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-34" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-34" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-34"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-35" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-35" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-35"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-36" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-36" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-36"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-37" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-37" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-37"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;constfold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-38" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-38" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-38"&gt;&lt;/a&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-39" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-39" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-39"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-40" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-40" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-40"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_dface4e4cc9545798a6c1de2c5a079e9-41" name="rest_code_dface4e4cc9545798a6c1de2c5a079e9-41" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_dface4e4cc9545798a6c1de2c5a079e9-41"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = add(19, optvar0)"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="common-subexpression-elimination"&gt;
&lt;h2&gt;Common Subexpression Elimination&lt;/h2&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;constfold&lt;/code&gt; pass only discovers equalities between &lt;code class="docutils literal"&gt;Operations&lt;/code&gt; and
&lt;code class="docutils literal"&gt;Constants&lt;/code&gt;. Let's do a second pass that also discovers equalities between
&lt;code class="docutils literal"&gt;Operations&lt;/code&gt; and other &lt;code class="docutils literal"&gt;Operations&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A simple optimization that does that has this property &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_subexpression_elimination"&gt;common subexpression
elimination&lt;/a&gt; (CSE), which will finally optimize away the problem in the
introductory example code that we had above.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-1" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-1" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-2" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-2" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# structure is the same, loop over the input,&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-3" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-3" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# add some but not all operations to the&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-4" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-4" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# output&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-5" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-5" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-6" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-6" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-7" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-7" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-8" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-8" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-9" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-9" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-9"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# only do CSE for add here, but it&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-10" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-10" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-10"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# generalizes&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-11" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-11" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-11"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"add"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-12" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-12" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-12"&gt;&lt;/a&gt;            &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-13" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-13" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-13"&gt;&lt;/a&gt;            &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-14" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-14" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-14"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# Check whether we have emitted the&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-15" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-15" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-15"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# same operation already&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-16" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-16" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-16"&gt;&lt;/a&gt;            &lt;span class="n"&gt;prev_op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_prev_add_op&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-17" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-17" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-17"&gt;&lt;/a&gt;                &lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-18" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-18" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-18"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;prev_op&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-19" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-19" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-19"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# if yes, we can optimize op away&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-20" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-20" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-20"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# and replace it with the earlier&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-21" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-21" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-21"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# result, which is an Operation&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-22" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-22" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-22"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# that was already emitted to&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-23" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-23" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-23"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# opt_bb&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-24" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-24" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-24"&gt;&lt;/a&gt;                &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prev_op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-25" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-25" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-25"&gt;&lt;/a&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-26" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-26" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-26"&gt;&lt;/a&gt;        &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-27" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-27" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-27"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;opt_bb&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-28" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-28" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-28"&gt;&lt;/a&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-29" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-29" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-29"&gt;&lt;/a&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-30" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-30" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-30"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;eq_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-31" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-31" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-31"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-32" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-32" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-32"&gt;&lt;/a&gt;            &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-33" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-33" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-33"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# constants compare by their value&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-34" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-34" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-34"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;val0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;val1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-35" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-35" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-35"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# everything else by identity&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-36" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-36" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-36"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;val0&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;val1&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-37" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-37" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-37"&gt;&lt;/a&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-38" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-38" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-38"&gt;&lt;/a&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-39" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-39" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-39"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_prev_add_op&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-40" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-40" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-40"&gt;&lt;/a&gt;        &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-41" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-41" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-41"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Really naive and quadratic implementation.&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-42" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-42" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-42"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# What we do is walk over the already emitted&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-43" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-43" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-43"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# operations and see whether we emitted an add&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-44" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-44" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-44"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# with the current arguments already. A real&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-45" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-45" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-45"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# implementation might use a hashmap of some&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-46" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-46" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-46"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# kind, or at least only look at a limited&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-47" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-47" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-47"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# window of instructions.&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-48" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-48" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-48"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;opt_op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-49" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-49" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-49"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;opt_op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"add"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-50" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-50" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-50"&gt;&lt;/a&gt;            &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-51" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-51" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-51"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# It's important to call arg here,&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-52" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-52" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-52"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# for the same reason why we&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-53" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-53" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-53"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# needed it in constfold: we need to&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-54" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-54" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-54"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# make sure .find() is called&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-55" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-55" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-55"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt_op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-56" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-56" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-56"&gt;&lt;/a&gt;                &lt;span class="n"&gt;eq_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt_op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-57" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-57" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-57"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;opt_op&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-58" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-58" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-58"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-59" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-59" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-59"&gt;&lt;/a&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-60" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-60" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-60"&gt;&lt;/a&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-61" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-61" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-61"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_cse&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-62" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-62" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-62"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-63" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-63" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-63"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-64" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-64" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-64"&gt;&lt;/a&gt;    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-65" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-65" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-65"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-66" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-66" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-66"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-67" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-67" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-67"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-68" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-68" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-68"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-69" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-69" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-69"&gt;&lt;/a&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-70" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-70" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-70"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-71" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-71" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-71"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-72" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-72" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-72"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-73" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-73" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-73"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = getarg(1)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-74" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-74" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-74"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar2 = add(optvar1, 17)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-75" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-75" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-75"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar3 = mul(optvar0, optvar2)&lt;/span&gt;
&lt;a id="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-76" name="rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-76" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_c64a800882de49eaa5c8a6ae4e0ef0f3-76"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar4 = add(optvar3, optvar2)"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="strength-reduction"&gt;
&lt;h2&gt;Strength Reduction&lt;/h2&gt;
&lt;p&gt;Now we have one pass that replaces &lt;code class="docutils literal"&gt;Operations&lt;/code&gt; with &lt;code class="docutils literal"&gt;Constants&lt;/code&gt; and one that
replaces &lt;code class="docutils literal"&gt;Operations&lt;/code&gt; with previously existing &lt;code class="docutils literal"&gt;Operations&lt;/code&gt;. Let's now do one
final pass that replaces &lt;code class="docutils literal"&gt;Operations&lt;/code&gt; by newly invented &lt;code class="docutils literal"&gt;Operations&lt;/code&gt;, a simple
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Strength_reduction"&gt;strength reduction&lt;/a&gt;. This one will be simple.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-1" name="rest_code_e71c9328853e457084e96c7badfb80b0-1" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;strength_reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-2" name="rest_code_e71c9328853e457084e96c7badfb80b0-2" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-3" name="rest_code_e71c9328853e457084e96c7badfb80b0-3" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-4" name="rest_code_e71c9328853e457084e96c7badfb80b0-4" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"add"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-5" name="rest_code_e71c9328853e457084e96c7badfb80b0-5" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-5"&gt;&lt;/a&gt;            &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-6" name="rest_code_e71c9328853e457084e96c7badfb80b0-6" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-6"&gt;&lt;/a&gt;            &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-7" name="rest_code_e71c9328853e457084e96c7badfb80b0-7" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-7"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-8" name="rest_code_e71c9328853e457084e96c7badfb80b0-8" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-8"&gt;&lt;/a&gt;                &lt;span class="c1"&gt;# x + x turns into x &amp;lt;&amp;lt; 1&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-9" name="rest_code_e71c9328853e457084e96c7badfb80b0-9" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-9"&gt;&lt;/a&gt;                &lt;span class="n"&gt;newop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-10" name="rest_code_e71c9328853e457084e96c7badfb80b0-10" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-10"&gt;&lt;/a&gt;                &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-11" name="rest_code_e71c9328853e457084e96c7badfb80b0-11" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-11"&gt;&lt;/a&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-12" name="rest_code_e71c9328853e457084e96c7badfb80b0-12" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-12"&gt;&lt;/a&gt;        &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-13" name="rest_code_e71c9328853e457084e96c7badfb80b0-13" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;opt_bb&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-14" name="rest_code_e71c9328853e457084e96c7badfb80b0-14" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-14"&gt;&lt;/a&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-15" name="rest_code_e71c9328853e457084e96c7badfb80b0-15" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-15"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_strength_reduce&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-16" name="rest_code_e71c9328853e457084e96c7badfb80b0-16" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-17" name="rest_code_e71c9328853e457084e96c7badfb80b0-17" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-18" name="rest_code_e71c9328853e457084e96c7badfb80b0-18" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-18"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-19" name="rest_code_e71c9328853e457084e96c7badfb80b0-19" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-19"&gt;&lt;/a&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-20" name="rest_code_e71c9328853e457084e96c7badfb80b0-20" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strength_reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-21" name="rest_code_e71c9328853e457084e96c7badfb80b0-21" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-21"&gt;&lt;/a&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-22" name="rest_code_e71c9328853e457084e96c7badfb80b0-22" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-22"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-23" name="rest_code_e71c9328853e457084e96c7badfb80b0-23" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-23"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_e71c9328853e457084e96c7badfb80b0-24" name="rest_code_e71c9328853e457084e96c7badfb80b0-24" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_e71c9328853e457084e96c7badfb80b0-24"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = lshift(optvar0, 1)"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="putting-things-together"&gt;
&lt;h2&gt;Putting Things Together&lt;/h2&gt;
&lt;p&gt;Let's combine the passes into one single pass, so that we are going over all
the operations only exactly once, instead of having to look at every operation
once for all the different passes.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-1" name="rest_code_8715cae7134f4c85be02dab9898a017c-1" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;optimize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-2" name="rest_code_8715cae7134f4c85be02dab9898a017c-2" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-3" name="rest_code_8715cae7134f4c85be02dab9898a017c-3" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-4" name="rest_code_8715cae7134f4c85be02dab9898a017c-4" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-5" name="rest_code_8715cae7134f4c85be02dab9898a017c-5" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-5"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"add"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-6" name="rest_code_8715cae7134f4c85be02dab9898a017c-6" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-6"&gt;&lt;/a&gt;            &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-7" name="rest_code_8715cae7134f4c85be02dab9898a017c-7" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-7"&gt;&lt;/a&gt;            &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-8" name="rest_code_8715cae7134f4c85be02dab9898a017c-8" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-9" name="rest_code_8715cae7134f4c85be02dab9898a017c-9" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-9"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# constant folding&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-10" name="rest_code_8715cae7134f4c85be02dab9898a017c-10" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-10"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-11" name="rest_code_8715cae7134f4c85be02dab9898a017c-11" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-11"&gt;&lt;/a&gt;                    &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-12" name="rest_code_8715cae7134f4c85be02dab9898a017c-12" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-12"&gt;&lt;/a&gt;                &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-13" name="rest_code_8715cae7134f4c85be02dab9898a017c-13" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-13"&gt;&lt;/a&gt;                &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-14" name="rest_code_8715cae7134f4c85be02dab9898a017c-14" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-14"&gt;&lt;/a&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-15" name="rest_code_8715cae7134f4c85be02dab9898a017c-15" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-15"&gt;&lt;/a&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-16" name="rest_code_8715cae7134f4c85be02dab9898a017c-16" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-16"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# cse&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-17" name="rest_code_8715cae7134f4c85be02dab9898a017c-17" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-17"&gt;&lt;/a&gt;            &lt;span class="n"&gt;prev_op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_prev_add_op&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-18" name="rest_code_8715cae7134f4c85be02dab9898a017c-18" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-18"&gt;&lt;/a&gt;                &lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-19" name="rest_code_8715cae7134f4c85be02dab9898a017c-19" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-19"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;prev_op&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-20" name="rest_code_8715cae7134f4c85be02dab9898a017c-20" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-20"&gt;&lt;/a&gt;                &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prev_op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-21" name="rest_code_8715cae7134f4c85be02dab9898a017c-21" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-21"&gt;&lt;/a&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-22" name="rest_code_8715cae7134f4c85be02dab9898a017c-22" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-22"&gt;&lt;/a&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-23" name="rest_code_8715cae7134f4c85be02dab9898a017c-23" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-23"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# strength reduce:&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-24" name="rest_code_8715cae7134f4c85be02dab9898a017c-24" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-24"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# x + x turns into x &amp;lt;&amp;lt; 1&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-25" name="rest_code_8715cae7134f4c85be02dab9898a017c-25" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-25"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-26" name="rest_code_8715cae7134f4c85be02dab9898a017c-26" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-26"&gt;&lt;/a&gt;                &lt;span class="n"&gt;newop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-27" name="rest_code_8715cae7134f4c85be02dab9898a017c-27" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-27"&gt;&lt;/a&gt;                &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-28" name="rest_code_8715cae7134f4c85be02dab9898a017c-28" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-28"&gt;&lt;/a&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-29" name="rest_code_8715cae7134f4c85be02dab9898a017c-29" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-29"&gt;&lt;/a&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-30" name="rest_code_8715cae7134f4c85be02dab9898a017c-30" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-30"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# and while we are at it, let's do some&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-31" name="rest_code_8715cae7134f4c85be02dab9898a017c-31" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-31"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# arithmetic simplification:&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-32" name="rest_code_8715cae7134f4c85be02dab9898a017c-32" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-32"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# a + 0 =&amp;gt; a&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-33" name="rest_code_8715cae7134f4c85be02dab9898a017c-33" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-33"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-34" name="rest_code_8715cae7134f4c85be02dab9898a017c-34" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-34"&gt;&lt;/a&gt;                &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-35" name="rest_code_8715cae7134f4c85be02dab9898a017c-35" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-35"&gt;&lt;/a&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-36" name="rest_code_8715cae7134f4c85be02dab9898a017c-36" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-36"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-37" name="rest_code_8715cae7134f4c85be02dab9898a017c-37" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-37"&gt;&lt;/a&gt;                &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_equal_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-38" name="rest_code_8715cae7134f4c85be02dab9898a017c-38" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-38"&gt;&lt;/a&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-39" name="rest_code_8715cae7134f4c85be02dab9898a017c-39" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-39"&gt;&lt;/a&gt;        &lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-40" name="rest_code_8715cae7134f4c85be02dab9898a017c-40" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-40"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;opt_bb&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-41" name="rest_code_8715cae7134f4c85be02dab9898a017c-41" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-41"&gt;&lt;/a&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-42" name="rest_code_8715cae7134f4c85be02dab9898a017c-42" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-42"&gt;&lt;/a&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-43" name="rest_code_8715cae7134f4c85be02dab9898a017c-43" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-43"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_single_pass&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-44" name="rest_code_8715cae7134f4c85be02dab9898a017c-44" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-44"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-45" name="rest_code_8715cae7134f4c85be02dab9898a017c-45" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-45"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# constant folding&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-46" name="rest_code_8715cae7134f4c85be02dab9898a017c-46" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-46"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-47" name="rest_code_8715cae7134f4c85be02dab9898a017c-47" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-47"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-48" name="rest_code_8715cae7134f4c85be02dab9898a017c-48" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-48"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-49" name="rest_code_8715cae7134f4c85be02dab9898a017c-49" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-49"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-50" name="rest_code_8715cae7134f4c85be02dab9898a017c-50" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-50"&gt;&lt;/a&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-51" name="rest_code_8715cae7134f4c85be02dab9898a017c-51" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-51"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-52" name="rest_code_8715cae7134f4c85be02dab9898a017c-52" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-52"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-53" name="rest_code_8715cae7134f4c85be02dab9898a017c-53" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-53"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-54" name="rest_code_8715cae7134f4c85be02dab9898a017c-54" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-54"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = add(19, optvar0)"""&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-55" name="rest_code_8715cae7134f4c85be02dab9898a017c-55" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-55"&gt;&lt;/a&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-56" name="rest_code_8715cae7134f4c85be02dab9898a017c-56" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-56"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# cse + strength reduction&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-57" name="rest_code_8715cae7134f4c85be02dab9898a017c-57" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-57"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-58" name="rest_code_8715cae7134f4c85be02dab9898a017c-58" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-58"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-59" name="rest_code_8715cae7134f4c85be02dab9898a017c-59" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-59"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-60" name="rest_code_8715cae7134f4c85be02dab9898a017c-60" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-60"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-61" name="rest_code_8715cae7134f4c85be02dab9898a017c-61" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-61"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# the same as var3&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-62" name="rest_code_8715cae7134f4c85be02dab9898a017c-62" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-62"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-63" name="rest_code_8715cae7134f4c85be02dab9898a017c-63" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-63"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# the same as var4&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-64" name="rest_code_8715cae7134f4c85be02dab9898a017c-64" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-64"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var6&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-65" name="rest_code_8715cae7134f4c85be02dab9898a017c-65" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-65"&gt;&lt;/a&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-66" name="rest_code_8715cae7134f4c85be02dab9898a017c-66" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-66"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-67" name="rest_code_8715cae7134f4c85be02dab9898a017c-67" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-67"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-68" name="rest_code_8715cae7134f4c85be02dab9898a017c-68" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-68"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-69" name="rest_code_8715cae7134f4c85be02dab9898a017c-69" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-69"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = getarg(1)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-70" name="rest_code_8715cae7134f4c85be02dab9898a017c-70" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-70"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar2 = add(optvar0, optvar1)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-71" name="rest_code_8715cae7134f4c85be02dab9898a017c-71" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-71"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar3 = add(optvar2, 2)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-72" name="rest_code_8715cae7134f4c85be02dab9898a017c-72" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-72"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar4 = lshift(optvar3, 1)"""&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-73" name="rest_code_8715cae7134f4c85be02dab9898a017c-73" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-73"&gt;&lt;/a&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-74" name="rest_code_8715cae7134f4c85be02dab9898a017c-74" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-74"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# removing + 0&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-75" name="rest_code_8715cae7134f4c85be02dab9898a017c-75" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-75"&gt;&lt;/a&gt;    &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-76" name="rest_code_8715cae7134f4c85be02dab9898a017c-76" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-76"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getarg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-77" name="rest_code_8715cae7134f4c85be02dab9898a017c-77" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-77"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-78" name="rest_code_8715cae7134f4c85be02dab9898a017c-78" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-78"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-79" name="rest_code_8715cae7134f4c85be02dab9898a017c-79" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-79"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-80" name="rest_code_8715cae7134f4c85be02dab9898a017c-80" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-80"&gt;&lt;/a&gt;    &lt;span class="n"&gt;var4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-81" name="rest_code_8715cae7134f4c85be02dab9898a017c-81" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-81"&gt;&lt;/a&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-82" name="rest_code_8715cae7134f4c85be02dab9898a017c-82" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-82"&gt;&lt;/a&gt;    &lt;span class="n"&gt;opt_bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-83" name="rest_code_8715cae7134f4c85be02dab9898a017c-83" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-83"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;bb_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"optvar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-84" name="rest_code_8715cae7134f4c85be02dab9898a017c-84" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-84"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar0 = getarg(0)&lt;/span&gt;
&lt;a id="rest_code_8715cae7134f4c85be02dab9898a017c-85" name="rest_code_8715cae7134f4c85be02dab9898a017c-85" href="https://www.pypy.org/posts/2022/07/toy-optimizer.html#rest_code_8715cae7134f4c85be02dab9898a017c-85"&gt;&lt;/a&gt;&lt;span class="s2"&gt;optvar1 = lshift(optvar0, 1)"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That's it for now. Why is this architecture cool? From a software engineering
point of view, sticking everything into a single function like in &lt;code class="docutils literal"&gt;optimize&lt;/code&gt;
above is obviously not great, and if you wanted to do this for real you would
try to split the cases into different functions that are individually
digestible, or even use a DSL that makes the pattern matching much more
readable. But the advantage of the architecture is that it's quite efficient,
it makes it possible to pack a lot of good optimizations into a single pass
over a basic block.&lt;/p&gt;
&lt;p&gt;Of course this works even better if you are in a tracing context, where
everything is put into a trace, which is basically one incredibly long basic
block. In a JIT context it's also quite important that the
optimizer itself runs quickly.&lt;/p&gt;
&lt;p&gt;Various other optimizations are possible in this model. There is a
&lt;a class="reference external" href="https://www.pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html"&gt;follow-up post&lt;/a&gt; that show how to implement what is arguably PyPy's &lt;a class="reference external" href="https://www.pypy.org/posts/2010/09/escape-analysis-in-pypys-jit-1780048403046080197.html"&gt;most
important optimization&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="some-further-pointers"&gt;
&lt;h2&gt;Some Further Pointers&lt;/h2&gt;
&lt;p&gt;This post is only a short introduction and is taking some shortcuts, I wanted to
also give some (non-exhaustive) pointers to more general literature about the
touched topics.&lt;/p&gt;
&lt;p&gt;The approach to CSE described here is usually can be seen as &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Value_numbering"&gt;value
numbering&lt;/a&gt;, it's normally really implemented with a hashmap though. Here's a
&lt;a class="reference external" href="https://www.cs.tufts.edu/~nr/cs257/archive/keith-cooper/value-numbering.pdf"&gt;paper&lt;/a&gt; that describes various styles of implementing that, even beyond a
single basic block. The paper also partly takes the perspective of discovering
equivalence classes of operations that compute the same result.&lt;/p&gt;
&lt;p&gt;A technique that leans even more fully into finding equivalences between
operations is using e-graphs and then applying &lt;a class="reference external" href="https://en.wikipedia.org/wiki/E-graph#Equality_saturation"&gt;equality saturation&lt;/a&gt; (this is
significantly more advanced that what I described here though). A cool modern
project that applies this technique is &lt;a class="reference external" href="https://egraphs-good.github.io/"&gt;egg&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you squint a bit, you can generally view a constant folding pass as a very
simple form of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Partial_evaluation"&gt;Partial Evaluation&lt;/a&gt;: every operation that has constant
arguments is constant-folded away, and the remaining ones are "residualized",
i.e. put into the output program. This point of view is not super important for
the current post, but will become important in the next one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Acknowledgements:&lt;/strong&gt; Thanks to &lt;a class="reference external" href="https://thorstenball.com/"&gt;Thorsten Ball&lt;/a&gt; for &lt;a class="reference external" href="https://twitter.com/cfbolz/status/1547231548017106944"&gt;getting me&lt;/a&gt; to write
this and for his enthusiastic feedback. I also got great feedback from &lt;a class="reference external" href="https://bernsteinbear.com/"&gt;Max
Bernstein&lt;/a&gt;, Matti Picus and Per Vognsen. A conversation with &lt;a class="reference external" href="https://pengwu.substack.com/"&gt;Peng Wu&lt;/a&gt; that
we had many many years ago and that stuck with me made me keep thinking about
various ways to view compiler optimizations.&lt;/p&gt;
&lt;/section&gt;</description><category>toy-optimizer</category><guid>https://www.pypy.org/posts/2022/07/toy-optimizer.html</guid><pubDate>Tue, 19 Jul 2022 12:00:00 GMT</pubDate></item><item><title>How is PyPy Tested?</title><link>https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html</link><dc:creator>Carl Friedrich Bolz-Tereick</dc:creator><description>&lt;section id="how-is-pypy-tested"&gt;
&lt;h2&gt;How is PyPy Tested?&lt;/h2&gt;
&lt;p&gt;In this post I want to give an overview of how the PyPy project does and thinks
about testing. PyPy takes testing quite seriously and has done some from the
start of the project. Here I want to present the different styles of
tests that PyPy has, when we use them and how I think about them.&lt;/p&gt;
&lt;section id="background"&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;To make the blog post self-contained, I am going to start with a small overview
about PyPy's architecture. If you already know what PyPy is and how it works,
you can skip this section.&lt;/p&gt;
&lt;p&gt;PyPy means "Python in Python". It is an alternative implementation of the Python
language. Usually, when we speak of "Python", we can mean two different things.
On the one hand it means "Python as an abstract programming language". On the
other hand, the main implementation of that language is also often called
"Python". To more clearly distinguish the two, the implementation is often also
called "CPython", because it is an interpreter implemented in C code.&lt;/p&gt;
&lt;p&gt;Now we can make the statement "PyPy is Python in Python" more precise: PyPy is
an interpreter for Python 3.9, implemented in RPython. RPython ("Restricted
Python") is a subset of Python 2, which is statically typed (using type
inference, not type annotations) and can be compiled
to C code. That means we can take our Python 3.9 interpreter, and compile it
into a C binary that can run Python 3.9 code. The final binary behaves pretty
similarly to CPython.&lt;/p&gt;
&lt;p&gt;The main thing that makes PyPy interesting is that during the translation of our
interpreter to C, a number of components are automatically inserted into the
final binary. One component is a reasonably good garbage collector.&lt;/p&gt;
&lt;p&gt;The more exciting component that is inserted into the binary is a just-in-time
compiler. The insertion of this component is not fully automatic, instead it is
guided by a small number of annotations in the source code of the interpreter.
The effect of inserting this JIT compiler into the binary is that the resulting
binary can run Python code significantly faster than CPython, in many cases.
How this works is not important for the rest of the post, if you want to see an
example of concretely doing that to a small interpreter you can look at this
&lt;a class="reference external" href="https://www.youtube.com/watch?v=fZj3uljJl_k"&gt;video&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pypy-testing-history"&gt;
&lt;h3&gt;PyPy Testing History&lt;/h3&gt;
&lt;p&gt;A few historical notes on the PyPy project and its relationship to testing: The
PyPy project &lt;a class="reference external" href="https://www.pypy.org/posts/2018/09/the-first-15-years-of-pypy-3412615975376972020.html"&gt;was started in 2004&lt;/a&gt;. At the time when the project was started,
Extreme Programming and Agile Software Development were up and coming. On the
methodology side, PyPy was heavily influenced by these, and started using
Test-Driven Development and pair programming right from the start.&lt;/p&gt;
&lt;p&gt;Also technologically, PyPy has been influential on testing in the Python world.
Originally, PyPy had used the &lt;code class="docutils literal"&gt;unittest&lt;/code&gt; testing framework, but pretty soon
the developers got frustrated with it. &lt;a class="reference external" href="https://holgerkrekel.net/"&gt;Holger Krekel&lt;/a&gt;, one of the original
developers who started PyPy, started the &lt;a class="reference external" href="https://pytest.org/"&gt;pytest&lt;/a&gt; testing framework soon
afterwards.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="interpreter-level-tests"&gt;
&lt;h3&gt;Interpreter-Level Tests&lt;/h3&gt;
&lt;p&gt;So, how are tests for PyPy written, concretely? The tests for the interpreter
are split into two different kinds, which we call "interpreter level tests" and
"application level tests". The former are tests that can be used to test the
objects and functions that are used in the implementation of the Python
interpreter. Since the interpreter is written in Python 2, those tests are also
written in Python 2, using pytest. They tend to be more on the unit test side of
things. They are in files with the pattern &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;test_*.py&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is an example that tests the implementation of integers (very slightly
simplified):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_235273683e07423e91702b09dcc16cc5-1" name="rest_code_235273683e07423e91702b09dcc16cc5-1" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_235273683e07423e91702b09dcc16cc5-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestW_IntObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_235273683e07423e91702b09dcc16cc5-2" name="rest_code_235273683e07423e91702b09dcc16cc5-2" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_235273683e07423e91702b09dcc16cc5-2"&gt;&lt;/a&gt;    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;a id="rest_code_235273683e07423e91702b09dcc16cc5-3" name="rest_code_235273683e07423e91702b09dcc16cc5-3" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_235273683e07423e91702b09dcc16cc5-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_235273683e07423e91702b09dcc16cc5-4" name="rest_code_235273683e07423e91702b09dcc16cc5-4" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_235273683e07423e91702b09dcc16cc5-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_235273683e07423e91702b09dcc16cc5-5" name="rest_code_235273683e07423e91702b09dcc16cc5-5" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_235273683e07423e91702b09dcc16cc5-5"&gt;&lt;/a&gt;        &lt;span class="n"&gt;w_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;W_IntObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_235273683e07423e91702b09dcc16cc5-6" name="rest_code_235273683e07423e91702b09dcc16cc5-6" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_235273683e07423e91702b09dcc16cc5-6"&gt;&lt;/a&gt;        &lt;span class="n"&gt;w_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w_x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descr_hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_235273683e07423e91702b09dcc16cc5-7" name="rest_code_235273683e07423e91702b09dcc16cc5-7" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_235273683e07423e91702b09dcc16cc5-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w_result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;W_IntObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_235273683e07423e91702b09dcc16cc5-8" name="rest_code_235273683e07423e91702b09dcc16cc5-8" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_235273683e07423e91702b09dcc16cc5-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;w_result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intval&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This test checks that if you take an object that represents integers in the
Python language (using the class &lt;code class="docutils literal"&gt;W_IntObject&lt;/code&gt;, a "wrapped integer object")
with the value 42, computing the hash of that object returns another instance of
the same class, also with the value 42.&lt;/p&gt;
&lt;p&gt;These tests can be run on top of any Python 2 implementation, either CPython or
PyPy. We can then test and debug the internals of the PyPy interpreter using
familiar tools like indeed pytest and the Python debuggers. They can be run,
because all the involved code like the tests and the class &lt;code class="docutils literal"&gt;W_IntObject&lt;/code&gt; are
just completely regular Python 2 classes that behave in the regular way when
run on top of a Python interpreter.&lt;/p&gt;
&lt;p&gt;In CPython, these tests don't really have an equivalent. They would correspond
to tests that are written in C and that can test the logic of all the C
functions of CPython that execute certain functionality, accessing the internals
of C structs in the process. &lt;a class="reference internal" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#target-1"&gt;¹&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="application-level-tests"&gt;
&lt;h3&gt;Application-Level Tests&lt;/h3&gt;
&lt;p&gt;There is also a second class of tests for the interpreter. Those are tests that
don't run on the level of the implementation. Instead, they are executed &lt;em&gt;by&lt;/em&gt;
the PyPy Python interpreter, thus running on the level of the applications run
by PyPy. Since the interpreter is running Python 3, the tests are also written
in Python 3. They are stored in files with the pattern &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;apptest_*.py&lt;/span&gt;&lt;/code&gt; and
look like "regular" Python 3 tests. &lt;a class="reference internal" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#target-2"&gt;²&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's an example of how you could write a test equivalent to the one above:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_983e7dffb67b4732a6ceaa3d194c68ea-1" name="rest_code_983e7dffb67b4732a6ceaa3d194c68ea-1" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_983e7dffb67b4732a6ceaa3d194c68ea-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_hash&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_983e7dffb67b4732a6ceaa3d194c68ea-2" name="rest_code_983e7dffb67b4732a6ceaa3d194c68ea-2" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_983e7dffb67b4732a6ceaa3d194c68ea-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This style of test looks more "natural" and is the preferred one in cases where
the test does not need to access the internals of the logic or the objects of
the interpreter.&lt;/p&gt;
&lt;p&gt;Application level tests can be run in two different ways. On the one hand, we
can simply run them on CPython 3. This is very useful! Since we want PyPy to
behave like CPython, running the tests that we write on CPython is useful to
make sure that the tests themselves aren't wrong.&lt;/p&gt;
&lt;p&gt;On the other hand, the main way to run these tests is on top of PyPy, itself
running on top of a Python 2 implementation. This makes it possible to run the
test without first bootstrapping PyPy to C. Since bootstrapping to C is a
relatively slow operation (can take up to an hour) it is crucially important to
be able to run tests without bootstrapping first. It also again makes it
possible to debug crashes in the interpreter using the regular Python 2
debugger. Of course running tests in this way is unfortunately itself not super
fast, given that they run on a stack of two different interpreters.&lt;/p&gt;
&lt;p&gt;Application-level tests correspond quite closely to CPython's tests suite (which
is using the unittest framework). Of course in CPython it is not possible to run
the test suite without building the CPython binary using a C compiler. &lt;a class="reference internal" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#target-3"&gt;³&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So when do we write application-level tests, and when interpreter-level tests?
Interpreter-level tests are necessary to test internal data structures that
touch data and logic that is not directly exposed to the Python language. If
that is not necessary, we try to write application-level tests. App-level tests
are however by their nature always more on the integration test side of things.
To be able to run the &lt;code class="docutils literal"&gt;test_hash&lt;/code&gt; function above, many parts of PyPy need to
work correctly, the parser, the bytecode compiler, the bytecode interpreter, the
&lt;code class="docutils literal"&gt;hash&lt;/code&gt; builtin, calling the &lt;code class="docutils literal"&gt;__hash__&lt;/code&gt; special method, etc, etc.&lt;/p&gt;
&lt;p&gt;This observation is also true for CPython! One could argue that CPython has no
unit tests at all, because in order to be able to even run the tests, most of
Python needs to be in working order already, so all the tests are really
implicitly integration tests.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-cpython-test-suite"&gt;
&lt;h3&gt;The CPython Test Suite&lt;/h3&gt;
&lt;p&gt;We also use the CPython Test suite as a final check to see whether our
interpreter correctly implements all the features of the Python language. In
that sense it acts as some kind of compliance test suite that checks whether we
implement the language correctly. The test suite is not perfect for this.
Since it is written for CPython's purposes during its development, a
lot of the tests check really specific CPython implementation details. Examples
for these are tests that check that &lt;code class="docutils literal"&gt;__del__&lt;/code&gt; is called immediately after
objects go out of scope (which only happens if you use reference counting as a
garbage collection strategy, PyPy uses a &lt;a class="reference external" href="https://www.pypy.org/posts/2013/10/incremental-garbage-collector-in-pypy-8956893523842234676.html"&gt;different approach to garbage
collection&lt;/a&gt;). Other examples are checking
for exception error messages very explicitly. However, the CPython test suite
has gotten a lot better in these regards over time, by adding
&lt;code class="docutils literal"&gt;support.gc_collect()&lt;/code&gt; calls to fix the former problem, and by marking some
very specific tests with the &lt;code class="docutils literal"&gt;@impl_detail&lt;/code&gt; decorator. Thanks to all the
CPython developers who have worked on this!&lt;/p&gt;
&lt;p&gt;In the process of re-implementing CPython's functionality and running CPython's
tests suite, PyPy can often also be a good way to find bugs in CPython. While we
think about the corner cases of some Python feature we occasionally find
situations where CPython didn't get everything completely correct either, which
we then report back.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="testing-for-performance-regressions"&gt;
&lt;h3&gt;Testing for Performance Regressions&lt;/h3&gt;
&lt;p&gt;All the tests we described so far are checking &lt;em&gt;behaviour&lt;/em&gt;. But one of PyPy's
important goals is to be a &lt;em&gt;fast&lt;/em&gt; implementation not "just" a correct one. Some
aspects of performance can be tested by regular unit tests, either application-
or interpreter-level. In order to check whether some performance shortcut is
taken in the interpreter, we sometimes can write tests that monkeypatch the slow
default implementation to always error. Then, if the fast path is taken
properly, that slow default implementation is never reached.&lt;/p&gt;
&lt;p&gt;But we also have additional tests that test the correct interaction with the JIT
explicitly. For that, we have a special style of test that checks that the JIT
will produce the correct machine code for a small snippet of Python code. To
make this kind of test somewhat more robust, we don't check the machine code
directly, but instead the architecture independent &lt;a class="reference external" href="https://www.pypy.org/posts/2018/09/the-first-15-years-of-pypy-3412615975376972020.html"&gt;intermediate
representation&lt;/a&gt; that the JIT uses to produce machine code from.&lt;/p&gt;
&lt;p&gt;As an example, here is a small test that loading the attribute of a constant
global instance can be completely constant folded away:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-1" name="rest_code_f0187750bd7b49568bfb972315f7490f-1" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_load_attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-2" name="rest_code_f0187750bd7b49568bfb972315f7490f-2" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'''&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-3" name="rest_code_f0187750bd7b49568bfb972315f7490f-3" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-3"&gt;&lt;/a&gt;&lt;span class="s1"&gt;        class A(object):&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-4" name="rest_code_f0187750bd7b49568bfb972315f7490f-4" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-4"&gt;&lt;/a&gt;&lt;span class="s1"&gt;            pass&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-5" name="rest_code_f0187750bd7b49568bfb972315f7490f-5" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-5"&gt;&lt;/a&gt;&lt;span class="s1"&gt;        a = A()&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-6" name="rest_code_f0187750bd7b49568bfb972315f7490f-6" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-6"&gt;&lt;/a&gt;&lt;span class="s1"&gt;        a.x = 1&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-7" name="rest_code_f0187750bd7b49568bfb972315f7490f-7" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-7"&gt;&lt;/a&gt;&lt;span class="s1"&gt;        def main(n):&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-8" name="rest_code_f0187750bd7b49568bfb972315f7490f-8" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-8"&gt;&lt;/a&gt;&lt;span class="s1"&gt;            i = 0&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-9" name="rest_code_f0187750bd7b49568bfb972315f7490f-9" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-9"&gt;&lt;/a&gt;&lt;span class="s1"&gt;            while i &amp;lt; n:&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-10" name="rest_code_f0187750bd7b49568bfb972315f7490f-10" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-10"&gt;&lt;/a&gt;&lt;span class="s1"&gt;                i = i + a.x&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-11" name="rest_code_f0187750bd7b49568bfb972315f7490f-11" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-11"&gt;&lt;/a&gt;&lt;span class="s1"&gt;            return i&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-12" name="rest_code_f0187750bd7b49568bfb972315f7490f-12" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-12"&gt;&lt;/a&gt;&lt;span class="s1"&gt;    '''&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-13" name="rest_code_f0187750bd7b49568bfb972315f7490f-13" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-14" name="rest_code_f0187750bd7b49568bfb972315f7490f-14" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-14"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-15" name="rest_code_f0187750bd7b49568bfb972315f7490f-15" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loops_by_filename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-16" name="rest_code_f0187750bd7b49568bfb972315f7490f-16" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-17" name="rest_code_f0187750bd7b49568bfb972315f7490f-17" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-17"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        i9 = int_lt(i5, i6)&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-18" name="rest_code_f0187750bd7b49568bfb972315f7490f-18" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-18"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        guard_true(i9, descr=...)&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-19" name="rest_code_f0187750bd7b49568bfb972315f7490f-19" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-19"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        guard_not_invalidated(descr=...)&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-20" name="rest_code_f0187750bd7b49568bfb972315f7490f-20" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-20"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        i10 = int_add(i5, 1)&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-21" name="rest_code_f0187750bd7b49568bfb972315f7490f-21" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-21"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        --TICK--&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-22" name="rest_code_f0187750bd7b49568bfb972315f7490f-22" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-22"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        jump(..., descr=...)&lt;/span&gt;
&lt;a id="rest_code_f0187750bd7b49568bfb972315f7490f-23" name="rest_code_f0187750bd7b49568bfb972315f7490f-23" href="https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html#rest_code_f0187750bd7b49568bfb972315f7490f-23"&gt;&lt;/a&gt;&lt;span class="s2"&gt;    """&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The string passed to the &lt;code class="docutils literal"&gt;loop.match&lt;/code&gt; function is a string representation of
the intermediate representation code that is generated for the &lt;code class="docutils literal"&gt;while&lt;/code&gt; loop in
the &lt;code class="docutils literal"&gt;main&lt;/code&gt; function given in the source. The important part of that
intermediate representation is that the &lt;code class="docutils literal"&gt;i = i + a.x&lt;/code&gt; addition is optimized
into an &lt;code class="docutils literal"&gt;int_add(x, 1)&lt;/code&gt; operation. The second argument for the addition is the
constant &lt;code class="docutils literal"&gt;1&lt;/code&gt;, because the JIT noted that the global &lt;code class="docutils literal"&gt;a&lt;/code&gt; is a constant, and
the attribute &lt;code class="docutils literal"&gt;x&lt;/code&gt; of that instance is always &lt;code class="docutils literal"&gt;1&lt;/code&gt;. The test thus checks that
this optimization still works.&lt;/p&gt;
&lt;p&gt;Those tests are again more on the unit test side of things (and can thus
unfortunately be a bit brittle sometimes and break). The integration test
equivalent for performance is the &lt;a class="reference external" href="https://speed.pypy.org/"&gt;PyPy Speed Center&lt;/a&gt; which tracks the
performance of micro- and macro-benchmarks over time and lets us see when big
performance regressions are happening. The speed center is not really an
automatic test and does not produce pass/fail outcomes. Instead, it requires
human judgement and intervention in order to interpret the performance changes.
Having a real pass/fail mechanism is something that would be &lt;a class="reference external" href="https://twitter.com/glyph/status/1495122754286198790"&gt;great to have&lt;/a&gt;
but is probably &lt;a class="reference external" href="https://arxiv.org/abs/1602.00602"&gt;quite tricky in practice&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This concludes my overview of some of the different styles of tests that we use
to develop the PyPy Python interpreter.&lt;/p&gt;
&lt;p&gt;There is a whole other set of tests for the development of the RPython language,
the garbage collectors it provides as well as the code that does the automatic
JIT insertion, maybe I'll cover these in a future post.&lt;/p&gt;
&lt;section id="footnotes"&gt;
&lt;h4&gt;Footnotes&lt;/h4&gt;
&lt;p id="target-1"&gt;¹ CPython has the &lt;cite&gt;_testcapimodule.c&lt;/cite&gt; and related modules, that are used to
unit-test the C-API. However, these are still driven from Python tests using
the &lt;code class="docutils literal"&gt;unittest&lt;/code&gt; framework and wouldn't run without the Python interpreter
already working.&lt;/p&gt;
&lt;p id="target-2"&gt;² There is also a deprecated different way to write these tests, by putting
them in the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;test_*.py&lt;/span&gt;&lt;/code&gt; files that interpreter level tests are using and
then having a test class with the pattern &lt;code class="docutils literal"&gt;class AppTest*&lt;/code&gt;. We haven't
converted all of them to the new style yet, even though the old style is
quite weird: since the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;test_*.py&lt;/span&gt;&lt;/code&gt; files are themselves parsed by
Python 2, the tests methods in &lt;code class="docutils literal"&gt;AppTest*&lt;/code&gt; classes need to be written in the
subset of Python 3 syntax that is also valid Python 2 syntax, leading to a lot
of confusion.&lt;/p&gt;
&lt;p id="target-3"&gt;³ Nit-picky side-note: &lt;a class="reference external" href="https://root.cern.ch/root/html534/guides/users-guide/CINT.html"&gt;C interpreters&lt;/a&gt; &lt;a class="reference external" href="https://www.youtube.com/watch?v=yyDD_KRdQQU"&gt;are a thing&lt;/a&gt;! But not that
widely used in practice, or only in very specific situations.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;</description><guid>https://www.pypy.org/posts/2022/04/how-is-pypy-tested.html</guid><pubDate>Sat, 02 Apr 2022 15:00:00 GMT</pubDate></item><item><title>Error Message Style Guides of Various Languages</title><link>https://www.pypy.org/posts/2021/12/error-message-style-guides.html</link><dc:creator>Carl Friedrich Bolz-Tereick</dc:creator><description>&lt;section id="error-message-style-guides-of-various-languages"&gt;
&lt;h2&gt;Error Message Style Guides of Various Languages&lt;/h2&gt;
&lt;p&gt;PyPy has been trying to produce good &lt;a class="reference external" href="https://www.pypy.org/posts/2018/04/improving-syntaxerror-in-pypy-5733639208090522433.html"&gt;SyntaxErrors&lt;/a&gt; and &lt;a class="reference external" href="https://twitter.com/cfbolz/status/783313503230844929/photo/1"&gt;other&lt;/a&gt; &lt;a class="reference external" href="https://twitter.com/pypyproject/status/999930324481081344"&gt;errors&lt;/a&gt; for
a long time. CPython has also made an enormous push to &lt;a class="reference external" href="https://docs.python.org/3/whatsnew/3.10.html#better-error-messages"&gt;improve its
SyntaxErrors in the last few releases&lt;/a&gt;. These improvements are great, but the process
feels somewhat arbitrary sometimes. To see what other languages are doing, I
&lt;a class="reference external" href="https://twitter.com/cfbolz/status/1466033151315173384"&gt;asked people on Twitter&lt;/a&gt; whether they know of error message style guides for
other programming languages.&lt;/p&gt;
&lt;p&gt;Wonderfully, people answered me with lots of helpful links (&lt;a class="reference internal" href="https://www.pypy.org/posts/2021/12/error-message-style-guides.html#full-list"&gt;full list&lt;/a&gt; at the
end of the post), thank you everybody! All those sources are very interesting
and contain many great points, I recommend reading them directly! In this
post, I'll try to summarize some common themes or topics that I thought were
particularly interesting.&lt;/p&gt;
&lt;section id="language-use"&gt;
&lt;h3&gt;Language Use&lt;/h3&gt;
&lt;p&gt;Almost all guides stress the need for plain and simple English, as well as
conciseness and clarity [Flix, Racket, Rust, Flow]. Flow suggests to put coding
effort into making the grammar correct, for example in the case of plurals or
to distinguish between "a" and "an".&lt;/p&gt;
&lt;p&gt;The suggested tone should be friendly and neutral, the messages should not
blame the Programmer [Flow]. Rust and Flix suggest to not use the term
'illegal' and use something like 'invalid' instead.&lt;/p&gt;
&lt;p&gt;Flow suggests to avoid "compiler speak". For example terms like 'token' and
'identifier' should be avoided and terms that are more familiar to programmers
be used (eg "name" is better). The Racket guide goes further and has a list of
allowed technical terms and some prohibited terms.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="structure"&gt;
&lt;h3&gt;Structure&lt;/h3&gt;
&lt;p&gt;Several guides (such as Flix and Flow) point out a 80/20 rule: 80% of the times an error message is
read, the developer knows that message well and knows exactly what to do. For
this use case it's important that the message is short. On the other hand, 20%
of the times this same message will have to be understood by a developer who
has never seen it before and is confused, and so the message needs to contain
enough information
to allow them to find out what is going on. So the error message needs to strike
a balance between brevity and clarity.&lt;/p&gt;
&lt;p&gt;The Racket guide proposes to use the following general structure for errors:
'State the constraint that was violated ("expected a"), followed by what was
found instead.'&lt;/p&gt;
&lt;p&gt;The Rust guides says to avoid "Did you mean?" and questions in general, and
wants the compiler to instead be explicit about why something was suggested. The
example the Rust guide gives is: 'Compare "did you mean: Foo" vs. "there is a
struct with a similar name: Foo".' Racket goes further and forbids
suggestions altogether because "Students will follow well‐meaning‐but‐wrong
advice uncritically, if only because they have no reason to doubt the
authoritative voice of the tool."&lt;/p&gt;
&lt;/section&gt;
&lt;section id="formatting-and-source-positions"&gt;
&lt;h3&gt;Formatting and Source Positions&lt;/h3&gt;
&lt;p&gt;The Rust guide suggests to put all identifiers into backticks (like in
Markdown), Flow formats the error messages using full Markdown.&lt;/p&gt;
&lt;p&gt;The Clang, Flow and Rust guides point out the importance of using precise
source code spans to point to errors, which is especially important if the
compiler information is used in the context of an IDE to show a red squiggly
underline or some other highlighting. The spans should be as small as possible to point out the source of
the error [Flow].&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I am quite impressed how advanced and well-thought out the approaches are. I wonder whether it would makes sense for
Python to adopt a (probably minimal, to get started) subset of these ideas as guidelines for its own errors.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="sources"&gt;
&lt;span id="full-list"&gt;&lt;/span&gt;&lt;h3&gt;Sources&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Rust: &lt;a class="reference external" href="https://rustc-dev-guide.rust-lang.org/diagnostics.html"&gt;https://rustc-dev-guide.rust-lang.org/diagnostics.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clang: &lt;a class="reference external" href="https://clang.llvm.org/diagnostics.html"&gt;https://clang.llvm.org/diagnostics.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flix: &lt;a class="reference external" href="https://flix.dev/principles/"&gt;https://flix.dev/principles/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Racket: &lt;a class="reference external" href="https://cs.brown.edu/~kfisler/Misc/error-msg-guidelines-racket-studlangs.pdf"&gt;https://cs.brown.edu/~kfisler/Misc/error-msg-guidelines-racket-studlangs.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More about the research that lead to the Racket guidelines (including the referenced papers): &lt;a class="reference external" href="https://twitter.com/ShriramKMurthi/status/1451688982761381892"&gt;https://twitter.com/ShriramKMurthi/status/1451688982761381892&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flow: &lt;a class="reference external" href="https://calebmer.com/2019/07/01/writing-good-compiler-error-messages.html"&gt;https://calebmer.com/2019/07/01/writing-good-compiler-error-messages.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elm: &lt;a class="reference external" href="https://elm-lang.org/news/compiler-errors-for-humans"&gt;https://elm-lang.org/news/compiler-errors-for-humans&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elm's error message catalog: &lt;a class="reference external" href="https://github.com/elm/error-message-catalog"&gt;https://github.com/elm/error-message-catalog&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reason: &lt;a class="reference external" href="https://reasonml.github.io/blog/2017/08/25/way-nicer-error-messages.html"&gt;https://reasonml.github.io/blog/2017/08/25/way-nicer-error-messages.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;</description><guid>https://www.pypy.org/posts/2021/12/error-message-style-guides.html</guid><pubDate>Sun, 05 Dec 2021 14:00:00 GMT</pubDate></item></channel></rss>